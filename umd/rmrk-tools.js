(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('url'), require('@polkadot/x-ws'), require('buffer'), require('@polkadot/x-textencoder'), require('@polkadot/wasm-crypto-asmjs'), require('@polkadot/wasm-crypto-wasm'), require('@polkadot/x-textdecoder'), require('@polkadot/x-randomvalues'), require('camelcase'), require('crypto'), require('util')) :
  typeof define === 'function' && define.amd ? define(['exports', 'url', '@polkadot/x-ws', 'buffer', '@polkadot/x-textencoder', '@polkadot/wasm-crypto-asmjs', '@polkadot/wasm-crypto-wasm', '@polkadot/x-textdecoder', '@polkadot/x-randomvalues', 'camelcase', 'crypto', 'util'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.rmrkTools = {}, global.url, global.xWs, global.buffer, global.xTextencoder, global.wasmCryptoAsmjs, global.wasmCryptoWasm, global.xTextdecoder, global.xRandomvalues, global.camelcase, global.crypto$1, global.require$$0$1));
}(this, (function (exports, url, xWs, buffer, xTextencoder, wasmCryptoAsmjs, wasmCryptoWasm, xTextdecoder, xRandomvalues, camelcase, crypto$1, require$$0$1) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var buffer__default = /*#__PURE__*/_interopDefaultLegacy(buffer);
  var camelcase__default = /*#__PURE__*/_interopDefaultLegacy(camelcase);
  var crypto$1__default = /*#__PURE__*/_interopDefaultLegacy(crypto$1);
  var require$$0$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$1);

  class Collection {
    constructor(block, name, max, issuer, symbol, id, metadata) {
      this.changes = [];
      this.block = block;
      this.name = name;
      this.max = max;
      this.issuer = issuer;
      this.symbol = symbol;
      this.id = id;
      this.metadata = metadata;
    }

    mint() {
      if (this.block) {
        throw new Error("An already existing collection cannot be minted!");
      }

      return "RMRK::MINT::" + Collection.V + "::" + encodeURIComponent(JSON.stringify({
        name: this.name,
        max: this.max,
        issuer: this.issuer,
        symbol: this.symbol.toUpperCase(),
        id: this.id,
        metadata: this.metadata
      }));
    }

    change_issuer(address) {
      if (this.block === 0) {
        throw new Error("This collection is new, so there's no issuer to change." + " If it has been deployed on chain, load the existing " + "collection as a new instance first, then change issuer.");
      }

      return "RMRK::CHANGEISSUER::" + Collection.V + "::" + this.id + "::" + address;
    }

    addChange(c) {
      this.changes.push(c);
      return this;
    }

    getChanges() {
      return this.changes;
    }

    static generateId(pubkey, symbol) {
      if (!pubkey.startsWith("0x")) {
        throw new Error("This is not a valid pubkey, it does not start with 0x");
      } //console.log(pubkey);


      return pubkey.substr(2, 10) + pubkey.substring(pubkey.length - 8) + "-" + symbol.toUpperCase();
    }

    static fromRemark(remark, block) {
      if (!block) {
        block = 0;
      }

      const exploded = remark.split("::");

      try {
        if (exploded[0].toUpperCase() != "RMRK") throw new Error("Invalid remark - does not start with RMRK");
        if (exploded[1] != "MINT") throw new Error("The op code needs to be MINT, is " + exploded[1]);

        if (exploded[2] != Collection.V) {
          throw new Error("This remark was issued under version " + exploded[2] + " instead of " + Collection.V);
        }

        const data = decodeURIComponent(exploded[3]);
        const obj = JSON.parse(data);
        if (!obj) throw new Error("Could not parse object from: " + data);
        if (undefined === obj.metadata || !obj.metadata.startsWith("ipfs") && !obj.metadata.startsWith("http")) throw new Error("Invalid metadata - not an HTTP or IPFS URL");
        if (undefined === obj.name) throw new Error("Missing field: name");
        if (undefined === obj.max) throw new Error("Missing field: max");
        if (undefined === obj.issuer) throw new Error("Missing field: issuer");
        if (undefined === obj.symbol) throw new Error("Missing field: symbol");
        if (undefined === obj.id) throw new Error("Missing field: id");
        return new this(block, obj.name, obj.max, obj.issuer, obj.symbol, obj.id, obj.metadata);
      } catch (e) {
        console.error(e.message);
        console.log("MINT error: full input was " + remark);
        return e.message;
      }
    }
    /**
     * TBD - hard dependency on Axios / IPFS to fetch remote
     */


    async load_metadata() {
      if (this.loadedMetadata) return this.loadedMetadata;
      return {};
    }

  }
  Collection.V = "RMRK1.0.0";
  var DisplayType$1;

  (function (DisplayType) {
    DisplayType[DisplayType["null"] = 0] = "null";
    DisplayType[DisplayType["boost_number"] = 1] = "boost_number";
    DisplayType[DisplayType["number"] = 2] = "number";
    DisplayType[DisplayType["boost_percentage"] = 3] = "boost_percentage";
  })(DisplayType$1 || (DisplayType$1 = {}));

  class NFT {
    constructor(block, collection, name, instance, transferable, sn, metadata, data) {
      this.changes = [];
      this.block = block;
      this.collection = collection;
      this.name = name;
      this.instance = instance;
      this.transferable = transferable;
      this.sn = sn;
      this.data = data;
      this.metadata = metadata;
      this.owner = "";
      this.reactions = {};
    }

    getId() {
      if (!this.block) throw new Error("This token is not minted, so it cannot have an ID.");
      return this.block + "-" + this.collection + "-" + this.instance + "-" + this.sn;
    }

    addChange(c) {
      this.changes.push(c);
      return this;
    }

    mintnft() {
      if (this.block) {
        throw new Error("An already existing NFT cannot be minted!");
      }

      return "RMRK::MINTNFT::" + NFT.V + "::" + encodeURIComponent(JSON.stringify({
        collection: this.collection,
        name: this.name,
        instance: this.instance,
        transferable: this.transferable,
        sn: this.sn,
        metadata: this.metadata
      }));
    }

    send(recipient) {
      if (!this.block) {
        throw new Error("You can only send an existing NFT. If you just minted this, please load a new, \n        separate instance as the block number is an important part of an NFT's ID.");
      }

      return "RMRK::SEND::" + NFT.V + "::" + this.getId() + "::" + recipient;
    } // @todo build this out, maybe data type?


    static checkDataFormat(data) {
      return true;
    }

    static fromRemark(remark, block) {
      if (!block) {
        block = 0;
      }

      const exploded = remark.split("::");

      try {
        if (exploded[0].toUpperCase() != "RMRK") throw new Error("Invalid remark - does not start with RMRK");
        if (exploded[1] != "MINTNFT") throw new Error("The op code needs to be MINTNFT, is " + exploded[1]);

        if (exploded[2] != NFT.V) {
          throw new Error("This remark was issued under version " + exploded[2] + " instead of " + NFT.V);
        }

        const data = decodeURIComponent(exploded[3]);
        const obj = JSON.parse(data);
        if (!obj) throw new Error("Could not parse object from: " + data); // Check if the object has either data or metadata

        if ((undefined === obj.metadata || !obj.metadata.startsWith("ipfs") && !obj.metadata.startsWith("http")) && undefined === obj.data) throw new Error("Invalid metadata (not an HTTP or IPFS URL) and missing data");

        if (obj.data) {
          NFT.checkDataFormat(obj.data);
        }

        if (undefined === obj.name) throw new Error("Missing field: name");
        if (undefined === obj.collection) throw new Error("Missing field: collection");
        if (undefined === obj.instance) throw new Error("Missing field: instance");
        if (undefined === obj.transferable) throw new Error("Missing field: transferable");
        if (undefined === obj.sn) throw new Error("Missing field: sn");
        return new this(block, obj.collection, obj.name, obj.instance, obj.transferable, obj.sn, obj.metadata, obj.data);
      } catch (e) {
        console.error(e.message);
        console.log("MINTNFT error: full input was " + remark);
        return e.message;
      }
    }
    /**
     * @param price In plancks, so 10000000000 for 0.01 KSM. Set to 0 if canceling listing.
     */


    list(price) {
      if (!this.block) {
        throw new Error("You can only list an existing NFT. If you just minted this, please load a new, \n        separate instance as the block number is an important part of an NFT's ID.");
      }

      return "RMRK::LIST::" + NFT.V + "::" + this.getId() + "::" + (price > 0 ? price : "cancel");
    }

    buy() {
      if (!this.block) {
        throw new Error("You can only buy an existing NFT. If you just minted this, please load a new, \n        separate instance as the block number is an important part of an NFT's ID.");
      }

      return "RMRK::BUY::" + NFT.V + "::" + this.getId();
    }

    consume() {
      if (!this.block) {
        throw new Error("You can only consume an existing NFT. If you just minted this, please load a new, \n        separate instance as the block number is an important part of an NFT's ID.");
      }

      return "RMRK::CONSUME::" + NFT.V + "::" + this.getId();
    }
    /**
     * TBD - hard dependency on Axios / IPFS to fetch remote
     */


    async load_metadata() {
      if (this.loadedMetadata) return this.loadedMetadata;
      return {};
    }

  }
  NFT.V = "RMRK1.0.0";
  var DisplayType;

  (function (DisplayType) {
    DisplayType[DisplayType["null"] = 0] = "null";
    DisplayType[DisplayType["boost_number"] = 1] = "boost_number";
    DisplayType[DisplayType["number"] = 2] = "number";
    DisplayType[DisplayType["boost_percentage"] = 3] = "boost_percentage";
  })(DisplayType || (DisplayType = {}));

  class ChangeIssuer {
    constructor(issuer, id) {
      this.issuer = issuer;
      this.id = id;
    }

    static fromRemark(remark) {
      const exploded = remark.split("::");

      try {
        if (exploded[0] != "RMRK") throw new Error("Invalid remark - does not start with RMRK");
        if (exploded[2] != ChangeIssuer.V) throw new Error("Version mismatch. Is " + exploded[2] + ", should be " + ChangeIssuer.V);
        if (exploded[1] != "CHANGEISSUER") throw new Error("The op code needs to be CHANGEISSUER, is " + exploded[1]);

        if (undefined === exploded[3] || undefined == exploded[4]) {
          throw new Error("Cound not find ID or new issuer");
        }
      } catch (e) {
        console.error(e.message);
        console.log("CHANGEISSUER error: full input was " + remark);
        return e.message;
      }

      const ci = new ChangeIssuer(exploded[4], exploded[3]);
      return ci;
    }

  }
  ChangeIssuer.V = "RMRK1.0.0";

  class Send {
    constructor(id, recipient) {
      this.recipient = recipient;
      this.id = id;
    }

    static fromRemark(remark) {
      const exploded = remark.split("::");

      try {
        if (exploded[0] != "RMRK") throw new Error("Invalid remark - does not start with RMRK");
        if (exploded[2] != Send.V) throw new Error("Version mismatch. Is " + exploded[2] + ", should be " + Send.V);
        if (exploded[1] != "SEND") throw new Error("The op code needs to be SEND, is " + exploded[1]);

        if (undefined === exploded[3] || undefined == exploded[4]) {
          throw new Error("Cound not find ID or recipient");
        }
      } catch (e) {
        console.error(e.message);
        console.log("SEND error: full input was " + remark);
        return e.message;
      }

      return new Send(exploded[3], exploded[4]);
    }

  }
  Send.V = "RMRK1.0.0";

  class Emote {
    constructor(id, unicode) {
      this.unicode = unicode;
      this.id = id;
    }

    static fromRemark(remark) {
      const exploded = remark.split("::");

      try {
        if (exploded[0] != "RMRK") throw new Error("Invalid remark - does not start with RMRK");
        if (exploded[2] != Emote.V) throw new Error("Version mismatch. Is " + exploded[2] + ", should be " + Emote.V);
        if (exploded[1] != "EMOTE") throw new Error("The op code needs to be EMOTE, is " + exploded[1]);

        if (undefined === exploded[3] || undefined == exploded[4]) {
          throw new Error("Cound not find ID or unicode");
        }
      } catch (e) {
        console.error(e.message);
        console.log("EMOTE error: full input was " + remark);
        return e.message;
      }

      return new Emote(exploded[3], exploded[4]);
    }

  }
  Emote.V = "RMRK1.0.0";

  // Copyright 2017-2021 @polkadot/dev authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Auto-generated by @polkadot/dev, do not edit
  const packageInfo$7 = {
    name: '@polkadot/api-derive',
    version: '3.11.1'
  };

  // Copyright 2017-2021 @polkadot/dev authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Auto-generated by @polkadot/dev, do not edit
  const packageInfo$6 = {
    name: '@polkadot/metadata',
    version: '3.11.1'
  };

  // Copyright 2017-2021 @polkadot/dev authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Auto-generated by @polkadot/dev, do not edit
  const packageInfo$5 = {
    name: '@polkadot/rpc-core',
    version: '3.11.1'
  };

  // Copyright 2017-2021 @polkadot/dev authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Auto-generated by @polkadot/dev, do not edit
  const packageInfo$4 = {
    name: '@polkadot/rpc-provider',
    version: '3.11.1'
  };

  // Copyright 2017-2021 @polkadot/dev authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Auto-generated by @polkadot/dev, do not edit
  const packageInfo$3 = {
    name: '@polkadot/types',
    version: '3.11.1'
  };

  // Copyright 2017-2021 @polkadot/dev authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Auto-generated by @polkadot/dev, do not edit
  const packageInfo$2 = {
    name: '@polkadot/types-known',
    version: '3.11.1'
  };

  // Copyright 2017-2021 @polkadot/x-fetch authors & contributors
  const xglobal = typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : undefined;

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // eslint-disable-next-line @typescript-eslint/ban-types

  /**
   * @name isFunction
   * @summary Tests for a `function`.
   * @description
   * Checks to see if the input value is a JavaScript function.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isFunction } from '@polkadot/util';
   *
   * isFunction(() => false); // => true
   * ```
   */
  function isFunction$1(value) {
    return typeof value === 'function';
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isString
   * @summary Tests for a string.
   * @description
   * Checks to see if the input value is a JavaScript string.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isString } from '@polkadot/util';
   *
   * console.log('isString', isString('test')); // => true
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  function isString(value) {
    return typeof value === 'string' || value instanceof String;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isUndefined
   * @summary Tests for a `undefined` values.
   * @description
   * Checks to see if the input value is `undefined`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isUndefined } from '@polkadot/util';
   *
   * console.log('isUndefined', isUndefined(void(0))); // => true
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function isUndefined(value) {
    return typeof value === 'undefined';
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors

  /**
   * @name assert
   * @summary Checks for a valid test, if not Error is thrown.
   * @description
   * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.
   * @example
   * <BR>
   *
   * ```javascript
   * const { assert } from '@polkadot/util';
   *
   * assert(true, 'True should be true'); // passes
   * assert(false, 'False should not be true'); // Error thrown
   * assert(false, () => 'message'); // Error with 'message'
   * ```
   */
  function assert$a(condition, message) {
    if (!condition) {
      throw new Error(isFunction$1(message) ? message() : message);
    }
  }
  /**
   * @name assertReturn
   * @summart Returns when the value is not undefined, otherwise throws assertion error
   */

  function assertReturn(value, message) {
    assert$a(!isUndefined(value), message);
    return value;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  const DEDUPE = 'Either remove and explicitly install matching versions or deupe using your package manager.\nThe following conflicting packages were found:';
  /** @internal */

  function getEntry(name) {
    const _global = xglobal;

    if (!_global.__polkadotjs) {
      _global.__polkadotjs = {};
    }

    if (!_global.__polkadotjs[name]) {
      _global.__polkadotjs[name] = [];
    }

    return _global.__polkadotjs[name];
  }

  function getVersionLength(all) {
    return all.reduce((max, {
      version
    }) => Math.max(max, version.length), 0);
  }
  /** @internal */


  function flattenInfos(all) {
    const verLength = getVersionLength(all);
    return all.map(({
      name,
      version
    }) => `\t${version.padEnd(verLength)}\t${name}`).join('\n');
  }
  /** @internal */


  function flattenVersions(entry) {
    const all = entry.map(version => isString(version) ? {
      version
    } : version);
    const verLength = getVersionLength(all);
    return all.map(({
      path,
      version
    }) => `\t${version.padEnd(verLength)}\t${!path || path.length < 5 ? '<unknown>' : path}`).join('\n');
  }
  /** @internal */


  function getPath(pathOrFn) {
    if (isFunction$1(pathOrFn)) {
      try {
        return pathOrFn() || '';
      } catch (error) {
        return '';
      }
    }

    return pathOrFn || '';
  }
  /**
   * @name detectPackage
   * @summary Checks that a specific package is only imported once
   */


  function detectPackage({
    name,
    version
  }, pathOrFn, deps = []) {
    assert$a(name.startsWith('@polkadot'), `Invalid package descriptor ${name}`);
    const entry = getEntry(name);
    entry.push({
      path: getPath(pathOrFn),
      version
    });

    if (entry.length !== 1) {
      console.warn(`${name} has multiple versions, ensure that there is only one installed.\n${DEDUPE}\n${flattenVersions(entry)}`);
    } else {
      const mismatches = deps.filter(d => d && d.version !== version);

      if (mismatches.length) {
        console.warn(`${name} requires direct dependencies exactly matching version ${version}.\n${DEDUPE}\n${flattenInfos(mismatches)}`);
      }
    }
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name arrayChunk
   * @summary Split T[] into T[][] based on the defind size
   * @description
   * Returns a set ao arrays based on the chunksize
   * @example
   * <BR>
   *
   * ```javascript
   * import { arrayChunk } from '@polkadot/util';
   *
   * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
   * ```
   */
  function arrayChunk(array, chunkSize) {
    const outputSize = Math.ceil(array.length / chunkSize);
    const output = Array(outputSize);

    for (let index = 0; index < outputSize; index++) {
      const offset = index * chunkSize;
      output[index] = array.slice(offset, offset + chunkSize);
    }

    return output;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isNull
   * @summary Tests for a `null` values.
   * @description
   * Checks to see if the input value is `null`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isNull } from '@polkadot/util';
   *
   * console.log('isNull', isNull(null)); // => true
   * ```
   */
  function isNull(value) {
    return value === null;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // This is supposed to be a faster concat...
  // https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki

  /**
   * @name arrayFlatten
   * @summary Merge T[][] into T[]
   * @description
   * Returns a new array with all arrays merged into one
   * @example
   * <BR>
   *
   * ```javascript
   * import { arrayFlatten } from '@polkadot/util';
   *
   * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
   * ```
   */
  function arrayFlatten(arrays) {
    // pre-allocate based on the combined size
    const output = new Array(arrays.reduce((length, array) => length + array.length, 0));
    let index = -1;

    for (let a = 0; a < arrays.length; a++) {
      const array = arrays[a]; // instead of pushing, we just set the entries

      for (let e = 0; e < array.length; e++) {
        output[++index] = array[e];
      }
    }

    return output;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var bn = createCommonjsModule(function (module) {
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
        Buffer = window.Buffer;
      } else {
        Buffer = buffer__default['default'].Buffer;
      }
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
        this.negative = 1;
      }

      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === 'le') {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex4Bits (string, index) {
      var c = string.charCodeAt(index);
      // 'A' - 'F'
      if (c >= 65 && c <= 70) {
        return c - 55;
      // 'a' - 'f'
      } else if (c >= 97 && c <= 102) {
        return c - 87;
      // '0' - '9'
      } else {
        return (c - 48) & 0xf;
      }
    }

    function parseHexByte (string, lowerBound, index) {
      var r = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r |= parseHex4Bits(string, index - 1) << 4;
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start, endian) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      // 24-bits chunks
      var off = 0;
      var j = 0;

      var w;
      if (endian === 'be') {
        for (i = number.length - 1; i >= start; i -= 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      }

      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      this.strip();
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        if (r.strip !== undefined) {
          // r is BN v4 instance
          r.strip();
        } else {
          // r is BN v5 instance
          r._strip();
        }
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  });

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name BN_ZERO
   * @summary BN constant for 0.
   */

  const BN_ZERO = new bn(0);
  /**
   * @name BN_ONE
   * @summary BN constant for 1.
   */

  const BN_ONE = new bn(1);
  /**
   * @name BN_TWO
   * @summary BN constant for 2.
   */

  new bn(2);
  /**
   * @name BN_THREE
   * @summary BN constant for 3.
   */

  new bn(3);
  /**
   * @name BN_FOUR
   * @summary BN constant for 4.
   */

  new bn(4);
  /**
   * @name BN_FIVE
   * @summary BN constant for 5.
   */

  new bn(5);
  /**
   * @name BN_SIX
   * @summary BN constant for 6.
   */

  new bn(6);
  /**
   * @name BN_SEVEN
   * @summary BN constant for 7.
   */

  new bn(7);
  /**
   * @name BN_EIGHT
   * @summary BN constant for 8.
   */

  new bn(8);
  /**
   * @name BN_NINE
   * @summary BN constant for 9.
   */

  new bn(9);
  /**
   * @name BN_TEN
   * @summary BN constant for 10.
   */

  new bn(10);
  /**
   * @name BN_HUNDRED
   * @summary BN constant for 100.
   */

  const BN_HUNDRED = new bn(100);
  /**
   * @name BN_THOUSAND
   * @summary BN constant for 1,000.
   */

  new bn(1000);
  /**
   * @name BN_MILLION
   * @summary BN constant for 1,000,000.
   */

  const BN_MILLION = new bn(1000000);
  /**
   * @name BN_BILLION
   * @summary BN constant for 1,000,000,000.
   */

  const BN_BILLION = new bn(1000000000);
  /**
   * @name BN_QUINTILL
   * @summary BN constant for 1,000,000,000,000,000,000.
   */

  const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
  /**
   * @name BN_MAX_INTEGER
   * @summary BN constant for MAX_SAFE_INTEGER
   */

  const BN_MAX_INTEGER = new bn(Number.MAX_SAFE_INTEGER);

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isBoolean
   * @summary Tests for a boolean value.
   * @description
   * Checks to see if the input value is a JavaScript boolean.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isBoolean } from '@polkadot/util';
   *
   * isBoolean(false); // => true
   * ```
   */
  function isBoolean(value) {
    return typeof value === 'boolean';
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  const HEX_REGEX = /^0x[a-fA-F0-9]+$/;
  /**
   * @name isHex
   * @summary Tests for a hex string.
   * @description
   * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isHex } from '@polkadot/util';
   *
   * isHex('0x1234'); // => true
   * isHex('0x1234', 8); // => false
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/ban-types

  function isHex(value, bitLength = -1, ignoreLength = false) {
    const isValidHex = value === '0x' || isString(value) && HEX_REGEX.test(value.toString());

    if (isValidHex && bitLength !== -1) {
      return value.length === 2 + Math.ceil(bitLength / 4);
    }

    return isValidHex && (ignoreLength || value.length % 2 === 0);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name hexHasPrefix
   * @summary Tests for the existence of a `0x` prefix.
   * @description
   * Checks for a valid hex input value and if the start matched `0x`
   * @example
   * <BR>
   *
   * ```javascript
   * import { hexHasPrefix } from '@polkadot/util';
   *
   * console.log('has prefix', hexHasPrefix('0x1234')); // => true
   * ```
   */

  function hexHasPrefix(value) {
    return !!(value && isHex(value, -1, true) && value.substr(0, 2) === '0x');
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  const UNPREFIX_HEX_REGEX = /^[a-fA-F0-9]+$/;
  /**
   * @name hexStripPrefix
   * @summary Strips any leading `0x` prefix.
   * @description
   * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.
   * @example
   * <BR>
   *
   * ```javascript
   * import { hexStripPrefix } from '@polkadot/util';
   *
   * console.log('stripped', hexStripPrefix('0x1234')); // => 1234
   * ```
   */

  function hexStripPrefix(value) {
    if (!value) {
      return '';
    }

    if (hexHasPrefix(value)) {
      return value.substr(2);
    }

    if (UNPREFIX_HEX_REGEX.test(value)) {
      return value;
    }

    throw new Error(`Invalid hex ${value} passed to hexStripPrefix`);
  }

  function ownKeys$O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$O(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$O(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function reverse(value) {
    return (value.match(/.{1,2}/g) || []).reverse().join('');
  }
  /**
   * @name hexToBn
   * @summary Creates a BN.js bignumber object from a hex string.
   * @description
   * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.
   * @param _value The value to convert
   * @param _options Options to pass while converting
   * @param _options.isLe Convert using Little Endian
   * @param _options.isNegative Convert using two's complement
   * @example
   * <BR>
   *
   * ```javascript
   * import { hexToBn } from '@polkadot/util';
   *
   * hexToBn('0x123480001f'); // => BN(0x123480001f)
   * ```
   */


  function hexToBn(value, options = {
    isLe: false,
    isNegative: false
  }) {
    if (!value) {
      return new bn(0);
    }

    const _options = _objectSpread$O({
      isLe: false,
      isNegative: false
    }, isBoolean(options) ? {
      isLe: options
    } : options);

    const _value = hexStripPrefix(value); // FIXME: Use BN's 3rd argument `isLe` once this issue is fixed
    // https://github.com/indutny/bn.js/issues/208


    const bn$1 = new bn((_options.isLe ? reverse(_value) : _value) || '00', 16); // fromTwos takes as parameter the number of bits, which is the hex length
    // multiplied by 4.

    return _options.isNegative ? bn$1.fromTwos(_value.length * 4) : bn$1;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  function checkMaxMin(type, items) {
    assert$a(items.length >= 1, 'Must provide one or more BN arguments');
    return items.reduce((acc, val) => bn[type](acc, val), items[0]);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name bnMax
   * @summary Finds and returns the highest value in an array of BNs.
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { bnMax } from '@polkadot/util';
   *
   * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'
   * ```
   */

  function bnMax(...items) {
    return checkMaxMin('max', items);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isBigInt
   * @summary Tests for a `BigInt` object instance.
   * @description
   * Checks to see if the input object is an instance of `BigInt`
   * @example
   * <BR>
   *
   * ```javascript
   * import { isBigInt } from '@polkadot/util';
   *
   * console.log('isBigInt', isBigInt(123_456n)); // => true
   * ```
   */
  function isBigInt(value) {
    return typeof value === 'bigint';
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  function isToBn(value) {
    return !!value && isFunction$1(value.toBn);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors

  function numberToBn(value) {
    return bn.isBN(value) ? value : isToBn(value) ? value.toBn() : new bn(value);
  }
  /**
   * @name bnToBn
   * @summary Creates a BN value from a BN, BigInt, string (base 10 or hex) or number input.
   * @description
   * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { bnToBn } from '@polkadot/util';
   *
   * bnToBn(0x1234); // => BN(0x1234)
   * bnToBn(new BN(0x1234)); // => BN(0x1234)
   * ```
   */


  function bnToBn(value) {
    if (!value) {
      return new bn(0);
    } else if (isHex(value)) {
      return hexToBn(value.toString());
    } else if (isBigInt(value)) {
      return new bn(value.toString());
    }

    return numberToBn(value);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name bnSqrt
   * @summary Calculates the integer square root of a BN
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { bnSqrt } from '@polkadot/util';
   *
   * bnSqrt(new BN(16)).toString(); // => '4'
   * ```
   */

  function bnSqrt(value) {
    const n = bnToBn(value);
    assert$a(n.gte(BN_ZERO), 'square root of negative numbers is not supported'); // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
    // shortcut <= 2^53 - 1 to use the JS utils

    if (n.lte(BN_MAX_INTEGER)) {
      return new bn(Math.floor(Math.sqrt(n.toNumber())));
    } // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
    // output will be larger than this, we expect this to be a safe start


    let x0 = new bn(94906265);

    while (true) {
      const x1 = n.div(x0).iadd(x0).ishrn(1);

      if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
        return x0;
      }

      x0 = x1;
    }
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isNumber
   * @summary Tests for a JavaScript number.
   * @description
   * Checks to see if the input value is a valid number.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isNumber } from '@polkadot/util';
   *
   * console.log('isNumber', isNumber(1234)); // => true
   * ```
   */
  function isNumber(value) {
    return typeof value === 'number';
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name bufferToU8a
   * @summary Creates a Uint8Array value from a Buffer object.
   * @description
   * `null` inputs returns an empty result, `Buffer` values return the actual value as a `Uint8Array`. Anything that is not a `Buffer` object throws an error.
   * @example
   * <BR>
   *
   * ```javascript
   * import { bufferToU8a } from '@polkadot/util';
   *
   * bufferToU8a(Buffer.from([1, 2, 3]));
   * ```
   */
  function bufferToU8a(buffer) {
    return new Uint8Array(buffer || []);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name hexToU8a
   * @summary Creates a Uint8Array object from a hex string.
   * @description
   * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.
   * @example
   * <BR>
   *
   * ```javascript
   * import { hexToU8a } from '@polkadot/util';
   *
   * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])
   * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])
   * ```
   */

  function hexToU8a(_value, bitLength = -1) {
    if (!_value) {
      return new Uint8Array();
    }

    assert$a(isHex(_value), `Expected hex value to convert, found '${_value}'`);
    const value = hexStripPrefix(_value);
    const valLength = value.length / 2;
    const bufLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);
    const result = new Uint8Array(bufLength);
    const offset = Math.max(0, bufLength - valLength);

    for (let index = 0; index < bufLength; index++) {
      result[index + offset] = parseInt(value.substr(index * 2, 2), 16);
    }

    return result;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isBuffer
   * @summary Tests for a `Buffer` object instance.
   * @description
   * Checks to see if the input object is an instance of `Buffer`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isBuffer } from '@polkadot/util';
   *
   * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true
   * ```
   */
  function isBuffer(value) {
    return Buffer.isBuffer(value);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  const encoder = new xTextencoder.TextEncoder();
  /**
   * @name stringToU8a
   * @summary Creates a Uint8Array object from a utf-8 string.
   * @description
   * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.
   * @example
   * <BR>
   *
   * ```javascript
   * import { stringToU8a } from '@polkadot/util';
   *
   * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/ban-types

  function stringToU8a(value) {
    return value ? encoder.encode(value.toString()) : new Uint8Array();
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors

  function convertArray(value) {
    return Array.isArray(value) ? Uint8Array.from(value) : value;
  }

  function convertString(value) {
    return isHex(value) ? hexToU8a(value) : stringToU8a(value);
  }
  /**
   * @name u8aToU8a
   * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.
   * @description
   * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.
   * @example
   * <BR>
   *
   * ```javascript
   * import { { u8aToU8a } from '@polkadot/util';
   *
   * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])
   * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])
   * ```
   */


  function u8aToU8a(value) {
    if (!value) {
      return new Uint8Array();
    } else if (isBuffer(value)) {
      return bufferToU8a(value);
    } else if (isString(value)) {
      return convertString(value);
    }

    return convertArray(value);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name u8aConcat
   * @summary Creates a concatenated Uint8Array from the inputs.
   * @description
   * Concatenates the input arrays into a single `UInt8Array`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { { u8aConcat } from '@polkadot/util';
   *
   * u8aConcat(
   *   new Uint8Array([1, 2, 3]),
   *   new Uint8Array([4, 5, 6])
   * ); // [1, 2, 3, 4, 5, 6]
   * ```
   */

  function u8aConcat(...list) {
    let length = 0;
    let offset = 0;
    const u8as = new Array(list.length);

    for (let i = 0; i < list.length; i++) {
      u8as[i] = u8aToU8a(list[i]);
      length += u8as[i].length;
    }

    const result = new Uint8Array(length);

    for (let i = 0; i < u8as.length; i++) {
      result.set(u8as[i], offset);
      offset += u8as[i].length;
    }

    return result;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors

  function equals(a, b) {
    if (a.length !== b.length) {
      return false;
    }

    for (let i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }

    return true;
  }
  /**
   * @name u8aEq
   * @summary Compares two Uint8Arrays.
   * @description
   * For `UInt8Array` (or hex string) input values true if there is a match.
   * @example
   * <BR>
   *
   * ```javascript
   * import { { u8aEq } from '@polkadot/util';
   *
   * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
   * ```
   */


  function u8aEq(a, b) {
    return equals(u8aToU8a(a), u8aToU8a(b));
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const ALPHABET = new Array(256).fill(0).map((_, n) => n.toString(16).padStart(2, '0'));
  /** @internal */

  function extract(value) {
    const result = new Array(value.length);

    for (let i = 0; i < value.length; i++) {
      result[i] = ALPHABET[value[i]];
    }

    return result.join('');
  }
  /** @internal */


  function trim(value, halfLength) {
    return `${u8aToHex(value.subarray(0, halfLength), -1, false)}…${u8aToHex(value.subarray(value.length - halfLength), -1, false)}`;
  }
  /**
   * @name u8aToHex
   * @summary Creates a hex string from a Uint8Array object.
   * @description
   * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aToHex } from '@polkadot/util';
   *
   * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
   * ```
   */


  function u8aToHex(value, bitLength = -1, isPrefixed = true) {
    const prefix = isPrefixed ? '0x' : '';

    if (!(value !== null && value !== void 0 && value.length)) {
      return prefix;
    }

    const byteLength = Math.ceil(bitLength / 8);
    return prefix + (byteLength > 0 && value.length > byteLength ? trim(value, Math.ceil(byteLength / 2)) : extract(value));
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name u8aToBn
   * @summary Creates a BN from a Uint8Array object.
   * @description
   * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.
   * @param value The value to convert
   * @param options Options to pass while converting
   * @param options.isLe Convert using Little Endian
   * @param options.isNegative Convert using two's complement
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aToBn } from '@polkadot/util';
   *
   * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
   * ```
   */

  function u8aToBn(value, options = {
    isLe: true,
    isNegative: false
  }) {
    return hexToBn(u8aToHex(value), options);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name u8aToBuffer
   * @summary Creates a Buffer object from a hex string.
   * @description
   * `null` inputs returns an empty `Buffer` result. `UInt8Array` input values return the actual bytes value converted to a `Buffer`. Anything that is not a `UInt8Array` throws an error.
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aToBuffer } from '@polkadot/util';
   *
   * console.log('Buffer', u8aToBuffer('0x123480001f'));
   * ```
   */
  function u8aToBuffer(value) {
    return !value ? Buffer.from([]) : Buffer.from(value);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  const decoder = new xTextdecoder.TextDecoder('utf-8');
  /**
   * @name u8aToString
   * @summary Creates a utf-8 string from a Uint8Array object.
   * @description
   * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aToString } from '@polkadot/util';
   *
   * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello
   * ```
   */

  function u8aToString(value) {
    return !(value !== null && value !== void 0 && value.length) ? '' : decoder.decode(value);
  }

  function ownKeys$N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$N(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$N(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function createEmpty(byteLength, options) {
    return options.bitLength === -1 ? new Uint8Array() : new Uint8Array(byteLength);
  }

  function createValue$1(valueBn, byteLength, {
    isLe,
    isNegative
  }) {
    const output = new Uint8Array(byteLength);
    const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
    output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
    return output;
  }
  /**
   * @name bnToU8a
   * @summary Creates a Uint8Array object from a BN.
   * @description
   * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.
   * @example
   * <BR>
   *
   * ```javascript
   * import { bnToU8a } from '@polkadot/util';
   *
   * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]
   * ```
   */


  function bnToU8a(value, arg1 = {
    bitLength: -1,
    isLe: true,
    isNegative: false
  }, arg2) {
    const options = _objectSpread$N({
      bitLength: -1,
      isLe: true,
      isNegative: false
    }, isNumber(arg1) ? {
      bitLength: arg1,
      isLe: arg2
    } : arg1);

    const valueBn = bnToBn(value);
    const byteLength = options.bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((options.bitLength || 0) / 8);
    return value ? createValue$1(valueBn, byteLength, options) : createEmpty(byteLength, options);
  }

  function ownKeys$M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$M(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$M(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const ZERO_STR = '0x00';

  function bnToHex(value, arg1 = {
    bitLength: -1,
    isLe: false,
    isNegative: false
  }, arg2) {
    if (!value) {
      return ZERO_STR;
    }

    const _options = _objectSpread$M({
      isLe: false,
      isNegative: false
    }, isNumber(arg1) ? {
      bitLength: arg1,
      isLe: arg2
    } : arg1);

    return u8aToHex(bnToU8a(value, _options));
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  const MAX_U8 = new bn(2).pow(new bn(8 - 2)).subn(1);
  const MAX_U16 = new bn(2).pow(new bn(16 - 2)).subn(1);
  const MAX_U32 = new bn(2).pow(new bn(32 - 2)).subn(1);
  /**
   * @name compactToU8a
   * @description Encodes a number into a compact representation
   * @example
   * <BR>
   *
   * ```javascript
   * import { compactToU8a } from '@polkadot/util';
   *
   * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])
   * ```
   */

  function compactToU8a(_value) {
    const value = bnToBn(_value);

    if (value.lte(MAX_U8)) {
      return new Uint8Array([value.toNumber() << 2]);
    } else if (value.lte(MAX_U16)) {
      return bnToU8a(value.shln(2).addn(0b01), 16, true);
    } else if (value.lte(MAX_U32)) {
      return bnToU8a(value.shln(2).addn(0b10), 32, true);
    }

    const u8a = bnToU8a(value);
    let length = u8a.length; // adjust to the minimum number of bytes

    while (u8a[length - 1] === 0) {
      length--;
    }

    assert$a(length >= 4, 'Previous tests match anyting less than 2^30; qed');
    return u8aConcat(new Uint8Array([// substract 4 as minimum (also catered for in decoding)
    (length - 4 << 2) + 0b11]), u8a.subarray(0, length));
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name compactAddLength
   * @description Adds a length prefix to the input value
   * @example
   * <BR>
   *
   * ```javascript
   * import { compactAddLength } from '@polkadot/util';
   *
   * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])
   * ```
   */

  function compactAddLength(input) {
    return u8aConcat(compactToU8a(input.length), input);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const DEFAULT_BITLENGTH = 32;

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name compactFromU8a
   * @description Retrievs the offset and encoded length from a compact-prefixed value
   * @example
   * <BR>
   *
   * ```javascript
   * import { compactFromU8a } from '@polkadot/util';
   *
   * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]), 32));
   *
   * console.log('value offset=', offset, 'length=', length); // 4, 0xffff
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars

  function compactFromU8a(_input, bitLength = DEFAULT_BITLENGTH) {
    const input = u8aToU8a(_input);
    const flag = input[0] & 0b11;

    if (flag === 0b00) {
      return [1, new bn(input[0]).shrn(2)];
    } else if (flag === 0b01) {
      return [2, u8aToBn(input.slice(0, 2), true).shrn(2)];
    } else if (flag === 0b10) {
      return [4, u8aToBn(input.slice(0, 4), true).shrn(2)];
    }

    const length = new bn(input[0]).shrn(2) // clear flag
    .addn(4) // add 4 for base length
    .toNumber();
    const offset = 1 + length;
    return [offset, u8aToBn(input.subarray(1, offset), true)];
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name compactStripLength
   * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length
   * @example
   * <BR>
   *
   * ```javascript
   * import { compactStripLength } from '@polkadot/util';
   *
   * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]
   * ```
   */

  function compactStripLength(input, bitLength = DEFAULT_BITLENGTH) {
    const [offset, length] = compactFromU8a(input, bitLength);
    const total = offset + length.toNumber();
    return [total, input.subarray(offset, total)];
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // eslint-disable-next-line prefer-regex-literals
  const NUMBER_REGEX = new RegExp('(\\d+?)(?=(\\d{3})+(?!\\d)|$)', 'g');
  function formatDecimal(value) {
    // We can do this by adjusting the regx, however for the sake of clarity
    // we rather strip and re-add the negative sign in the output
    const isNegative = value[0].startsWith('-');
    const matched = isNegative ? value.substr(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
    return matched ? `${isNegative ? '-' : ''}${matched.join(',')}` : value;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const SI_MID = 8;
  const SI = [{
    power: -24,
    text: 'yocto',
    value: 'y'
  }, {
    power: -21,
    text: 'zepto',
    value: 'z'
  }, {
    power: -18,
    text: 'atto',
    value: 'a'
  }, {
    power: -15,
    text: 'femto',
    value: 'f'
  }, {
    power: -12,
    text: 'pico',
    value: 'p'
  }, {
    power: -9,
    text: 'nano',
    value: 'n'
  }, {
    power: -6,
    text: 'micro',
    value: 'µ'
  }, {
    power: -3,
    text: 'milli',
    value: 'm'
  }, {
    power: 0,
    text: 'Unit',
    value: '-'
  }, // position 8
  {
    power: 3,
    text: 'Kilo',
    value: 'k'
  }, {
    power: 6,
    text: 'Mill',
    value: 'M'
  }, // Mega, M
  {
    power: 9,
    text: 'Bill',
    value: 'B'
  }, // Giga, G
  {
    power: 12,
    text: 'Tril',
    value: 'T'
  }, // Tera, T
  {
    power: 15,
    text: 'Peta',
    value: 'P'
  }, {
    power: 18,
    text: 'Exa',
    value: 'E'
  }, {
    power: 21,
    text: 'Zeta',
    value: 'Z'
  }, {
    power: 24,
    text: 'Yotta',
    value: 'Y'
  }]; // Given a SI type (e.g. k, m, Y) find the SI definition

  function findSi(type) {
    // use a loop here, better RN support (which doesn't have [].find)
    for (let i = 0; i < SI.length; i++) {
      if (SI[i].value === type) {
        return SI[i];
      }
    }

    return SI[SI_MID];
  }
  function calcSi(text, decimals, forceUnit) {
    if (forceUnit) {
      return findSi(forceUnit);
    }

    const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  const DEFAULT_DECIMALS = 0;
  const DEFAULT_UNIT = SI[SI_MID].text;
  let defaultDecimals = DEFAULT_DECIMALS;
  let defaultUnit = DEFAULT_UNIT; // Formats a string/number with <prefix>.<postfix><type> notation

  function _formatBalance(input, options = true, optDecimals = defaultDecimals) {
    let text = bnToBn(input).toString();

    if (text.length === 0 || text === '0') {
      return '0';
    } // strip the negative sign so we can work with clean groupings, re-add this in the
    // end when we return the result (from here on we work with positive numbers)


    const isNegative = text[0].startsWith('-');

    if (isNegative) {
      text = text.substr(1);
    } // extract options - the boolean case is for backwards-compat


    const {
      decimals = optDecimals,
      forceUnit = undefined,
      withSi = true,
      withSiFull = false,
      withUnit = true
    } = isBoolean(options) ? {
      withSi: options
    } : options; // NOTE We start at midpoint (8) minus 1 - this means that values display as
    // 123.456 instead of 0.123k (so always 6 relevant). Additionally we use ceil
    // so there are at most 3 decimal before the decimal separator

    const si = calcSi(text, decimals, forceUnit);
    const mid = text.length - (decimals + si.power);
    const prefix = text.substr(0, mid);
    const padding = mid < 0 ? 0 - mid : 0;
    const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substr(mid < 0 ? 0 : mid)}0000`.substr(0, 4);
    const units = withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${isBoolean(withUnit) ? si.text : withUnit}` : '' : ` ${withSiFull ? si.text : si.value}${withUnit ? `${withSiFull ? ' ' : ''}${isBoolean(withUnit) ? SI[SI_MID].text : withUnit}` : ''}` : '';
    return `${isNegative ? '-' : ''}${formatDecimal(prefix || '0')}.${postfix}${units}`;
  }

  const formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method

  formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals); // eslint-disable-next-line @typescript-eslint/unbound-method


  formatBalance.findSi = findSi; // eslint-disable-next-line @typescript-eslint/unbound-method

  formatBalance.getDefaults = () => {
    return {
      decimals: defaultDecimals,
      unit: defaultUnit
    };
  }; // get allowable options to display in a dropdown
  // eslint-disable-next-line @typescript-eslint/unbound-method


  formatBalance.getOptions = (decimals = defaultDecimals) => {
    return SI.filter(({
      power
    }) => power < 0 ? decimals + power >= 0 : true);
  }; // Sets the default decimals to use for formatting (ui-wide)
  // eslint-disable-next-line @typescript-eslint/unbound-method


  formatBalance.setDefaults = ({
    decimals,
    unit
  }) => {
    defaultDecimals = isUndefined(decimals) ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;
    defaultUnit = isUndefined(unit) ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;
    SI[SI_MID].text = defaultUnit;
  };

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /** @internal */
  function zeroPad(value) {
    return value.toString().padStart(2, '0');
  }

  function formatDate(date) {
    const year = date.getFullYear().toString();
    const month = zeroPad(date.getMonth() + 1);
    const day = zeroPad(date.getDate());
    const hour = zeroPad(date.getHours());
    const minute = zeroPad(date.getMinutes());
    const second = zeroPad(date.getSeconds());
    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  function formatNumber(value) {
    return formatDecimal(bnToBn(value).toString());
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name hexToU8a
   * @summary Creates a Uint8Array object from a hex string.
   * @description
   * Hex input values return the actual bytes value converted to a string. Anything that is not a hex string (including the `0x` prefix) throws an error.
   * @example
   * <BR>
   *
   * ```javascript
   * import { hexToString } from '@polkadot/util';
   *
   * hexToU8a('0x68656c6c6f'); // hello
   * ```
   */

  function hexToString(_value) {
    return u8aToString(hexToU8a(_value));
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  const FORMAT = [9, 10, 13];
  /**
   * @name isAscii
   * @summary Tests if the input is printable ASCII
   * @description
   * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters
   */

  function isAscii(value) {
    return value ? !u8aToU8a(value).some(byte => byte >= 127 || byte < 32 && !FORMAT.includes(byte)) : isString(value);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name isBn
   * @summary Tests for a `BN` object instance.
   * @description
   * Checks to see if the input object is an instance of `BN` (bn.js).
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { isBn } from '@polkadot/util';
   *
   * console.log('isBn', isBn(new BN(1))); // => true
   * ```
   */

  function isBn(value) {
    return bn.isBN(value);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isChildClass
   * @summary Tests if the child extends the parent Class
   * @description
   * Checks to see if the child Class extends the parent Class
   * @example
   * <BR>
   *
   * ```javascript
   * import { isChildClass } from '@polkadot/util';
   *
   * console.log('isChildClass', isChildClass(BN, BN); // => true
   * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false
   * ```
   */
  function isChildClass(Parent, Child) {
    // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664
    return Child // eslint-disable-next-line no-prototype-builtins
    ? Parent === Child || Parent.isPrototypeOf(Child) : false;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isInstanceOf
   * @summary Tests for a instance of a class.
   * @description
   * Checks to see if the input value is an instance of the test class.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isInstanceOf } from '@polkadot/util';
   *
   * console.log('isInstanceOf', isInstanceOf(new Array(0), Array)); // => true
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  function isInstanceOf(value, clazz) {
    return value instanceof clazz;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isObject
   * @summary Tests for an `object`.
   * @description
   * Checks to see if the input value is a JavaScript object.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isObject } from '@polkadot/util';
   *
   * isObject({}); // => true
   * isObject('something'); // => false
   * ```
   */
  function isObject$1(value) {
    return typeof value === 'object';
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name isU8a
   * @summary Tests for a `Uint8Array` object instance.
   * @description
   * Checks to see if the input object is an instance of `Uint8Array`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isUint8Array } from '@polkadot/util';
   *
   * console.log('isU8a', isU8a([])); // => false
   * ```
   */

  function isU8a(value) {
    return isInstanceOf(value, Uint8Array);
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name isUtf8
   * @summary Tests if the input is valid Utf8
   * @description
   * Checks to see if the input string or Uint8Array is valid Utf8
   */

  function isUtf8(value) {
    if (!value) {
      return isString(value);
    }

    const u8a = u8aToU8a(value);
    const len = u8a.length;
    let i = 0;

    while (i < len) {
      if (u8a[i] <= 0x7F)
        /* 00..7F */
        {
          i += 1;
        } else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF)
        /* C2..DF 80..BF */
        {
          if (i + 1 < len)
            /* Expect a 2nd byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF";
                // *faulty_bytes = 2;
                return false;
              }
            } else {
            // *message = "After a first byte between C2 and DF, expecting a 2nd byte.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 2;
        } else if (u8a[i] === 0xE0)
        /* E0 A0..BF 80..BF */
        {
          if (i + 2 < len)
            /* Expect a 2nd and 3rd byte */
            {
              if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte of E0, expecting a 2nd byte between A0 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of E0, expecting a 3nd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }
            } else {
            // *message = "After a first byte of E0, expecting two following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 3;
        } else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC)
        /* E1..EC 80..BF 80..BF */
        {
          if (i + 2 < len)
            /* Expect a 2nd and 3rd byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }
            } else {
            // *message = "After a first byte between E1 and EC, expecting two following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 3;
        } else if (u8a[i] === 0xED)
        /* ED 80..9F 80..BF */
        {
          if (i + 2 < len)
            /* Expect a 2nd and 3rd byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {
                // *message = "After a first byte of ED, expecting 2nd byte between 80 and 9F.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of ED, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }
            } else {
            // *message = "After a first byte of ED, expecting two following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 3;
        } else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF)
        /* EE..EF 80..BF 80..BF */
        {
          if (i + 2 < len)
            /* Expect a 2nd and 3rd byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte between EE and EF, expecting 2nd byte between 80 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte between EE and EF, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }
            } else {
            // *message = "After a first byte between EE and EF, two following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 3;
        } else if (u8a[i] === 0xF0)
        /* F0 90..BF 80..BF 80..BF */
        {
          if (i + 3 < len)
            /* Expect a 2nd, 3rd 3th byte */
            {
              if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte of F0, expecting 2nd byte between 90 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of F0, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }

              if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                // *message = "After a first byte of F0, expecting 4th byte between 80 and BF.";
                // *faulty_bytes = 4;
                return false;
              }
            } else {
            // *message = "After a first byte of F0, expecting three following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 4;
        } else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3)
        /* F1..F3 80..BF 80..BF 80..BF */
        {
          if (i + 3 < len)
            /* Expect a 2nd, 3rd 3th byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }

              if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                // *message = "After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.";
                // *faulty_bytes = 4;
                return false;
              }
            } else {
            // *message = "After a first byte of F1, F2, or F3, expecting three following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 4;
        } else if (u8a[i] === 0xF4)
        /* F4 80..8F 80..BF 80..BF */
        {
          if (i + 3 < len)
            /* Expect a 2nd, 3rd 3th byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {
                // *message = "After a first byte of F4, expecting 2nd byte between 80 and 8F.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of F4, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }

              if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                // *message = "After a first byte of F4, expecting 4th byte between 80 and BF.";
                // *faulty_bytes = 4;
                return false;
              }
            } else {
            // *message = "After a first byte of F4, expecting three following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 4;
        } else {
        // *message = "Expecting bytes in the following ranges: 00..7F C2..F4.";
        // *faulty_bytes = 1;
        return false;
      }
    }

    return true;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  const logTo = {
    debug: 'log',
    error: 'error',
    log: 'log',
    warn: 'warn'
  };

  function formatOther(value) {
    if (value && isObject$1(value) && value.constructor === Object) {
      return Object.keys(value).reduce((result, key) => {
        result[key] = loggerFormat(value[key]);
        return result;
      }, {});
    }

    return value;
  }

  function loggerFormat(value) {
    if (Array.isArray(value)) {
      return value.map(loggerFormat);
    } else if (isBn(value)) {
      return value.toString();
    } else if (isU8a(value) || isBuffer(value)) {
      return u8aToHex(u8aToU8a(value));
    }

    return formatOther(value);
  }

  function apply(log, type, values, maxSize = -1) {
    if (values.length === 1 && isFunction$1(values[0])) {
      const fnResult = values[0]();
      return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
    }

    console[logTo[log]](formatDate(new Date()), type, ...values.map(loggerFormat).map(v => {
      if (maxSize <= 0) {
        return v;
      }

      const r = `${v}`;
      return r.length < maxSize ? v : `${r.substr(0, maxSize)} ...`;
    }));
  }

  function noop$1() {// noop
  }

  function parseEnv(type) {
    var _process, _process$env, _process2, _process2$env;

    const maxSize = parseInt(((_process = process) === null || _process === void 0 ? void 0 : (_process$env = _process.env) === null || _process$env === void 0 ? void 0 : _process$env.DEBUG_MAX) || '-1', 10);
    return [(((_process2 = process) === null || _process2 === void 0 ? void 0 : (_process2$env = _process2.env) === null || _process2$env === void 0 ? void 0 : _process2$env.DEBUG) || '').toLowerCase().split(',').some(e => !!e && (e === '*' || type.startsWith(e))), isNaN(maxSize) ? -1 : maxSize];
  }
  /**
   * @name Logger
   * @summary Creates a consistent log interface for messages
   * @description
   * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.
   * @example
   * <BR>
   *
   * ```javascript
   * import { logger } from '@polkadot';
   *
   * const l = logger('test');
   * ```
   */


  function logger(_type) {
    const type = `${_type.toUpperCase()}:`.padStart(16);
    const [isDebug, maxSize] = parseEnv(_type.toLowerCase());
    return {
      debug: isDebug ? (...values) => apply('debug', type, values, maxSize) : noop$1,
      error: (...values) => apply('error', type, values),
      log: (...values) => apply('log', type, values),
      noop: noop$1,
      warn: (...values) => apply('warn', type, values)
    };
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors

  function defaultGetId() {
    return 'none';
  }

  function normalize(args) {
    return JSON.stringify(args, (_, value) => isBigInt(value) ? value.toString() : value);
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  function memoize(fn, {
    getInstanceId = defaultGetId
  } = {}) {
    const cache = {};

    const memoized = (...args) => {
      const stringParams = normalize(args);
      const instanceId = getInstanceId();

      if (!cache[instanceId]) {
        cache[instanceId] = {};
      }

      if (isUndefined(cache[instanceId][stringParams])) {
        cache[instanceId][stringParams] = fn(...args);
      }

      return cache[instanceId][stringParams];
    };

    memoized.unmemoize = (...args) => {
      const stringParams = normalize(args);
      const instanceId = getInstanceId();

      if (cache[instanceId] && !isUndefined(cache[instanceId][stringParams])) {
        delete cache[instanceId][stringParams];
      }
    };

    return memoized;
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name stringCamelCase
   * @summary Convert a dash/dot/underscore/space separated string/String to camelCase
   */
  // eslint-disable-next-line @typescript-eslint/ban-types

  function stringCamelCase(value) {
    return camelcase__default['default'](value.toString());
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name stringLowerFirst
   * @summary Lowercase the first letter of a string
   * @description
   * Lowercase the first letter of a string
   * @example
   * <BR>
   *
   * ```javascript
   * import { stringLowerFirst } from '@polkadot/util';
   *
   * stringLowerFirst('ABC'); // => 'aBC'
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  function stringLowerFirst(value) {
    return value ? value.charAt(0).toLowerCase() + value.slice(1) : '';
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  /**
   * @name stringToHex
   * @summary Creates a hex string from a utf-8 string
   * @description
   * String input values return the actual encoded hex value.
   * @example
   * <BR>
   *
   * ```javascript
   * import { stringToHex } from '@polkadot/util';
   *
   * stringToU8a('hello'); // 0x68656c6c6f
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/ban-types

  function stringToHex(value) {
    return u8aToHex(stringToU8a(value));
  }

  // Copyright 2017-2021 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name stringUpperFirst
   * @summary Lowercase the first letter of a string
   * @description
   * Lowercase the first letter of a string
   * @example
   * <BR>
   *
   * ```javascript
   * import { stringUpperFirst } from '@polkadot/util';
   *
   * stringUpperFirst('abc'); // => 'Abc'
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  function stringUpperFirst(value) {
    return value ? value.charAt(0).toUpperCase() + value.slice(1) : '';
  }

  // Copyright 2017-2021 @polkadot/dev authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Auto-generated by @polkadot/dev, do not edit
  const packageInfo$1 = {
    name: '@polkadot/api',
    version: '3.11.1'
  };

  function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }

    return receiver;
  }

  var id = 0;
  function _classPrivateFieldKey(name) {
    return "__private_" + id++ + "_" + name;
  }

  // Copyright 2017-2021 @polkadot/dev authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Auto-generated by @polkadot/dev, do not edit
  const packageInfo = {
    name: '@polkadot/wasm-crypto',
    version: '3.2.4'
  };

  // Copyright 2017-2021 @polkadot/wasm-crypto authors & contributors
  detectPackage(packageInfo, typeof __dirname !== 'undefined' && __dirname);

  // Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
  let wasm = null;
  let cachegetInt32 = null;
  let cachegetUint8 = null;
  async function initWasm(wasmBytes, asmFn, wbg) {
    try {
      assert$a(typeof WebAssembly !== 'undefined' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');
      const source = await WebAssembly.instantiate(wasmBytes, {
        wbg
      });
      wasm = source.instance.exports;
    } catch (error) {
      // if we have a valid supplied asm.js, return that
      if (asmFn) {
        wasm = asmFn(wbg);
      } else {
        console.error('FATAL: Unable to initialize @polkadot/wasm-crypto');
        console.error(error);
        wasm = null;
      }
    }
  } // FIXME We really would love to clean this up and have a sign like (wasm, ...params) => T
  // Alas, TypeScript foo is not that great today, so we sadly have an extra closure here

  function withWasm(fn) {
    return (...params) => {
      assert$a(wasm, 'The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');
      return fn(wasm)(...params);
    };
  }
  function getWasm() {
    return wasm;
  }
  function getInt32() {
    if (cachegetInt32 === null || cachegetInt32.buffer !== wasm.memory.buffer) {
      cachegetInt32 = new Int32Array(wasm.memory.buffer);
    }

    return cachegetInt32;
  }
  function getUint8() {
    if (cachegetUint8 === null || cachegetUint8.buffer !== wasm.memory.buffer) {
      cachegetUint8 = new Uint8Array(wasm.memory.buffer);
    }

    return cachegetUint8;
  }
  function getU8a(ptr, len) {
    return getUint8().subarray(ptr / 1, ptr / 1 + len);
  }
  function getString(ptr, len) {
    return u8aToString(getU8a(ptr, len));
  }
  function allocU8a(arg) {
    const ptr = wasm.__wbindgen_malloc(arg.length * 1);

    getUint8().set(arg, ptr / 1);
    return [ptr, arg.length];
  }
  function resultU8a() {
    const r0 = getInt32()[8 / 4 + 0];
    const r1 = getInt32()[8 / 4 + 1];
    const ret = getU8a(r0, r1).slice();

    wasm.__wbindgen_free(r0, r1 * 1);

    return ret;
  }

  // Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
  const DEFAULT_CRYPTO = {
    getRandomValues: xRandomvalues.getRandomValues
  };
  const DEFAULT_SELF = {
    crypto: DEFAULT_CRYPTO
  };
  const heap = new Array(32).fill(undefined).concat(undefined, null, true, false);
  let heapNext = heap.length;

  function getObject(idx) {
    return heap[idx];
  }

  function dropObject(idx) {
    if (idx < 36) {
      return;
    }

    heap[idx] = heapNext;
    heapNext = idx;
  }

  function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
  }

  function addObject(obj) {
    if (heapNext === heap.length) {
      heap.push(heap.length + 1);
    }

    const idx = heapNext;
    heapNext = heap[idx];
    heap[idx] = obj;
    return idx;
  }

  function __wbindgen_is_undefined(idx) {
    return getObject(idx) === undefined;
  }
  function __wbg_self_1b7a39e3a92c949c() {
    return addObject(DEFAULT_SELF);
  }
  function __wbg_require_604837428532a733(ptr, len) {
    throw new Error(`Unable to require ${getString(ptr, len)}`);
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars

  function __wbg_crypto_968f1772287e2df0(_idx) {
    return addObject(DEFAULT_CRYPTO);
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars

  function __wbg_getRandomValues_a3d34b4fee3c2869(_idx) {
    return addObject(DEFAULT_CRYPTO.getRandomValues);
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars

  function __wbg_getRandomValues_f5e14ab7ac8e995d(_arg0, ptr, len) {
    DEFAULT_CRYPTO.getRandomValues(getU8a(ptr, len));
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars

  function __wbg_randomFillSync_d5bd2d655fdf256a(_idx, _ptr, _len) {
    throw new Error('randomFillsync is not available'); // getObject(idx).randomFillSync(getU8a(ptr, len));
  }
  function __wbindgen_object_drop_ref(idx) {
    takeObject(idx);
  }
  function abort() {
    throw new Error('abort');
  }

  var imports = /*#__PURE__*/Object.freeze({
    __proto__: null,
    __wbindgen_is_undefined: __wbindgen_is_undefined,
    __wbg_self_1b7a39e3a92c949c: __wbg_self_1b7a39e3a92c949c,
    __wbg_require_604837428532a733: __wbg_require_604837428532a733,
    __wbg_crypto_968f1772287e2df0: __wbg_crypto_968f1772287e2df0,
    __wbg_getRandomValues_a3d34b4fee3c2869: __wbg_getRandomValues_a3d34b4fee3c2869,
    __wbg_getRandomValues_f5e14ab7ac8e995d: __wbg_getRandomValues_f5e14ab7ac8e995d,
    __wbg_randomFillSync_d5bd2d655fdf256a: __wbg_randomFillSync_d5bd2d655fdf256a,
    __wbindgen_object_drop_ref: __wbindgen_object_drop_ref,
    abort: abort
  });

  // Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
  const wasmPromise = initWasm(wasmCryptoWasm.wasmBytes, wasmCryptoAsmjs.asmJsInit, imports).catch(() => null);
  const blake2b$1 = withWasm(wasm => (data, key, size) => {
    const [ptr0, len0] = allocU8a(data);
    const [ptr1, len1] = allocU8a(key);
    wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);
    return resultU8a();
  });
  const keccak256 = withWasm(wasm => data => {
    const [ptr0, len0] = allocU8a(data);
    wasm.ext_keccak256(8, ptr0, len0);
    return resultU8a();
  });
  const twox = withWasm(wasm => (data, rounds) => {
    const [ptr0, len0] = allocU8a(data);
    wasm.ext_twox(8, ptr0, len0, rounds);
    return resultU8a();
  });
  function isReady() {
    return !!getWasm();
  }
  function waitReady() {
    return wasmPromise.then(() => isReady());
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  function cryptoWaitReady() {
    return waitReady().then(() => true).catch(error => {
      console.error('Unable to initialize @polkadot/util-crypto', error);
      return false;
    });
  }

  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

  var safeBuffer = createCommonjsModule(function (module, exports) {
  /* eslint-disable node/no-deprecated-api */

  var Buffer = buffer__default['default'].Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer__default['default'];
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer__default['default'], exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }

  SafeBuffer.prototype = Object.create(Buffer.prototype);

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return buffer__default['default'].SlowBuffer(size)
  };
  });

  // base-x encoding / decoding
  // Copyright (c) 2018 base-x contributors
  // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
  // Distributed under the MIT software license, see the accompanying
  // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
  // @ts-ignore
  var _Buffer = safeBuffer.Buffer;
  function base$1 (ALPHABET) {
    if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
    var BASE_MAP = new Uint8Array(256);
    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }
    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
      BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
    function encode (source) {
      if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source); }
      if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
      if (source.length === 0) { return '' }
          // Skip & count leading zeroes.
      var zeroes = 0;
      var length = 0;
      var pbegin = 0;
      var pend = source.length;
      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }
          // Allocate enough space in big-endian base58 representation.
      var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
      var b58 = new Uint8Array(size);
          // Process the bytes.
      while (pbegin !== pend) {
        var carry = source[pbegin];
              // Apply "b58 = b58 * 256 + ch".
        var i = 0;
        for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
          carry += (256 * b58[it1]) >>> 0;
          b58[it1] = (carry % BASE) >>> 0;
          carry = (carry / BASE) >>> 0;
        }
        if (carry !== 0) { throw new Error('Non-zero carry') }
        length = i;
        pbegin++;
      }
          // Skip leading zeroes in base58 result.
      var it2 = size - length;
      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }
          // Translate the result into a string.
      var str = LEADER.repeat(zeroes);
      for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
      return str
    }
    function decodeUnsafe (source) {
      if (typeof source !== 'string') { throw new TypeError('Expected String') }
      if (source.length === 0) { return _Buffer.alloc(0) }
      var psz = 0;
          // Skip leading spaces.
      if (source[psz] === ' ') { return }
          // Skip and count leading '1's.
      var zeroes = 0;
      var length = 0;
      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }
          // Allocate enough space in big-endian base256 representation.
      var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
      var b256 = new Uint8Array(size);
          // Process the characters.
      while (source[psz]) {
              // Decode character
        var carry = BASE_MAP[source.charCodeAt(psz)];
              // Invalid character
        if (carry === 255) { return }
        var i = 0;
        for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
          carry += (BASE * b256[it3]) >>> 0;
          b256[it3] = (carry % 256) >>> 0;
          carry = (carry / 256) >>> 0;
        }
        if (carry !== 0) { throw new Error('Non-zero carry') }
        length = i;
        psz++;
      }
          // Skip trailing spaces.
      if (source[psz] === ' ') { return }
          // Skip leading zeroes in b256.
      var it4 = size - length;
      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }
      var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
      vch.fill(0x00, 0, zeroes);
      var j = zeroes;
      while (it4 !== size) {
        vch[j++] = b256[it4++];
      }
      return vch
    }
    function decode (string) {
      var buffer = decodeUnsafe(string);
      if (buffer) { return buffer }
      throw new Error('Non-base' + BASE + ' character')
    }
    return {
      encode: encode,
      decodeUnsafe: decodeUnsafe,
      decode: decode
    }
  }
  var src = base$1;

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors

  const BASE58_ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  const bs58 = src(BASE58_ALPHABET);

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  const BASE_CONFIG = {
    alphabet: BASE58_ALPHABET,
    ipfsChar: 'z',
    type: 'base58'
  };
  function validateChars({
    alphabet,
    ipfsChar,
    type
  }, value, ipfsCompat) {
    assert$a(value, `Expected non-null, non-empty ${type} input`);
    assert$a(!ipfsCompat || value[0] === ipfsChar, `Expected ${type} to start with '${ipfsChar}'`);

    for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {
      assert$a(alphabet.includes(value[i]), `Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
    }

    return true;
  }
  /**
   * @name base58Validate
   * @summary Validates a base58 value.
   * @description
   * Validates the the supplied value is valid base58
   */

  function base58Validate(value, ipfsCompat) {
    return validateChars(BASE_CONFIG, value, ipfsCompat);
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  /**
   * @name base58Decode
   * @summary Decodes a base58 value.
   * @description
   * From the provided input, decode the base58 and return the result as an `Uint8Array`.
   */

  function base58Decode(value, ipfsCompat) {
    base58Validate(value, ipfsCompat);
    return bufferToU8a(bs58.decode(value.substr(ipfsCompat ? 1 : 0)));
  }

  var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';

  // For convenience, let people hash a string, not just a Uint8Array
  function normalizeInput (input) {
    var ret;
    if (input instanceof Uint8Array) {
      ret = input;
    } else if (input instanceof Buffer) {
      ret = new Uint8Array(input);
    } else if (typeof (input) === 'string') {
      ret = new Uint8Array(Buffer.from(input, 'utf8'));
    } else {
      throw new Error(ERROR_MSG_INPUT)
    }
    return ret
  }

  // Converts a Uint8Array to a hexadecimal string
  // For example, toHex([255, 0, 255]) returns "ff00ff"
  function toHex$1 (bytes) {
    return Array.prototype.map.call(bytes, function (n) {
      return (n < 16 ? '0' : '') + n.toString(16)
    }).join('')
  }

  // Converts any value in [0...2^32-1] to an 8-character hex string
  function uint32ToHex (val) {
    return (0x100000000 + val).toString(16).substring(1)
  }

  // For debugging: prints out hash state in the same format as the RFC
  // sample computation exactly, so that you can diff
  function debugPrint (label, arr, size) {
    var msg = '\n' + label + ' = ';
    for (var i = 0; i < arr.length; i += 2) {
      if (size === 32) {
        msg += uint32ToHex(arr[i]).toUpperCase();
        msg += ' ';
        msg += uint32ToHex(arr[i + 1]).toUpperCase();
      } else if (size === 64) {
        msg += uint32ToHex(arr[i + 1]).toUpperCase();
        msg += uint32ToHex(arr[i]).toUpperCase();
      } else throw new Error('Invalid size ' + size)
      if (i % 6 === 4) {
        msg += '\n' + new Array(label.length + 4).join(' ');
      } else if (i < arr.length - 2) {
        msg += ' ';
      }
    }
    console.log(msg);
  }

  // For performance testing: generates N bytes of input, hashes M times
  // Measures and prints MB/second hash performance each time
  function testSpeed (hashFn, N, M) {
    var startMs = new Date().getTime();

    var input = new Uint8Array(N);
    for (var i = 0; i < N; i++) {
      input[i] = i % 256;
    }
    var genMs = new Date().getTime();
    console.log('Generated random input in ' + (genMs - startMs) + 'ms');
    startMs = genMs;

    for (i = 0; i < M; i++) {
      var hashHex = hashFn(input);
      var hashMs = new Date().getTime();
      var ms = hashMs - startMs;
      startMs = hashMs;
      console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');
      console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND');
    }
  }

  var util = {
    normalizeInput: normalizeInput,
    toHex: toHex$1,
    debugPrint: debugPrint,
    testSpeed: testSpeed
  };

  // Blake2B in pure Javascript
  // Adapted from the reference implementation in RFC7693
  // Ported to Javascript by DC - https://github.com/dcposch



  // 64-bit unsigned addition
  // Sets v[a,a+1] += v[b,b+1]
  // v should be a Uint32Array
  function ADD64AA (v, a, b) {
    var o0 = v[a] + v[b];
    var o1 = v[a + 1] + v[b + 1];
    if (o0 >= 0x100000000) {
      o1++;
    }
    v[a] = o0;
    v[a + 1] = o1;
  }

  // 64-bit unsigned addition
  // Sets v[a,a+1] += b
  // b0 is the low 32 bits of b, b1 represents the high 32 bits
  function ADD64AC (v, a, b0, b1) {
    var o0 = v[a] + b0;
    if (b0 < 0) {
      o0 += 0x100000000;
    }
    var o1 = v[a + 1] + b1;
    if (o0 >= 0x100000000) {
      o1++;
    }
    v[a] = o0;
    v[a + 1] = o1;
  }

  // Little-endian byte access
  function B2B_GET32 (arr, i) {
    return (arr[i] ^
    (arr[i + 1] << 8) ^
    (arr[i + 2] << 16) ^
    (arr[i + 3] << 24))
  }

  // G Mixing function
  // The ROTRs are inlined for speed
  function B2B_G (a, b, c, d, ix, iy) {
    var x0 = m$1[ix];
    var x1 = m$1[ix + 1];
    var y0 = m$1[iy];
    var y1 = m$1[iy + 1];

    ADD64AA(v$1, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
    ADD64AC(v$1, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits

    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
    var xor0 = v$1[d] ^ v$1[a];
    var xor1 = v$1[d + 1] ^ v$1[a + 1];
    v$1[d] = xor1;
    v$1[d + 1] = xor0;

    ADD64AA(v$1, c, d);

    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
    xor0 = v$1[b] ^ v$1[c];
    xor1 = v$1[b + 1] ^ v$1[c + 1];
    v$1[b] = (xor0 >>> 24) ^ (xor1 << 8);
    v$1[b + 1] = (xor1 >>> 24) ^ (xor0 << 8);

    ADD64AA(v$1, a, b);
    ADD64AC(v$1, a, y0, y1);

    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
    xor0 = v$1[d] ^ v$1[a];
    xor1 = v$1[d + 1] ^ v$1[a + 1];
    v$1[d] = (xor0 >>> 16) ^ (xor1 << 16);
    v$1[d + 1] = (xor1 >>> 16) ^ (xor0 << 16);

    ADD64AA(v$1, c, d);

    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
    xor0 = v$1[b] ^ v$1[c];
    xor1 = v$1[b + 1] ^ v$1[c + 1];
    v$1[b] = (xor1 >>> 31) ^ (xor0 << 1);
    v$1[b + 1] = (xor0 >>> 31) ^ (xor1 << 1);
  }

  // Initialization Vector
  var BLAKE2B_IV32 = new Uint32Array([
    0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,
    0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,
    0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,
    0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19
  ]);

  var SIGMA8 = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3
  ];

  // These are offsets into a uint64 buffer.
  // Multiply them all by 2 to make them offsets into a uint32 buffer,
  // because this is Javascript and we don't have uint64s
  var SIGMA82 = new Uint8Array(SIGMA8.map(function (x) { return x * 2 }));

  // Compression function. 'last' flag indicates last block.
  // Note we're representing 16 uint64s as 32 uint32s
  var v$1 = new Uint32Array(32);
  var m$1 = new Uint32Array(32);
  function blake2bCompress (ctx, last) {
    var i = 0;

    // init work variables
    for (i = 0; i < 16; i++) {
      v$1[i] = ctx.h[i];
      v$1[i + 16] = BLAKE2B_IV32[i];
    }

    // low 64 bits of offset
    v$1[24] = v$1[24] ^ ctx.t;
    v$1[25] = v$1[25] ^ (ctx.t / 0x100000000);
    // high 64 bits not supported, offset may not be higher than 2**53-1

    // last block flag set ?
    if (last) {
      v$1[28] = ~v$1[28];
      v$1[29] = ~v$1[29];
    }

    // get little-endian words
    for (i = 0; i < 32; i++) {
      m$1[i] = B2B_GET32(ctx.b, 4 * i);
    }

    // twelve rounds of mixing
    // uncomment the DebugPrint calls to log the computation
    // and match the RFC sample documentation
    // util.debugPrint('          m[16]', m, 64)
    for (i = 0; i < 12; i++) {
      // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
      B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
      B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
      B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
      B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
      B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
      B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
      B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
      B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
    }
    // util.debugPrint('   (i=12) v[16]', v, 64)

    for (i = 0; i < 16; i++) {
      ctx.h[i] = ctx.h[i] ^ v$1[i] ^ v$1[i + 16];
    }
    // util.debugPrint('h[8]', ctx.h, 64)
  }

  // Creates a BLAKE2b hashing context
  // Requires an output length between 1 and 64 bytes
  // Takes an optional Uint8Array key
  function blake2bInit (outlen, key) {
    if (outlen === 0 || outlen > 64) {
      throw new Error('Illegal output length, expected 0 < length <= 64')
    }
    if (key && key.length > 64) {
      throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')
    }

    // state, 'param block'
    var ctx = {
      b: new Uint8Array(128),
      h: new Uint32Array(16),
      t: 0, // input count
      c: 0, // pointer within buffer
      outlen: outlen // output length in bytes
    };

    // initialize hash state
    for (var i = 0; i < 16; i++) {
      ctx.h[i] = BLAKE2B_IV32[i];
    }
    var keylen = key ? key.length : 0;
    ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

    // key the hash, if applicable
    if (key) {
      blake2bUpdate(ctx, key);
      // at the end
      ctx.c = 128;
    }

    return ctx
  }

  // Updates a BLAKE2b streaming hash
  // Requires hash context and Uint8Array (byte array)
  function blake2bUpdate (ctx, input) {
    for (var i = 0; i < input.length; i++) {
      if (ctx.c === 128) { // buffer full ?
        ctx.t += ctx.c; // add counters
        blake2bCompress(ctx, false); // compress (not last)
        ctx.c = 0; // counter to zero
      }
      ctx.b[ctx.c++] = input[i];
    }
  }

  // Completes a BLAKE2b streaming hash
  // Returns a Uint8Array containing the message digest
  function blake2bFinal (ctx) {
    ctx.t += ctx.c; // mark last block offset

    while (ctx.c < 128) { // fill up with zeros
      ctx.b[ctx.c++] = 0;
    }
    blake2bCompress(ctx, true); // final block flag = 1

    // little endian convert and store
    var out = new Uint8Array(ctx.outlen);
    for (var i = 0; i < ctx.outlen; i++) {
      out[i] = ctx.h[i >> 2] >> (8 * (i & 3));
    }
    return out
  }

  // Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
  //
  // Returns a n-byte Uint8Array
  //
  // Parameters:
  // - input - the input bytes, as a string, Buffer or Uint8Array
  // - key - optional key Uint8Array, up to 64 bytes
  // - outlen - optional output length in bytes, default 64
  function blake2b (input, key, outlen) {
    // preprocess inputs
    outlen = outlen || 64;
    input = util.normalizeInput(input);

    // do the math
    var ctx = blake2bInit(outlen, key);
    blake2bUpdate(ctx, input);
    return blake2bFinal(ctx)
  }

  // Computes the BLAKE2B hash of a string or byte array
  //
  // Returns an n-byte hash in hex, all lowercase
  //
  // Parameters:
  // - input - the input bytes, as a string, Buffer, or Uint8Array
  // - key - optional key Uint8Array, up to 64 bytes
  // - outlen - optional output length in bytes, default 64
  function blake2bHex (input, key, outlen) {
    var output = blake2b(input, key, outlen);
    return util.toHex(output)
  }

  var blake2b_1 = {
    blake2b: blake2b,
    blake2bHex: blake2bHex,
    blake2bInit: blake2bInit,
    blake2bUpdate: blake2bUpdate,
    blake2bFinal: blake2bFinal
  };

  // BLAKE2s hash function in pure Javascript
  // Adapted from the reference implementation in RFC7693
  // Ported to Javascript by DC - https://github.com/dcposch



  // Little-endian byte access.
  // Expects a Uint8Array and an index
  // Returns the little-endian uint32 at v[i..i+3]
  function B2S_GET32 (v, i) {
    return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)
  }

  // Mixing function G.
  function B2S_G (a, b, c, d, x, y) {
    v[a] = v[a] + v[b] + x;
    v[d] = ROTR32(v[d] ^ v[a], 16);
    v[c] = v[c] + v[d];
    v[b] = ROTR32(v[b] ^ v[c], 12);
    v[a] = v[a] + v[b] + y;
    v[d] = ROTR32(v[d] ^ v[a], 8);
    v[c] = v[c] + v[d];
    v[b] = ROTR32(v[b] ^ v[c], 7);
  }

  // 32-bit right rotation
  // x should be a uint32
  // y must be between 1 and 31, inclusive
  function ROTR32 (x, y) {
    return (x >>> y) ^ (x << (32 - y))
  }

  // Initialization Vector.
  var BLAKE2S_IV = new Uint32Array([
    0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,
    0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19]);

  var SIGMA = new Uint8Array([
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0]);

  // Compression function. "last" flag indicates last block
  var v = new Uint32Array(16);
  var m = new Uint32Array(16);
  function blake2sCompress (ctx, last) {
    var i = 0;
    for (i = 0; i < 8; i++) { // init work variables
      v[i] = ctx.h[i];
      v[i + 8] = BLAKE2S_IV[i];
    }

    v[12] ^= ctx.t; // low 32 bits of offset
    v[13] ^= (ctx.t / 0x100000000); // high 32 bits
    if (last) { // last block flag set ?
      v[14] = ~v[14];
    }

    for (i = 0; i < 16; i++) { // get little-endian words
      m[i] = B2S_GET32(ctx.b, 4 * i);
    }

    // ten rounds of mixing
    // uncomment the DebugPrint calls to log the computation
    // and match the RFC sample documentation
    // util.debugPrint('          m[16]', m, 32)
    for (i = 0; i < 10; i++) {
      // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)
      B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);
      B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);
      B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);
      B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);
      B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);
      B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);
      B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);
      B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);
    }
    // util.debugPrint('   (i=10) v[16]', v, 32)

    for (i = 0; i < 8; i++) {
      ctx.h[i] ^= v[i] ^ v[i + 8];
    }
    // util.debugPrint('h[8]', ctx.h, 32)
  }

  // Creates a BLAKE2s hashing context
  // Requires an output length between 1 and 32 bytes
  // Takes an optional Uint8Array key
  function blake2sInit (outlen, key) {
    if (!(outlen > 0 && outlen <= 32)) {
      throw new Error('Incorrect output length, should be in [1, 32]')
    }
    var keylen = key ? key.length : 0;
    if (key && !(keylen > 0 && keylen <= 32)) {
      throw new Error('Incorrect key length, should be in [1, 32]')
    }

    var ctx = {
      h: new Uint32Array(BLAKE2S_IV), // hash state
      b: new Uint32Array(64), // input block
      c: 0, // pointer within block
      t: 0, // input count
      outlen: outlen // output length in bytes
    };
    ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

    if (keylen > 0) {
      blake2sUpdate(ctx, key);
      ctx.c = 64; // at the end
    }

    return ctx
  }

  // Updates a BLAKE2s streaming hash
  // Requires hash context and Uint8Array (byte array)
  function blake2sUpdate (ctx, input) {
    for (var i = 0; i < input.length; i++) {
      if (ctx.c === 64) { // buffer full ?
        ctx.t += ctx.c; // add counters
        blake2sCompress(ctx, false); // compress (not last)
        ctx.c = 0; // counter to zero
      }
      ctx.b[ctx.c++] = input[i];
    }
  }

  // Completes a BLAKE2s streaming hash
  // Returns a Uint8Array containing the message digest
  function blake2sFinal (ctx) {
    ctx.t += ctx.c; // mark last block offset
    while (ctx.c < 64) { // fill up with zeros
      ctx.b[ctx.c++] = 0;
    }
    blake2sCompress(ctx, true); // final block flag = 1

    // little endian convert and store
    var out = new Uint8Array(ctx.outlen);
    for (var i = 0; i < ctx.outlen; i++) {
      out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xFF;
    }
    return out
  }

  // Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array
  //
  // Returns a n-byte Uint8Array
  //
  // Parameters:
  // - input - the input bytes, as a string, Buffer, or Uint8Array
  // - key - optional key Uint8Array, up to 32 bytes
  // - outlen - optional output length in bytes, default 64
  function blake2s (input, key, outlen) {
    // preprocess inputs
    outlen = outlen || 32;
    input = util.normalizeInput(input);

    // do the math
    var ctx = blake2sInit(outlen, key);
    blake2sUpdate(ctx, input);
    return blake2sFinal(ctx)
  }

  // Computes the BLAKE2S hash of a string or byte array
  //
  // Returns an n-byte hash in hex, all lowercase
  //
  // Parameters:
  // - input - the input bytes, as a string, Buffer, or Uint8Array
  // - key - optional key Uint8Array, up to 32 bytes
  // - outlen - optional output length in bytes, default 64
  function blake2sHex (input, key, outlen) {
    var output = blake2s(input, key, outlen);
    return util.toHex(output)
  }

  var blake2s_1 = {
    blake2s: blake2s,
    blake2sHex: blake2sHex,
    blake2sInit: blake2sInit,
    blake2sUpdate: blake2sUpdate,
    blake2sFinal: blake2sFinal
  };

  var blakejs = {
    blake2b: blake2b_1.blake2b,
    blake2bHex: blake2b_1.blake2bHex,
    blake2bInit: blake2b_1.blake2bInit,
    blake2bUpdate: blake2b_1.blake2bUpdate,
    blake2bFinal: blake2b_1.blake2bFinal,
    blake2s: blake2s_1.blake2s,
    blake2sHex: blake2s_1.blake2sHex,
    blake2sInit: blake2s_1.blake2sInit,
    blake2sUpdate: blake2s_1.blake2sUpdate,
    blake2sFinal: blake2s_1.blake2sFinal
  };

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  /**
   * @name blake2AsU8a
   * @summary Creates a blake2b u8a from the input.
   * @description
   * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { blake2AsU8a } from '@polkadot/util-crypto';
   *
   * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa53, 0xf98, 0x1c, 0x4d, 0x0d]
   * ```
   */

  function blake2AsU8a(data, bitLength = 256, key = null, onlyJs = false) {
    const byteLength = Math.ceil(bitLength / 8);
    return isReady() && !onlyJs ? blake2b$1(u8aToU8a(data), u8aToU8a(key), byteLength) : blakejs.blake2b(u8aToU8a(data), key, byteLength);
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  const SS58_PREFIX = stringToU8a('SS58PRE');
  function sshash(key) {
    return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  function checkAddressChecksum(decoded) {
    const ss58Length = decoded[0] & 0b01000000 ? 2 : 1;
    const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 0b00111111) << 2 | decoded[1] >> 6 | (decoded[1] & 0b00111111) << 8; // 32/33 bytes public + 2 bytes checksum + prefix

    const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
    const length = decoded.length - (isPublicKey ? 2 : 1); // calculate the hash and do the checksum byte checks

    const hash = sshash(decoded.subarray(0, length));
    const isValid = (decoded[0] & 0b10000000) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);
    return [isValid, length, ss58Length, ss58Decoded];
  }

  function ownKeys$L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$L(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$L(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  const UNSORTED = [0, 2, 42]; // NOTE: In the case where the network was hard-spooned and multiple genesisHashes
  // are provided, it needs to be in reverse order, i.e. most-recent first, oldest
  // last. This make lookups for the current a simple genesisHash[0]
  // (See Kusama as an example)

  const createReserved = (prefix, displayName, network = null) => ({
    decimals: null,
    displayName,
    isIgnored: true,
    network,
    prefix,
    standardAccount: null,
    symbols: null,
    website: null
  });

  const all$1 = [{
    decimals: [10],
    displayName: 'Polkadot Relay Chain',
    genesisHash: ['0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3'],
    hasLedgerSupport: true,
    icon: 'polkadot',
    network: 'polkadot',
    prefix: 0,
    slip44: 0x00000162,
    standardAccount: '*25519',
    symbols: ['DOT'],
    website: 'https://polkadot.network'
  }, createReserved(1, 'Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.'), {
    decimals: [12],
    displayName: 'Kusama Relay Chain',
    genesisHash: ['0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe', // Kusama CC3,
    '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636', // Kusama CC2
    '0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf' // Kusama CC1
    ],
    hasLedgerSupport: true,
    icon: 'polkadot',
    network: 'kusama',
    prefix: 2,
    slip44: 0x000001b2,
    standardAccount: '*25519',
    symbols: ['KSM'],
    website: 'https://kusama.network'
  }, createReserved(3, 'Bare 32-bit Ed25519 public key.'), {
    decimals: null,
    displayName: 'Katal Chain',
    network: 'katalchain',
    prefix: 4,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: null,
    displayName: 'Plasm Network',
    genesisHash: ['0x3e86364d4b4894021cb2a0390bcf2feb5517d5292f2de2bb9404227e908b0b8b'],
    network: 'plasm',
    prefix: 5,
    standardAccount: '*25519',
    symbols: ['PLM'],
    website: null
  }, {
    decimals: [12],
    displayName: 'Bifrost',
    network: 'bifrost',
    prefix: 6,
    standardAccount: '*25519',
    symbols: ['BNC'],
    website: 'https://bifrost.finance/'
  }, {
    decimals: [18],
    displayName: 'Edgeware',
    genesisHash: ['0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b'],
    network: 'edgeware',
    prefix: 7,
    standardAccount: '*25519',
    symbols: ['EDG'],
    website: 'https://edgewa.re'
  }, {
    decimals: [18],
    displayName: 'Acala Karura Canary',
    network: 'karura',
    prefix: 8,
    standardAccount: '*25519',
    symbols: ['KAR'],
    website: 'https://acala.network/'
  }, {
    decimals: [18],
    displayName: 'Laminar Reynolds Canary',
    network: 'reynolds',
    prefix: 9,
    standardAccount: '*25519',
    symbols: ['REY'],
    website: 'http://laminar.network/'
  }, {
    decimals: [18],
    displayName: 'Acala',
    network: 'acala',
    prefix: 10,
    standardAccount: '*25519',
    symbols: ['ACA'],
    website: 'https://acala.network/'
  }, {
    decimals: [18],
    displayName: 'Laminar',
    network: 'laminar',
    prefix: 11,
    standardAccount: '*25519',
    symbols: ['LAMI'],
    website: 'http://laminar.network/'
  }, {
    decimals: [6],
    displayName: 'Polymesh',
    genesisHash: ['0x12fddc9e2128b3fe571e4e5427addcb87fcaf08493867a68dd6ae44b406b39c7'],
    hasLedgerSupport: true,
    network: 'polymesh',
    prefix: 12,
    slip44: 0x00000253,
    standardAccount: '*25519',
    symbols: ['POLYX'],
    website: 'https://polymath.network/'
  }, {
    decimals: null,
    displayName: 'SubstraTEE',
    network: 'substratee',
    prefix: 13,
    standardAccount: '*25519',
    symbols: null,
    website: 'https://www.substratee.com'
  }, {
    decimals: [0],
    displayName: 'Totem',
    network: 'totem',
    prefix: 14,
    standardAccount: '*25519',
    symbols: ['XTX'],
    website: 'https://totemaccounting.com'
  }, {
    decimals: [12],
    displayName: 'Synesthesia',
    network: 'synesthesia',
    prefix: 15,
    standardAccount: '*25519',
    symbols: ['SYN'],
    website: 'https://synesthesia.network/'
  }, {
    decimals: [12],
    displayName: 'Kulupu',
    genesisHash: ['0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba'],
    network: 'kulupu',
    prefix: 16,
    standardAccount: '*25519',
    symbols: ['KLP'],
    website: 'https://kulupu.network/'
  }, {
    decimals: null,
    displayName: 'Dark Mainnet',
    network: 'dark',
    prefix: 17,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: [9, 9],
    displayName: 'Darwinia Network',
    network: 'darwinia',
    prefix: 18,
    standardAccount: '*25519',
    symbols: ['RING', 'KTON'],
    website: 'https://darwinia.network/'
  }, {
    decimals: [12],
    displayName: 'GeekCash',
    network: 'geek',
    prefix: 19,
    standardAccount: '*25519',
    symbols: ['GEEK'],
    website: 'https://geekcash.org'
  }, {
    decimals: [12],
    displayName: 'Stafi',
    genesisHash: ['0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80'],
    network: 'stafi',
    prefix: 20,
    standardAccount: '*25519',
    symbols: ['FIS'],
    website: 'https://stafi.io'
  }, {
    decimals: [6],
    displayName: 'Dock Testnet',
    isIgnored: true,
    // testnet
    network: 'dock-testnet',
    prefix: 21,
    standardAccount: '*25519',
    symbols: ['DCK'],
    website: 'https://dock.io'
  }, {
    decimals: [6],
    displayName: 'Dock Mainnet',
    genesisHash: ['0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9'],
    hasLedgerSupport: true,
    network: 'dock-mainnet',
    prefix: 22,
    slip44: 0x00000252,
    standardAccount: '*25519',
    symbols: ['DCK'],
    website: 'https://dock.io'
  }, {
    decimals: null,
    displayName: 'ShiftNrg',
    network: 'shift',
    prefix: 23,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: [18],
    displayName: 'ZERO',
    network: 'zero',
    prefix: 24,
    standardAccount: '*25519',
    symbols: ['PLAY'],
    website: 'https://zero.io'
  }, {
    decimals: [18],
    displayName: 'ZERO Alphaville',
    isIgnored: true,
    // testnet
    network: 'zero-alphaville',
    prefix: 25,
    standardAccount: '*25519',
    symbols: ['PLAY'],
    website: 'https://zero.io'
  }, {
    decimals: [10],
    displayName: 'Jupiter',
    isIgnored: true,
    // testnet
    network: 'jupiter',
    prefix: 26,
    standardAccount: '*25519',
    symbols: ['jDOT'],
    website: 'https://jupiter.patract.io'
  }, {
    decimals: [10, 12],
    displayName: 'Patract',
    network: 'patract',
    prefix: 27,
    standardAccount: '*25519',
    symbols: ['pDOT', 'pKSM'],
    website: 'https://patract.network'
  }, {
    decimals: null,
    displayName: 'Subsocial',
    genesisHash: ['0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8'],
    network: 'subsocial',
    prefix: 28,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: [18],
    displayName: 'Dhiway CORD Network',
    network: 'cord',
    prefix: 29,
    standardAccount: '*25519',
    symbols: ['DCU'],
    website: 'https://dhiway.com/'
  }, {
    decimals: [12],
    displayName: 'Phala Network',
    network: 'phala',
    prefix: 30,
    standardAccount: '*25519',
    symbols: ['PHA'],
    website: 'https://phala.network'
  }, {
    decimals: [12],
    displayName: 'Litentry Network',
    network: 'litentry',
    prefix: 31,
    standardAccount: '*25519',
    symbols: ['LIT'],
    website: 'https://litentry.com/'
  }, {
    decimals: [9],
    displayName: 'Robonomics',
    network: 'robonomics',
    prefix: 32,
    standardAccount: '*25519',
    symbols: ['XRT'],
    website: 'https://robonomics.network'
  }, {
    decimals: null,
    displayName: 'DataHighway',
    network: 'datahighway',
    prefix: 33,
    standardAccount: '*25519',
    symbols: null,
    website: null
  }, {
    decimals: [12],
    displayName: 'Ares Protocol',
    network: 'ares',
    prefix: 34,
    standardAccount: '*25519',
    symbols: ['ARES'],
    website: 'https://www.aresprotocol.com/'
  }, {
    decimals: [15],
    displayName: 'Valiu Liquidity Network',
    network: 'vln',
    prefix: 35,
    standardAccount: '*25519',
    symbols: ['USDv'],
    website: 'https://valiu.com/'
  }, {
    decimals: [18],
    displayName: 'Centrifuge Chain',
    network: 'centrifuge',
    prefix: 36,
    standardAccount: '*25519',
    symbols: ['RAD'],
    website: 'https://centrifuge.io/'
  }, {
    decimals: [18],
    displayName: 'Nodle Chain',
    network: 'nodle',
    prefix: 37,
    standardAccount: '*25519',
    symbols: ['NODL'],
    website: 'https://nodle.io/'
  }, {
    decimals: [18],
    displayName: 'KILT Chain',
    network: 'kilt',
    prefix: 38,
    standardAccount: '*25519',
    symbols: ['KILT'],
    website: 'https://kilt.io/'
  }, {
    decimals: [18],
    displayName: 'MathChain mainnet',
    network: 'mathchain',
    prefix: 39,
    standardAccount: '*25519',
    symbols: ['MATH'],
    website: 'https://mathwallet.org'
  }, {
    decimals: [18],
    displayName: 'MathChain testnet',
    isIgnored: true,
    // testnet
    network: 'mathchain-testnet',
    prefix: 40,
    standardAccount: '*25519',
    symbols: ['MATH'],
    website: 'https://mathwallet.org'
  }, {
    decimals: null,
    displayName: 'Polimec Chain',
    network: 'poli',
    prefix: 41,
    standardAccount: '*25519',
    symbols: null,
    website: 'https://polimec.io/'
  }, {
    decimals: null,
    displayName: 'Substrate',
    network: 'substrate',
    prefix: 42,
    standardAccount: '*25519',
    symbols: null,
    website: 'https://substrate.dev/'
  }, createReserved(43, 'Bare 32-bit ECDSA SECP-256k1 public key.'), {
    decimals: [8],
    displayName: 'ChainX',
    network: 'chainx',
    prefix: 44,
    standardAccount: '*25519',
    symbols: ['PCX'],
    website: 'https://chainx.org/'
  }, {
    decimals: [12, 12],
    displayName: 'UniArts Network',
    network: 'uniarts',
    prefix: 45,
    standardAccount: '*25519',
    symbols: ['UART', 'UINK'],
    website: 'https://uniarts.me'
  }, createReserved(46, 'This prefix is reserved.', 'reserved46'), createReserved(47, 'This prefix is reserved.', 'reserved47'), {
    decimals: [12],
    displayName: 'Neatcoin Mainnet',
    network: 'neatcoin',
    prefix: 48,
    standardAccount: '*25519',
    symbols: ['NEAT'],
    website: 'https://neatcoin.org'
  }, {
    decimals: [12],
    displayName: 'HydraDX',
    network: 'hydradx',
    prefix: 63,
    standardAccount: '*25519',
    symbols: ['HDX'],
    website: 'https://hydradx.io'
  }, {
    decimals: [18],
    displayName: 'AvN Mainnet',
    network: 'aventus',
    prefix: 65,
    standardAccount: '*25519',
    symbols: ['AVT'],
    website: 'https://aventus.io'
  }, {
    decimals: [12],
    displayName: 'Crust Network',
    network: 'crust',
    prefix: 66,
    standardAccount: '*25519',
    symbols: ['CRU'],
    website: 'https://crust.network'
  }]; // The list of available/claimed prefixes
  //   - no testnets
  //   - we only include those where we have a standardAccount
  //   - when no icon has been specified, default to substrate
  //   - sort by name, however we keep 0, 2, 42 first in the list

  const available = all$1.filter(n => !n.isIgnored && !!n.network).map(n => _objectSpread$L(_objectSpread$L({}, n), {}, {
    genesisHash: n.genesisHash || [],
    icon: n.icon || 'substrate'
  })).sort((a, b) => UNSORTED.includes(a.prefix) && UNSORTED.includes(b.prefix) ? 0 : UNSORTED.includes(a.prefix) ? -1 : UNSORTED.includes(b.prefix) ? 1 : a.displayName.localeCompare(b.displayName)); // A filtered list of those chains we have details about (genesisHashes)

  var networks = available.filter(n => n.genesisHash.length || n.prefix === 42);

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  const defaults$1 = {
    allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
    // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
    allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
    allowedPrefix: available.map(({
      prefix
    }) => prefix),
    prefix: 42
  };

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
    if (isU8a(encoded) || isHex(encoded)) {
      return u8aToU8a(encoded);
    }

    try {
      const decoded = base58Decode(encoded);
      assert$a(defaults$1.allowedEncodedLengths.includes(decoded.length), 'Invalid decoded address length');
      const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
      assert$a(ignoreChecksum || isValid, 'Invalid decoded address checksum');
      assert$a([-1, ss58Decoded].includes(ss58Format), `Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
      return decoded.slice(ss58Length, endPos);
    } catch (error) {
      throw new Error(`Decoding ${encoded}: ${error.message}`);
    }
  }

  var name = "elliptic";
  var version = "6.5.4";
  var description = "EC cryptography";
  var main = "lib/elliptic.js";
  var files = [
  	"lib"
  ];
  var scripts = {
  	lint: "eslint lib test",
  	"lint:fix": "npm run lint -- --fix",
  	unit: "istanbul test _mocha --reporter=spec test/index.js",
  	test: "npm run lint && npm run unit",
  	version: "grunt dist && git add dist/"
  };
  var repository = {
  	type: "git",
  	url: "git@github.com:indutny/elliptic"
  };
  var keywords = [
  	"EC",
  	"Elliptic",
  	"curve",
  	"Cryptography"
  ];
  var author = "Fedor Indutny <fedor@indutny.com>";
  var license = "MIT";
  var bugs = {
  	url: "https://github.com/indutny/elliptic/issues"
  };
  var homepage = "https://github.com/indutny/elliptic";
  var devDependencies = {
  	brfs: "^2.0.2",
  	coveralls: "^3.1.0",
  	eslint: "^7.6.0",
  	grunt: "^1.2.1",
  	"grunt-browserify": "^5.3.0",
  	"grunt-cli": "^1.3.2",
  	"grunt-contrib-connect": "^3.0.0",
  	"grunt-contrib-copy": "^1.0.0",
  	"grunt-contrib-uglify": "^5.0.0",
  	"grunt-mocha-istanbul": "^5.0.2",
  	"grunt-saucelabs": "^9.0.1",
  	istanbul: "^0.4.5",
  	mocha: "^8.0.1"
  };
  var dependencies = {
  	"bn.js": "^4.11.9",
  	brorand: "^1.1.0",
  	"hash.js": "^1.0.0",
  	"hmac-drbg": "^1.0.1",
  	inherits: "^2.0.4",
  	"minimalistic-assert": "^1.0.1",
  	"minimalistic-crypto-utils": "^1.0.1"
  };
  var require$$0 = {
  	name: name,
  	version: version,
  	description: description,
  	main: main,
  	files: files,
  	scripts: scripts,
  	repository: repository,
  	keywords: keywords,
  	author: author,
  	license: license,
  	bugs: bugs,
  	homepage: homepage,
  	devDependencies: devDependencies,
  	dependencies: dependencies
  };

  var minimalisticAssert = assert$9;

  function assert$9(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  assert$9.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };

  var utils_1$1 = createCommonjsModule(function (module, exports) {

  var utils = exports;

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
      return res;
    }
    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;

  utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
      return toHex(arr);
    else
      return arr;
  };
  });

  var utils_1 = createCommonjsModule(function (module, exports) {

  var utils = exports;




  utils.assert = minimalisticAssert;
  utils.toArray = utils_1$1.toArray;
  utils.zero2 = utils_1$1.zero2;
  utils.toHex = utils_1$1.toHex;
  utils.encode = utils_1$1.encode;

  // Represent num in a w-NAF form
  function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);

    var ws = 1 << (w + 1);
    var k = num.clone();

    for (var i = 0; i < naf.length; i++) {
      var z;
      var mod = k.andln(ws - 1);
      if (k.isOdd()) {
        if (mod > (ws >> 1) - 1)
          z = (ws >> 1) - mod;
        else
          z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }

      naf[i] = z;
      k.iushrn(1);
    }

    return naf;
  }
  utils.getNAF = getNAF;

  // Represent k1, k2 in a Joint Sparse Form
  function getJSF(k1, k2) {
    var jsf = [
      [],
      [],
    ];

    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
      // First phase
      var m14 = (k1.andln(3) + d1) & 3;
      var m24 = (k2.andln(3) + d2) & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = (k1.andln(7) + d1) & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);

      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        m8 = (k2.andln(7) + d2) & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u2 = -m24;
        else
          u2 = m24;
      }
      jsf[1].push(u2);

      // Second phase
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u2 + 1)
        d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }

    return jsf;
  }
  utils.getJSF = getJSF;

  function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] :
        this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;

  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
      bytes;
  }
  utils.parseBytes = parseBytes;

  function intFromLE(bytes) {
    return new bn(bytes, 'hex', 'le');
  }
  utils.intFromLE = intFromLE;
  });

  var r$1;

  var brorand = function rand(len) {
    if (!r$1)
      r$1 = new Rand(null);

    return r$1.generate(len);
  };

  function Rand(rand) {
    this.rand = rand;
  }
  var Rand_1 = Rand;

  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };

  // Emulate crypto API using randy
  Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n);

    var res = new Uint8Array(n);
    for (var i = 0; i < res.length; i++)
      res[i] = this.rand.getByte();
    return res;
  };

  if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) {
      // Modern browsers
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      // IE
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };

    // Safari's WebWorkers do not have `crypto`
    } else if (typeof window === 'object') {
      // Old junk
      Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    // Node.js or Web worker with no crypto support
    try {
      var crypto = crypto$1__default['default'];
      if (typeof crypto.randomBytes !== 'function')
        throw new Error('Not supported');

      Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
      };
    } catch (e) {
    }
  }
  brorand.Rand = Rand_1;

  var getNAF = utils_1.getNAF;
  var getJSF = utils_1.getJSF;
  var assert$8 = utils_1.assert;

  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new bn(conf.p, 16);

    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

    // Useful for many curves
    this.zero = new bn(0).toRed(this.red);
    this.one = new bn(1).toRed(this.red);
    this.two = new bn(2).toRed(this.red);

    // Curve configuration, optional
    this.n = conf.n && new bn(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);

    this._bitLength = this.n ? this.n.bitLength() : 0;

    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base = BaseCurve;

  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$8(p.precomputed);
    var doubles = p._getDoubles();

    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;

    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
      nafW = 0;
      for (var l = j + doubles.step - 1; l >= j; l--)
        nafW = (nafW << 1) + naf[l];
      repr.push(nafW);
    }

    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (j = 0; j < repr.length; j++) {
        nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };

  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;

    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;

    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);

    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      // Count zeroes
      for (var l = 0; i >= 0 && naf[i] === 0; i--)
        l++;
      if (i >= 0)
        l++;
      acc = acc.dblp(l);

      if (i < 0)
        break;
      var z = naf[i];
      assert$8(z !== 0);
      if (p.type === 'affine') {
        // J +- P
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        // J +- J
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };

  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
    points,
    coeffs,
    len,
    jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;

    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for (i = 0; i < len; i++) {
      p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }

    // Comb small window NAFs
    for (i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }

      var comb = [
        points[a], /* 1 */
        null, /* 3 */
        null, /* 5 */
        points[b], /* 7 */
      ];

      // Try to avoid Projective points, if possible
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }

      var index = [
        -3, /* -1 -1 */
        -1, /* -1 0 */
        -5, /* -1 1 */
        -7, /* 0 -1 */
        0, /* 0 0 */
        7, /* 0 1 */
        5, /* 1 -1 */
        1, /* 1 0 */
        3,  /* 1 1 */
      ];

      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;

        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }

    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i = max; i >= 0; i--) {
      var k = 0;

      while (i >= 0) {
        var zero = true;
        for (j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;

      for (j = 0; j < len; j++) {
        var z = tmp[j];
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();

        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    // Zeroify references
    for (i = 0; i < len; i++)
      wnd[i] = null;

    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };

  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;

  BasePoint.prototype.eq = function eq(/*other*/) {
    throw new Error('Not implemented');
  };

  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };

  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils_1.toArray(bytes, enc);

    var len = this.p.byteLength();

    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
      if (bytes[0] === 0x06)
        assert$8(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 0x07)
        assert$8(bytes[bytes.length - 1] % 2 === 1);

      var res =  this.point(bytes.slice(1, 1 + len),
        bytes.slice(1 + len, 1 + 2 * len));

      return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
  };

  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };

  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);

    if (compact)
      return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

    return [ 0x04 ].concat(x, this.getY().toArray('be', len));
  };

  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils_1.encode(this._encode(compact), enc);
  };

  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;

    var precomputed = {
      doubles: null,
      naf: null,
      beta: null,
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;

    return this;
  };

  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;

    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;

    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };

  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;

    var doubles = [ this ];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles,
    };
  };

  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;

    var res = [ this ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res,
    };
  };

  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };

  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };

  var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  });

  var inherits = createCommonjsModule(function (module) {
  try {
    var util = require$$0$1__default['default'];
    /* istanbul ignore next */
    if (typeof util.inherits !== 'function') throw '';
    module.exports = util.inherits;
  } catch (e) {
    /* istanbul ignore next */
    module.exports = inherits_browser;
  }
  });

  var assert$7 = utils_1.assert;

  function ShortCurve(conf) {
    base.call(this, 'short', conf);

    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();

    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits(ShortCurve, base);
  var short = ShortCurve;

  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;

    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new bn(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      // Choose the smallest beta
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new bn(conf.lambda, 16);
    } else {
      // Choose the lambda that is matching selected beta
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$7(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }

    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new bn(vec.a, 16),
          b: new bn(vec.b, 16),
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }

    return {
      beta: beta,
      lambda: lambda,
      basis: basis,
    };
  };

  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : bn.mont(num);
    var tinv = new bn(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();

    var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [ l1, l2 ];
  };

  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new bn(1);
    var y1 = new bn(0);
    var x2 = new bn(0);
    var y2 = new bn(1);

    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;

    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));

      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r;

      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x;

    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }

    // Normalize signs
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }

    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 },
    ];
  };

  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];

    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);

    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);

    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
  };

  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;

    var x = point.x;
    var y = point.y;

    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };

  ShortCurve.prototype._endoWnafMulAdd =
      function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
          var split = this._endoSplit(coeffs[i]);
          var p = points[i];
          var beta = p._getBeta();

          if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }

          npoints[i * 2] = p;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

        // Clean-up references to points and coefficients
        for (var j = 0; j < i * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };

  function Point$2(curve, x, y, isRed) {
    base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      // Force redgomery representation when loading from JSON
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits(Point$2, base.BasePoint);

  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point$2(this, x, y, isRed);
  };

  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point$2.fromJSON(this, obj, red);
  };

  Point$2.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;

    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;

    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul),
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul),
        },
      };
    }
    return beta;
  };

  Point$2.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [ this.x, this.y ];

    return [ this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1),
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1),
      },
    } ];
  };

  Point$2.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;

    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }

    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [ res ].concat(pre.doubles.points.map(obj2point)),
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [ res ].concat(pre.naf.points.map(obj2point)),
      },
    };
    return res;
  };

  Point$2.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };

  Point$2.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };

  Point$2.prototype.add = function add(p) {
    // O + P = P
    if (this.inf)
      return p;

    // P + O = P
    if (p.inf)
      return this;

    // P + P = 2P
    if (this.eq(p))
      return this.dbl();

    // P + (-P) = O
    if (this.neg().eq(p))
      return this.curve.point(null, null);

    // P + Q = O
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);

    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point$2.prototype.dbl = function dbl() {
    if (this.inf)
      return this;

    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);

    var a = this.curve.a;

    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point$2.prototype.getX = function getX() {
    return this.x.fromRed();
  };

  Point$2.prototype.getY = function getY() {
    return this.y.fromRed();
  };

  Point$2.prototype.mul = function mul(k) {
    k = new bn(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([ this ], [ k ]);
    else
      return this.curve._wnafMul(this, k);
  };

  Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };

  Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };

  Point$2.prototype.eq = function eq(p) {
    return this === p ||
           this.inf === p.inf &&
               (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };

  Point$2.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;

    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate),
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate),
        },
      };
    }
    return res;
  };

  Point$2.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);

    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };

  function JPoint(curve, x, y, z) {
    base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new bn(0);
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = new bn(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);

    this.zOne = this.z === this.curve.one;
  }
  inherits(JPoint, base.BasePoint);

  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };

  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);

    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);

    return this.curve.point(ax, ay);
  };

  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };

  JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity())
      return p;

    // P + O = P
    if (p.isInfinity())
      return this;

    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity())
      return p.toJ();

    // P + O = P
    if (p.isInfinity())
      return this;

    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();

    var i;
    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (i = 0; i < pow; i++)
        r = r.dbl();
      return r;
    }

    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;

    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    // Reuse results
    var jyd = jy.redAdd(jy);
    for (i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);

      jx = nx;
      jz = nz;
      jyd = dny;
    }

    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };

  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };

  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 14A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // T = M ^ 2 - 2*S
      var t = m.redSqr().redISub(s).redISub(s);

      // 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);

      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2*Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-dbl-2009-l
      // 2M + 5S + 13A

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = B^2
      var c = b.redSqr();
      // D = 2 * ((X1 + B)^2 - A - C)
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      // E = 3 * A
      var e = a.redAdd(a).redIAdd(a);
      // F = E^2
      var f = e.redSqr();

      // 8 * C
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);

      // X3 = F - 2 * D
      nx = f.redISub(d).redISub(d);
      // Y3 = E * (D - X3) - 8 * C
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      // Z3 = 2 * Y1 * Z1
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 15A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      // T = M^2 - 2 * S
      var t = m.redSqr().redISub(s).redISub(s);
      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2 * Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
      // 3M + 5S

      // delta = Z1^2
      var delta = this.z.redSqr();
      // gamma = Y1^2
      var gamma = this.y.redSqr();
      // beta = X1 * gamma
      var beta = this.x.redMul(gamma);
      // alpha = 3 * (X1 - delta) * (X1 + delta)
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      // X3 = alpha^2 - 8 * beta
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      // Z3 = (Y1 + Z1)^2 - gamma - delta
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;

    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();

    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);

    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);

    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mul = function mul(k, kbase) {
    k = new bn(k, kbase);

    return this.curve._wnafMul(this, k);
  };

  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
      return this.eq(p.toJ());

    if (this === p)
      return true;

    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;

    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };

  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;

      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };

  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
  };

  JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  function MontCurve(conf) {
    base.call(this, 'mont', conf);

    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.i4 = new bn(4).toRed(this.red).redInvm();
    this.two = new bn(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits(MontCurve, base);
  var mont = MontCurve;

  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();

    return y.redSqr().cmp(rhs) === 0;
  };

  function Point$1(curve, x, z) {
    base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new bn(x, 16);
      this.z = new bn(z, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits(Point$1, base.BasePoint);

  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils_1.toArray(bytes, enc), 1);
  };

  MontCurve.prototype.point = function point(x, z) {
    return new Point$1(this, x, z);
  };

  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point$1.fromJSON(this, obj);
  };

  Point$1.prototype.precompute = function precompute() {
    // No-op
  };

  Point$1.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
  };

  Point$1.fromJSON = function fromJSON(curve, obj) {
    return new Point$1(curve, obj[0], obj[1] || curve.one);
  };

  Point$1.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point$1.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  Point$1.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A

    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };

  Point$1.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A

    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };

  Point$1.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q

    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
      bits.push(t.andln(1));

    for (var i = bits.length - 1; i >= 0; i--) {
      if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
      } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
      }
    }
    return b;
  };

  Point$1.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };

  Point$1.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };

  Point$1.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();

    return this.x.fromRed();
  };

  var assert$6 = utils_1.assert;

  function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;

    base.call(this, 'edwards', conf);

    this.a = new bn(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new bn(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new bn(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);

    assert$6(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits(EdwardsCurve, base);
  var edwards = EdwardsCurve;

  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };

  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };

  // Just for compatibility with Short curve
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };

  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new bn(y, 16);
    if (!y.red)
      y = y.toRed(this.red);

    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());

    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error('invalid point');
      else
        return this.point(this.zero, y);
    }

    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    if (x.fromRed().isOdd() !== odd)
      x = x.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;

    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();

    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

    return lhs.cmp(rhs) === 0;
  };

  function Point(curve, x, y, z, t) {
    base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = z ? new bn(z, 16) : this.curve.one;
      this.t = t && new bn(t, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;

      // Use extended coordinates
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits(Point, base.BasePoint);

  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };

  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
  };

  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 &&
      (this.y.cmp(this.z) === 0 ||
      (this.zOne && this.y.cmp(this.curve.c) === 0));
  };

  Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S

    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();

    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
      // E = a * C
      e = this.curve._mulA(c);
      // F = E + D
      var f = e.redAdd(d);
      if (this.zOne) {
        // X3 = (B - C - D) * (F - 2)
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F^2 - 2 * F
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        // H = Z1^2
        h = this.z.redSqr();
        // J = F - 2 * H
        j = f.redSub(h).redISub(h);
        // X3 = (B-C-D)*J
        nx = b.redSub(c).redISub(d).redMul(j);
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F * J
        nz = f.redMul(j);
      }
    } else {
      // E = C + D
      e = c.redAdd(d);
      // H = (c * Z1)^2
      h = this.curve._mulC(this.z).redSqr();
      // J = E - 2 * H
      j = e.redSub(h).redSub(h);
      // X3 = c * (B - E) * J
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      // Y3 = c * E * (C - D)
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      // Z3 = E * J
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    // Double in extended coordinates
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };

  Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M

    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S

    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      // Y3 = A * G * (D - a * C)
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      // Z3 = F * G
      nz = f.redMul(g);
    } else {
      // Y3 = A * G * (D - C)
      ny = a.redMul(g).redMul(d.redSub(c));
      // Z3 = c * F * G
      nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;

    if (this.curve.extended)
      return this._extAdd(p);
    else
      return this._projAdd(p);
  };

  Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };

  Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
  };

  Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
  };

  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;

    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };

  Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(),
      this.y,
      this.z,
      this.t && this.t.redNeg());
  };

  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };

  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };

  Point.prototype.eq = function eq(other) {
    return this === other ||
           this.getX().cmp(other.getX()) === 0 &&
           this.getY().cmp(other.getY()) === 0;
  };

  Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;

      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };

  // Compatibility with BaseCurve
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;

  var curve_1 = createCommonjsModule(function (module, exports) {

  var curve = exports;

  curve.base = base;
  curve.short = short;
  curve.mont = mont;
  curve.edwards = edwards;
  });

  var inherits_1 = inherits;

  function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
      return false;
    }
    if (i < 0 || i + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
  }

  function toArray$1(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        // Inspired by stringToUtf8ByteArray() in closure-library by Google
        // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
        // Apache License 2.0
        // https://github.com/google/closure-library/blob/master/LICENSE
        var p = 0;
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = (c >> 6) | 192;
            res[p++] = (c & 63) | 128;
          } else if (isSurrogatePair(msg, i)) {
            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
            res[p++] = (c >> 18) | 240;
            res[p++] = ((c >> 12) & 63) | 128;
            res[p++] = ((c >> 6) & 63) | 128;
            res[p++] = (c & 63) | 128;
          } else {
            res[p++] = (c >> 12) | 224;
            res[p++] = ((c >> 6) & 63) | 128;
            res[p++] = (c & 63) | 128;
          }
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  var toArray_1 = toArray$1;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  var toHex_1 = toHex;

  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  var htonl_1 = htonl;

  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  var toHex32_1 = toHex32;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  var zero2_1 = zero2;

  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  var zero8_1 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    minimalisticAssert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  var join32_1 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  var split32_1 = split32;

  function rotr32$1(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  var rotr32_1 = rotr32$1;

  function rotl32$2(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  var rotl32_1 = rotl32$2;

  function sum32$3(a, b) {
    return (a + b) >>> 0;
  }
  var sum32_1 = sum32$3;

  function sum32_3$1(a, b, c) {
    return (a + b + c) >>> 0;
  }
  var sum32_3_1 = sum32_3$1;

  function sum32_4$2(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  var sum32_4_1 = sum32_4$2;

  function sum32_5$2(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  var sum32_5_1 = sum32_5$2;

  function sum64$1(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];

    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  var sum64_1 = sum64$1;

  function sum64_hi$1(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  var sum64_hi_1 = sum64_hi$1;

  function sum64_lo$1(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  var sum64_lo_1 = sum64_lo$1;

  function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;

    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  var sum64_4_hi_1 = sum64_4_hi$1;

  function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  var sum64_4_lo_1 = sum64_4_lo$1;

  function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;

    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  var sum64_5_hi_1 = sum64_5_hi$1;

  function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;

    return lo >>> 0;
  }
  var sum64_5_lo_1 = sum64_5_lo$1;

  function rotr64_hi$1(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  }
  var rotr64_hi_1 = rotr64_hi$1;

  function rotr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  var rotr64_lo_1 = rotr64_lo$1;

  function shr64_hi$1(ah, al, num) {
    return ah >>> num;
  }
  var shr64_hi_1 = shr64_hi$1;

  function shr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  var shr64_lo_1 = shr64_lo$1;

  var utils$1 = {
  	inherits: inherits_1,
  	toArray: toArray_1,
  	toHex: toHex_1,
  	htonl: htonl_1,
  	toHex32: toHex32_1,
  	zero2: zero2_1,
  	zero8: zero8_1,
  	join32: join32_1,
  	split32: split32_1,
  	rotr32: rotr32_1,
  	rotl32: rotl32_1,
  	sum32: sum32_1,
  	sum32_3: sum32_3_1,
  	sum32_4: sum32_4_1,
  	sum32_5: sum32_5_1,
  	sum64: sum64_1,
  	sum64_hi: sum64_hi_1,
  	sum64_lo: sum64_lo_1,
  	sum64_4_hi: sum64_4_hi_1,
  	sum64_4_lo: sum64_4_lo_1,
  	sum64_5_hi: sum64_5_hi_1,
  	sum64_5_lo: sum64_5_lo_1,
  	rotr64_hi: rotr64_hi_1,
  	rotr64_lo: rotr64_lo_1,
  	shr64_hi: shr64_hi_1,
  	shr64_lo: shr64_lo_1
  };

  function BlockHash$4() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';

    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  var BlockHash_1 = BlockHash$4;

  BlockHash$4.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils$1.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
      msg = this.pending;

      // Process pending data in blocks
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;

      msg = utils$1.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }

    return this;
  };

  BlockHash$4.prototype.digest = function digest(enc) {
    this.update(this._pad());
    minimalisticAssert(this.pending === null);

    return this._digest(enc);
  };

  BlockHash$4.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;

    // Append length
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }

    return res;
  };

  var common$1 = {
  	BlockHash: BlockHash_1
  };

  var rotr32 = utils$1.rotr32;

  function ft_1$1(s, x, y, z) {
    if (s === 0)
      return ch32$1(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32$1(x, y, z);
  }
  var ft_1_1 = ft_1$1;

  function ch32$1(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }
  var ch32_1 = ch32$1;

  function maj32$1(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }
  var maj32_1 = maj32$1;

  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  var p32_1 = p32;

  function s0_256$1(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  var s0_256_1 = s0_256$1;

  function s1_256$1(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  var s1_256_1 = s1_256$1;

  function g0_256$1(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  }
  var g0_256_1 = g0_256$1;

  function g1_256$1(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  }
  var g1_256_1 = g1_256$1;

  var common = {
  	ft_1: ft_1_1,
  	ch32: ch32_1,
  	maj32: maj32_1,
  	p32: p32_1,
  	s0_256: s0_256_1,
  	s1_256: s1_256_1,
  	g0_256: g0_256_1,
  	g1_256: g1_256_1
  };

  var rotl32$1 = utils$1.rotl32;
  var sum32$2 = utils$1.sum32;
  var sum32_5$1 = utils$1.sum32_5;
  var ft_1 = common.ft_1;
  var BlockHash$3 = common$1.BlockHash;

  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];

  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();

    BlockHash$3.call(this);
    this.h = [
      0x67452301, 0xefcdab89, 0x98badcfe,
      0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }

  utils$1.inherits(SHA1, BlockHash$3);
  var _1 = SHA1;

  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;

  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];

    for(; i < W.length; i++)
      W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t;
    }

    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
  };

  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$1.toHex32(this.h, 'big');
    else
      return utils$1.split32(this.h, 'big');
  };

  var sum32$1 = utils$1.sum32;
  var sum32_4$1 = utils$1.sum32_4;
  var sum32_5 = utils$1.sum32_5;
  var ch32 = common.ch32;
  var maj32 = common.maj32;
  var s0_256 = common.s0_256;
  var s1_256 = common.s1_256;
  var g0_256 = common.g0_256;
  var g1_256 = common.g1_256;

  var BlockHash$2 = common$1.BlockHash;

  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];

  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();

    BlockHash$2.call(this);
    this.h = [
      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils$1.inherits(SHA256, BlockHash$2);
  var _256 = SHA256;

  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;

  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];

    minimalisticAssert(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32$1(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32$1(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$1(T1, T2);
    }

    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
    this.h[5] = sum32$1(this.h[5], f);
    this.h[6] = sum32$1(this.h[6], g);
    this.h[7] = sum32$1(this.h[7], h);
  };

  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$1.toHex32(this.h, 'big');
    else
      return utils$1.split32(this.h, 'big');
  };

  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();

    _256.call(this);
    this.h = [
      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils$1.inherits(SHA224, _256);
  var _224 = SHA224;

  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;

  SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex')
      return utils$1.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils$1.split32(this.h.slice(0, 7), 'big');
  };

  var rotr64_hi = utils$1.rotr64_hi;
  var rotr64_lo = utils$1.rotr64_lo;
  var shr64_hi = utils$1.shr64_hi;
  var shr64_lo = utils$1.shr64_lo;
  var sum64 = utils$1.sum64;
  var sum64_hi = utils$1.sum64_hi;
  var sum64_lo = utils$1.sum64_lo;
  var sum64_4_hi = utils$1.sum64_4_hi;
  var sum64_4_lo = utils$1.sum64_4_lo;
  var sum64_5_hi = utils$1.sum64_5_hi;
  var sum64_5_lo = utils$1.sum64_5_lo;

  var BlockHash$1 = common$1.BlockHash;

  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();

    BlockHash$1.call(this);
    this.h = [
      0x6a09e667, 0xf3bcc908,
      0xbb67ae85, 0x84caa73b,
      0x3c6ef372, 0xfe94f82b,
      0xa54ff53a, 0x5f1d36f1,
      0x510e527f, 0xade682d1,
      0x9b05688c, 0x2b3e6c1f,
      0x1f83d9ab, 0xfb41bd6b,
      0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils$1.inherits(SHA512, BlockHash$1);
  var _512 = SHA512;

  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;

  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    // 32 x 32bit words
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];  // i - 7
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];  // i - 16
      var c3_lo = W[i - 31];

      W[i] = sum64_4_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
    }
  };

  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;

    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];

    minimalisticAssert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];

      var T1_hi = sum64_5_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);

      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

      hh = gh;
      hl = gl;

      gh = fh;
      gl = fl;

      fh = eh;
      fl = el;

      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);

      dh = ch;
      dl = cl;

      ch = bh;
      cl = bl;

      bh = ah;
      bl = al;

      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };

  SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$1.toHex32(this.h, 'big');
    else
      return utils$1.split32(this.h, 'big');
  };

  function ch64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);  // 34
    var c2_hi = rotr64_hi(xl, xh, 7);  // 39

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);  // 34
    var c2_lo = rotr64_lo(xl, xh, 7);  // 39

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);  // 41

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);  // 41

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);  // 61
    var c2_hi = shr64_hi(xh, xl, 6);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);  // 61
    var c2_lo = shr64_lo(xh, xl, 6);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();

    _512.call(this);
    this.h = [
      0xcbbb9d5d, 0xc1059ed8,
      0x629a292a, 0x367cd507,
      0x9159015a, 0x3070dd17,
      0x152fecd8, 0xf70e5939,
      0x67332667, 0xffc00b31,
      0x8eb44a87, 0x68581511,
      0xdb0c2e0d, 0x64f98fa7,
      0x47b5481d, 0xbefa4fa4 ];
  }
  utils$1.inherits(SHA384, _512);
  var _384 = SHA384;

  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;

  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$1.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils$1.split32(this.h.slice(0, 12), 'big');
  };

  var sha1 = _1;
  var sha224 = _224;
  var sha256 = _256;
  var sha384 = _384;
  var sha512 = _512;

  var sha = {
  	sha1: sha1,
  	sha224: sha224,
  	sha256: sha256,
  	sha384: sha384,
  	sha512: sha512
  };

  var rotl32 = utils$1.rotl32;
  var sum32 = utils$1.sum32;
  var sum32_3 = utils$1.sum32_3;
  var sum32_4 = utils$1.sum32_4;
  var BlockHash = common$1.BlockHash;

  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();

    BlockHash.call(this);

    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils$1.inherits(RIPEMD160, BlockHash);
  var ripemd160 = RIPEMD160;

  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;

  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };

  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$1.toHex32(this.h, 'little');
    else
      return utils$1.split32(this.h, 'little');
  };

  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }

  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }

  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }

  var r = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];

  var ripemd = {
  	ripemd160: ripemd160
  };

  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils$1.toArray(key, enc));
  }
  var hmac = Hmac;

  Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    minimalisticAssert(key.length <= this.blockSize);

    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);

    for (i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);

    // 0x36 ^ 0x5c = 0x6a
    for (i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };

  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };

  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };

  var hash_1 = createCommonjsModule(function (module, exports) {
  var hash = exports;

  hash.utils = utils$1;
  hash.common = common$1;
  hash.sha = sha;
  hash.ripemd = ripemd;
  hash.hmac = hmac;

  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  });

  var secp256k1$1 = {
    doubles: {
      step: 4,
      points: [
        [
          'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
          'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
        ],
        [
          '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
          '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
        ],
        [
          '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
          'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
        ],
        [
          '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
          '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
        ],
        [
          '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
          '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
        ],
        [
          '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
          '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
        ],
        [
          'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
          '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
        ],
        [
          '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
          'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
        ],
        [
          'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
          '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
        ],
        [
          'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
          'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
        ],
        [
          'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
          '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
        ],
        [
          '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
          '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
        ],
        [
          '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
          '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
        ],
        [
          '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
          '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
        ],
        [
          '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
          '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
        ],
        [
          '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
          '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
        ],
        [
          '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
          '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
        ],
        [
          '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
          '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
        ],
        [
          '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
          'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
        ],
        [
          'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
          '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
        ],
        [
          'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
          '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
        ],
        [
          '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
          '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
        ],
        [
          '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
          '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
        ],
        [
          'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
          '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
        ],
        [
          '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
          'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
        ],
        [
          'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
          '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
        ],
        [
          'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
          'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
        ],
        [
          'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
          '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
        ],
        [
          'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
          'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
        ],
        [
          'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
          '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
        ],
        [
          '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
          'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
        ],
        [
          '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
          '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
        ],
        [
          'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
          '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
        ],
        [
          '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
          'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
        ],
        [
          'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
          '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
        ],
        [
          'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
          '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
        ],
        [
          'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
          'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
        ],
        [
          '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
          '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
        ],
        [
          '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
          '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
        ],
        [
          '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
          'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
        ],
        [
          '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
          '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
        ],
        [
          'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
          '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
        ],
        [
          '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
          '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
        ],
        [
          '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
          'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
        ],
        [
          '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
          '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
        ],
        [
          'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
          '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
        ],
        [
          '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
          'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
        ],
        [
          'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
          'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
        ],
        [
          'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
          '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
        ],
        [
          '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
          'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
        ],
        [
          '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
          'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
        ],
        [
          'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
          '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
        ],
        [
          'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
          '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
        ],
        [
          'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
          '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
        ],
        [
          '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
          'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
        ],
        [
          '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
          '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
        ],
        [
          'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
          'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
        ],
        [
          '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
          'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
        ],
        [
          '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
          '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
        ],
        [
          '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
          '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
        ],
        [
          'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
          'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
        ],
        [
          '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
          '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
        ],
        [
          '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
          '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
        ],
        [
          'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
          '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
        ],
        [
          'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
          'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
        ],
      ],
    },
    naf: {
      wnd: 7,
      points: [
        [
          'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
          '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
        ],
        [
          '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
          'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
        ],
        [
          '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
          '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
        ],
        [
          'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
          'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
        ],
        [
          '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
          'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
        ],
        [
          'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
          'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
        ],
        [
          'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
          '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
        ],
        [
          'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
          '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
        ],
        [
          '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
          '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
        ],
        [
          '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
          '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
        ],
        [
          '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
          '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
        ],
        [
          '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
          '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
        ],
        [
          'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
          'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
        ],
        [
          'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
          '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
        ],
        [
          '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
          'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
        ],
        [
          '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
          'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
        ],
        [
          '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
          '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
        ],
        [
          '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
          '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
        ],
        [
          '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
          '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
        ],
        [
          '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
          'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
        ],
        [
          'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
          'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
        ],
        [
          '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
          '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
        ],
        [
          '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
          '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
        ],
        [
          'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
          'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
        ],
        [
          '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
          '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
        ],
        [
          'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
          'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
        ],
        [
          'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
          'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
        ],
        [
          '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
          '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
        ],
        [
          '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
          '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
        ],
        [
          '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
          '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
        ],
        [
          'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
          '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
        ],
        [
          '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
          '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
        ],
        [
          'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
          '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
        ],
        [
          '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
          'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
        ],
        [
          '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
          'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
        ],
        [
          'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
          'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
        ],
        [
          '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
          '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
        ],
        [
          '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
          'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
        ],
        [
          'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
          'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
        ],
        [
          '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
          '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
        ],
        [
          '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
          'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
        ],
        [
          '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
          '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
        ],
        [
          '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
          'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
        ],
        [
          'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
          '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
        ],
        [
          '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
          '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
        ],
        [
          '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
          'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
        ],
        [
          '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
          'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
        ],
        [
          'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
          'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
        ],
        [
          'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
          'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
        ],
        [
          '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
          '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
        ],
        [
          '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
          '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
        ],
        [
          'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
          '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
        ],
        [
          'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
          'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
        ],
        [
          '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
          '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
        ],
        [
          '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
          '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
        ],
        [
          'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
          '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
        ],
        [
          '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
          '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
        ],
        [
          'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
          'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
        ],
        [
          '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
          'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
        ],
        [
          '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
          '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
        ],
        [
          'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
          '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
        ],
        [
          'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
          '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
        ],
        [
          '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
          '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
        ],
        [
          '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
          '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
        ],
        [
          '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
          'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
        ],
        [
          '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
          'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
        ],
        [
          '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
          '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
        ],
        [
          '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
          '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
        ],
        [
          '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
          '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
        ],
        [
          '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
          'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
        ],
        [
          'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
          'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
        ],
        [
          '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
          'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
        ],
        [
          'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
          '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
        ],
        [
          'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
          '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
        ],
        [
          'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
          '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
        ],
        [
          'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
          '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
        ],
        [
          '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
          'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
        ],
        [
          '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
          '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
        ],
        [
          '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
          'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
        ],
        [
          'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
          'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
        ],
        [
          'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
          '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
        ],
        [
          'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
          'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
        ],
        [
          'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
          '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
        ],
        [
          '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
          '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
        ],
        [
          'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
          '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
        ],
        [
          'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
          '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
        ],
        [
          '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
          '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
        ],
        [
          '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
          'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
        ],
        [
          'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
          '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
        ],
        [
          'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
          '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
        ],
        [
          'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
          '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
        ],
        [
          '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
          '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
        ],
        [
          'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
          'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
        ],
        [
          '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
          'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
        ],
        [
          'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
          'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
        ],
        [
          'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
          '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
        ],
        [
          '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
          'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
        ],
        [
          'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
          '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
        ],
        [
          'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
          '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
        ],
        [
          'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
          '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
        ],
        [
          '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
          'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
        ],
        [
          '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
          'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
        ],
        [
          'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
          '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
        ],
        [
          '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
          'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
        ],
        [
          '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
          '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
        ],
        [
          '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
          'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
        ],
        [
          'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
          'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
        ],
        [
          '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
          'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
        ],
        [
          '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
          '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
        ],
        [
          '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
          'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
        ],
        [
          '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
          '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
        ],
        [
          'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
          'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
        ],
        [
          '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
          '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
        ],
        [
          'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
          '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
        ],
        [
          '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
          '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
        ],
        [
          'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
          'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
        ],
        [
          'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
          '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
        ],
        [
          'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
          'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
        ],
        [
          '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
          'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
        ],
        [
          '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
          '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
        ],
        [
          '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
          'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
        ],
        [
          '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
          '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
        ],
        [
          '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
          '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
        ],
        [
          '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
          'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
        ],
        [
          '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
          '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
        ],
        [
          '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
          '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
        ],
        [
          '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
          '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
        ],
      ],
    },
  };

  var curves_1 = createCommonjsModule(function (module, exports) {

  var curves = exports;





  var assert = utils_1.assert;

  function PresetCurve(options) {
    if (options.type === 'short')
      this.curve = new curve_1.short(options);
    else if (options.type === 'edwards')
      this.curve = new curve_1.edwards(options);
    else
      this.curve = new curve_1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;

    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;

  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve,
        });
        return curve;
      },
    });
  }

  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash_1.sha256,
    gRed: false,
    g: [
      '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
      '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
    ],
  });

  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash_1.sha256,
    gRed: false,
    g: [
      'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
      'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
    ],
  });

  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash_1.sha256,
    gRed: false,
    g: [
      '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
      '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
    ],
  });

  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
       '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
       'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash_1.sha384,
    gRed: false,
    g: [
      'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
      '5502f25d bf55296c 3a545e38 72760ab7',
      '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
      '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
    ],
  });

  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
       '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
       '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
       'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash_1.sha512,
    gRed: false,
    g: [
      '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
      '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
      'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
      '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
      '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
      '3fad0761 353c7086 a272c240 88be9476 9fd16650',
    ],
  });

  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash_1.sha256,
    gRed: false,
    g: [
      '9',
    ],
  });

  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash_1.sha256,
    gRed: false,
    g: [
      '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

      // 4/5
      '6666666666666666666666666666666666666666666666666666666666666658',
    ],
  });

  var pre;
  try {
    pre = secp256k1$1;
  } catch (e) {
    pre = undefined;
  }

  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash_1.sha256,

    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
      {
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3',
      },
      {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15',
      },
    ],

    gRed: false,
    g: [
      '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
      '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
      pre,
    ],
  });
  });

  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;

    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;

    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;

    var entropy = utils_1$1.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils_1$1.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils_1$1.toArray(options.pers, options.persEnc || 'hex');
    minimalisticAssert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG;

  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);

    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }

    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000;  // 2^48
  };

  HmacDRBG.prototype._hmac = function hmac() {
    return new hash_1.hmac(this.hash, this.K);
  };

  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac()
                   .update(this.V)
                   .update([ 0x00 ]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;

    this.K = this._hmac()
                 .update(this.V)
                 .update([ 0x01 ])
                 .update(seed)
                 .digest();
    this.V = this._hmac().update(this.V).digest();
  };

  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }

    entropy = utils_1$1.toArray(entropy, entropyEnc);
    add = utils_1$1.toArray(add, addEnc);

    minimalisticAssert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };

  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error('Reseed is required');

    // Optional encoding
    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }

    // Optional additional data
    if (add) {
      add = utils_1$1.toArray(add, addEnc || 'hex');
      this._update(add);
    }

    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }

    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils_1$1.encode(res, enc);
  };

  var assert$5 = utils_1.assert;

  function KeyPair$1(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;

    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key$1 = KeyPair$1;

  KeyPair$1.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair$1)
      return pub;

    return new KeyPair$1(ec, {
      pub: pub,
      pubEnc: enc,
    });
  };

  KeyPair$1.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair$1)
      return priv;

    return new KeyPair$1(ec, {
      priv: priv,
      privEnc: enc,
    });
  };

  KeyPair$1.prototype.validate = function validate() {
    var pub = this.getPublic();

    if (pub.isInfinity())
      return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
      return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: 'Public key * N != O' };

    return { result: true, reason: null };
  };

  KeyPair$1.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }

    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);

    if (!enc)
      return this.pub;

    return this.pub.encode(enc, compact);
  };

  KeyPair$1.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };

  KeyPair$1.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new bn(key, enc || 16);

    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
  };

  KeyPair$1.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      // Montgomery points only have an `x` coordinate.
      // Weierstrass/Edwards points on the other hand have both `x` and
      // `y` coordinates.
      if (this.ec.curve.type === 'mont') {
        assert$5(key.x, 'Need x coordinate');
      } else if (this.ec.curve.type === 'short' ||
                 this.ec.curve.type === 'edwards') {
        assert$5(key.x && key.y, 'Need both x and y coordinate');
      }
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };

  // ECDH
  KeyPair$1.prototype.derive = function derive(pub) {
    if(!pub.validate()) {
      assert$5(pub.validate(), 'public point not validated');
    }
    return pub.mul(this.priv).getX();
  };

  // ECDSA
  KeyPair$1.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };

  KeyPair$1.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };

  KeyPair$1.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
           ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };

  var assert$4 = utils_1.assert;

  function Signature$1(options, enc) {
    if (options instanceof Signature$1)
      return options;

    if (this._importDER(options, enc))
      return;

    assert$4(options.r && options.s, 'Signature without r or s');
    this.r = new bn(options.r, 16);
    this.s = new bn(options.s, 16);
    if (options.recoveryParam === undefined)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature$1 = Signature$1;

  function Position() {
    this.place = 0;
  }

  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) {
      return initial;
    }
    var octetLen = initial & 0xf;

    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }

    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }

    // Leading zeroes
    if (val <= 0x7f) {
      return false;
    }

    p.place = off;
    return val;
  }

  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }

  Signature$1.prototype._importDER = function _importDER(data, enc) {
    data = utils_1.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) {
      return false;
    }
    var len = getLength(data, p);
    if (len === false) {
      return false;
    }
    if ((len + p.place) !== data.length) {
      return false;
    }
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var rlen = getLength(data, p);
    if (rlen === false) {
      return false;
    }
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var slen = getLength(data, p);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p.place) {
      return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
      if (r[1] & 0x80) {
        r = r.slice(1);
      } else {
        // Leading zeroes
        return false;
      }
    }
    if (s[0] === 0) {
      if (s[1] & 0x80) {
        s = s.slice(1);
      } else {
        // Leading zeroes
        return false;
      }
    }

    this.r = new bn(r);
    this.s = new bn(s);
    this.recoveryParam = null;

    return true;
  };

  function constructLength(arr, len) {
    if (len < 0x80) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while (--octets) {
      arr.push((len >>> (octets << 3)) & 0xff);
    }
    arr.push(len);
  }

  Signature$1.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();

    // Pad values
    if (r[0] & 0x80)
      r = [ 0 ].concat(r);
    // Pad values
    if (s[0] & 0x80)
      s = [ 0 ].concat(s);

    r = rmPadding(r);
    s = rmPadding(s);

    while (!s[0] && !(s[1] & 0x80)) {
      s = s.slice(1);
    }
    var arr = [ 0x02 ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [ 0x30 ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils_1.encode(res, enc);
  };

  var assert$3 = utils_1.assert;




  function EC$1(options) {
    if (!(this instanceof EC$1))
      return new EC$1(options);

    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
      assert$3(Object.prototype.hasOwnProperty.call(curves_1, options),
        'Unknown curve ' + options);

      options = curves_1[options];
    }

    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves_1.PresetCurve)
      options = { curve: options };

    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;

    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);

    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
  }
  var ec = EC$1;

  EC$1.prototype.keyPair = function keyPair(options) {
    return new key$1(this, options);
  };

  EC$1.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key$1.fromPrivate(this, priv, enc);
  };

  EC$1.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key$1.fromPublic(this, pub, enc);
  };

  EC$1.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};

    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
      entropy: options.entropy || brorand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || 'utf8',
      nonce: this.n.toArray(),
    });

    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new bn(2));
    for (;;) {
      var priv = new bn(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;

      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };

  EC$1.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };

  EC$1.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};

    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new bn(msg, 16));

    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);

    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);

    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
    });

    // Number of bytes to generate
    var ns1 = this.n.sub(new bn(1));

    for (var iter = 0; ; iter++) {
      var k = options.k ?
        options.k(iter) :
        new bn(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;

      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;

      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0)
        continue;

      var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
      s = s.umod(this.n);
      if (s.cmpn(0) === 0)
        continue;

      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                          (kpX.cmp(r) !== 0 ? 2 : 0);

      // Use complement of `s`, if it is > `n / 2`
      if (options.canonical && s.cmp(this.nh) > 0) {
        s = this.n.sub(s);
        recoveryParam ^= 1;
      }

      return new signature$1({ r: r, s: s, recoveryParam: recoveryParam });
    }
  };

  EC$1.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new bn(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new signature$1(signature, 'hex');

    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
      return false;

    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;

    if (!this.curve._maxwellTrick) {
      p = this.g.mulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      return p.getX().umod(this.n).cmp(r) === 0;
    }

    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K

    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
  };

  EC$1.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert$3((3 & j) === j, 'The recovery param is more than two bits');
    signature = new signature$1(signature, enc);

    var n = this.n;
    var e = new bn(msg);
    var r = signature.r;
    var s = signature.s;

    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error('Unable to find sencond key candinate');

    // 1.1. Let x = r + jn.
    if (isSecondKey)
      r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
      r = this.curve.pointFromX(r, isYOdd);

    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);

    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
  };

  EC$1.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new signature$1(signature, enc);
    if (signature.recoveryParam !== null)
      return signature.recoveryParam;

    for (var i = 0; i < 4; i++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature, i);
      } catch (e) {
        continue;
      }

      if (Qprime.eq(Q))
        return i;
    }
    throw new Error('Unable to find valid recovery factor');
  };

  var assert$2 = utils_1.assert;
  var parseBytes$2 = utils_1.parseBytes;
  var cachedProperty$1 = utils_1.cachedProperty;

  /**
  * @param {EDDSA} eddsa - instance
  * @param {Object} params - public/private key parameters
  *
  * @param {Array<Byte>} [params.secret] - secret seed bytes
  * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
  * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
  *
  */
  function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes$2(params.secret);
    if (eddsa.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes$2(params.pub);
  }

  KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(eddsa, { pub: pub });
  };

  KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair)
      return secret;
    return new KeyPair(eddsa, { secret: secret });
  };

  KeyPair.prototype.secret = function secret() {
    return this._secret;
  };

  cachedProperty$1(KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });

  cachedProperty$1(KeyPair, 'pub', function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });

  cachedProperty$1(KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;

    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;

    return a;
  });

  cachedProperty$1(KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });

  cachedProperty$1(KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });

  cachedProperty$1(KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });

  KeyPair.prototype.sign = function sign(message) {
    assert$2(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
  };

  KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };

  KeyPair.prototype.getSecret = function getSecret(enc) {
    assert$2(this._secret, 'KeyPair is public only');
    return utils_1.encode(this.secret(), enc);
  };

  KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils_1.encode(this.pubBytes(), enc);
  };

  var key = KeyPair;

  var assert$1 = utils_1.assert;
  var cachedProperty = utils_1.cachedProperty;
  var parseBytes$1 = utils_1.parseBytes;

  /**
  * @param {EDDSA} eddsa - eddsa instance
  * @param {Array<Bytes>|Object} sig -
  * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
  * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
  * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
  * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
  */
  function Signature(eddsa, sig) {
    this.eddsa = eddsa;

    if (typeof sig !== 'object')
      sig = parseBytes$1(sig);

    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength),
      };
    }

    assert$1(sig.R && sig.S, 'Signature without R or S');

    if (eddsa.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof bn)
      this._S = sig.S;

    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }

  cachedProperty(Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
  });

  cachedProperty(Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
  });

  cachedProperty(Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });

  cachedProperty(Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });

  Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };

  Signature.prototype.toHex = function toHex() {
    return utils_1.encode(this.toBytes(), 'hex').toUpperCase();
  };

  var signature = Signature;

  var assert = utils_1.assert;
  var parseBytes = utils_1.parseBytes;



  function EDDSA(curve) {
    assert(curve === 'ed25519', 'only tested with ed25519 so far');

    if (!(this instanceof EDDSA))
      return new EDDSA(curve);

    curve = curves_1[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);

    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash_1.sha512;
  }

  var eddsa = EDDSA;

  /**
  * @param {Array|String} message - message bytes
  * @param {Array|String|KeyPair} secret - secret bytes or a keypair
  * @returns {Signature} - signature
  */
  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
      .mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
  };

  /**
  * @param {Array} message - message bytes
  * @param {Array|String|Signature} sig - sig bytes
  * @param {Array|String|Point|KeyPair} pub - public key
  * @returns {Boolean} - true if public key matches sig of message
  */
  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
  };

  EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for (var i = 0; i < arguments.length; i++)
      hash.update(arguments[i]);
    return utils_1.intFromLE(hash.digest()).umod(this.curve.n);
  };

  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return key.fromPublic(this, pub);
  };

  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return key.fromSecret(this, secret);
  };

  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof signature)
      return sig;
    return new signature(this, sig);
  };

  /**
  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
  *
  * EDDSA defines methods for encoding and decoding points and integers. These are
  * helper convenience methods, that pass along to utility functions implied
  * parameters.
  *
  */
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
  };

  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils_1.parseBytes(bytes);

    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

    var y = utils_1.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };

  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
  };

  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils_1.intFromLE(bytes);
  };

  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };

  var elliptic_1 = createCommonjsModule(function (module, exports) {

  var elliptic = exports;

  elliptic.version = require$$0.version;
  elliptic.utils = utils_1;
  elliptic.rand = brorand;
  elliptic.curve = curve_1;
  elliptic.curves = curves_1;

  // Protocols
  elliptic.ec = ec;
  elliptic.eddsa = eddsa;
  });

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  const EC = elliptic_1.ec;
  const secp256k1 = new EC('secp256k1');
  const EXPAND_OPT = {
    bitLength: 256,
    isLe: false
  };

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  /**
   * @name base58Encode
   * @summary Creates a base58 value.
   * @description
   * From the provided input, create the base58 and return the result as a string.
   */

  function base58Encode(value, ipfsCompat) {
    const out = bs58.encode(u8aToU8a(value));
    return ipfsCompat ? `z${out}` : out;
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  function encodeAddress(_key, ss58Format = defaults$1.prefix) {
    // decode it, this means we can re-encode an address
    const key = decodeAddress(_key);
    assert$a(ss58Format >= 0 && ss58Format <= 16383 && ![46, 47].includes(ss58Format), 'Out of range ss58Format specified');
    assert$a(defaults$1.allowedDecodedLengths.includes(key.length), `Expected a valid key to convert, with length ${defaults$1.allowedDecodedLengths.join(', ')}`);
    const isPublicKey = [32, 33].includes(key.length);
    const input = u8aConcat(new Uint8Array(ss58Format < 64 ? [ss58Format] : [(ss58Format & 0b0000000011111100) >> 2 | 0b01000000, ss58Format >> 8 | (ss58Format & 0b0000000000000011) << 6]), key);
    return base58Encode(u8aConcat(input, sshash(input).subarray(0, isPublicKey ? 2 : 1)));
  }

  /**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   */

  var sha3 = createCommonjsModule(function (module) {
  /*jslint bitwise: true */
  (function () {

    var INPUT_ERROR = 'input is invalid type';
    var FINALIZE_ERROR = 'finalize already called';
    var WINDOW = typeof window === 'object';
    var root = WINDOW ? window : {};
    if (root.JS_SHA3_NO_WINDOW) {
      WINDOW = false;
    }
    var WEB_WORKER = !WINDOW && typeof self === 'object';
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    if (NODE_JS) {
      root = commonjsGlobal;
    } else if (WEB_WORKER) {
      root = self;
    }
    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    var HEX_CHARS = '0123456789abcdef'.split('');
    var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var PADDING = [6, 1536, 393216, 100663296];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
      0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
      2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
      2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
      2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    var BITS = [224, 256, 384, 512];
    var SHAKE_BITS = [128, 256];
    var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
    var CSHAKE_BYTEPAD = {
      '128': 168,
      '256': 136
    };

    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
      Array.isArray = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };
    }

    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
      ArrayBuffer.isView = function (obj) {
        return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      };
    }

    var createOutputMethod = function (bits, padding, outputType) {
      return function (message) {
        return new Keccak(bits, padding, bits).update(message)[outputType]();
      };
    };

    var createShakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits) {
        return new Keccak(bits, padding, outputBits).update(message)[outputType]();
      };
    };

    var createCshakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits, n, s) {
        return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
      };
    };

    var createKmacOutputMethod = function (bits, padding, outputType) {
      return function (key, message, outputBits, s) {
        return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
      };
    };

    var createOutputMethods = function (method, createMethod, bits, padding) {
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createMethod(bits, padding, type);
      }
      return method;
    };

    var createMethod = function (bits, padding) {
      var method = createOutputMethod(bits, padding, 'hex');
      method.create = function () {
        return new Keccak(bits, padding, bits);
      };
      method.update = function (message) {
        return method.create().update(message);
      };
      return createOutputMethods(method, createOutputMethod, bits, padding);
    };

    var createShakeMethod = function (bits, padding) {
      var method = createShakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits) {
        return new Keccak(bits, padding, outputBits);
      };
      method.update = function (message, outputBits) {
        return method.create(outputBits).update(message);
      };
      return createOutputMethods(method, createShakeOutputMethod, bits, padding);
    };

    var createCshakeMethod = function (bits, padding) {
      var w = CSHAKE_BYTEPAD[bits];
      var method = createCshakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits, n, s) {
        if (!n && !s) {
          return methods['shake' + bits].create(outputBits);
        } else {
          return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
        }
      };
      method.update = function (message, outputBits, n, s) {
        return method.create(outputBits, n, s).update(message);
      };
      return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
    };

    var createKmacMethod = function (bits, padding) {
      var w = CSHAKE_BYTEPAD[bits];
      var method = createKmacOutputMethod(bits, padding, 'hex');
      method.create = function (key, outputBits, s) {
        return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
      };
      method.update = function (key, message, outputBits, s) {
        return method.create(key, outputBits, s).update(message);
      };
      return createOutputMethods(method, createKmacOutputMethod, bits, padding);
    };

    var algorithms = [
      { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
      { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
      { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
      { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
      { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
    ];

    var methods = {}, methodNames = [];

    for (var i = 0; i < algorithms.length; ++i) {
      var algorithm = algorithms[i];
      var bits = algorithm.bits;
      for (var j = 0; j < bits.length; ++j) {
        var methodName = algorithm.name + '_' + bits[j];
        methodNames.push(methodName);
        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
        if (algorithm.name !== 'sha3') {
          var newMethodName = algorithm.name + bits[j];
          methodNames.push(newMethodName);
          methods[newMethodName] = methods[methodName];
        }
      }
    }

    function Keccak(bits, padding, outputBits) {
      this.blocks = [];
      this.s = [];
      this.padding = padding;
      this.outputBits = outputBits;
      this.reset = true;
      this.finalized = false;
      this.block = 0;
      this.start = 0;
      this.blockCount = (1600 - (bits << 1)) >> 5;
      this.byteCount = this.blockCount << 2;
      this.outputBlocks = outputBits >> 5;
      this.extraBytes = (outputBits & 31) >> 3;

      for (var i = 0; i < 50; ++i) {
        this.s[i] = 0;
      }
    }

    Keccak.prototype.update = function (message) {
      if (this.finalized) {
        throw new Error(FINALIZE_ERROR);
      }
      var notString, type = typeof message;
      if (type !== 'string') {
        if (type === 'object') {
          if (message === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          } else if (!Array.isArray(message)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
        blockCount = this.blockCount, index = 0, s = this.s, i, code;

      while (index < length) {
        if (this.reset) {
          this.reset = false;
          blocks[0] = this.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (notString) {
          for (i = this.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = this.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }
        this.lastByteIndex = i;
        if (i >= byteCount) {
          this.start = i - byteCount;
          this.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);
          this.reset = true;
        } else {
          this.start = i;
        }
      }
      return this;
    };

    Keccak.prototype.encode = function (x, right) {
      var o = x & 255, n = 1;
      var bytes = [o];
      x = x >> 8;
      o = x & 255;
      while (o > 0) {
        bytes.unshift(o);
        x = x >> 8;
        o = x & 255;
        ++n;
      }
      if (right) {
        bytes.push(n);
      } else {
        bytes.unshift(n);
      }
      this.update(bytes);
      return bytes.length;
    };

    Keccak.prototype.encodeString = function (str) {
      var notString, type = typeof str;
      if (type !== 'string') {
        if (type === 'object') {
          if (str === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
            str = new Uint8Array(str);
          } else if (!Array.isArray(str)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var bytes = 0, length = str.length;
      if (notString) {
        bytes = length;
      } else {
        for (var i = 0; i < str.length; ++i) {
          var code = str.charCodeAt(i);
          if (code < 0x80) {
            bytes += 1;
          } else if (code < 0x800) {
            bytes += 2;
          } else if (code < 0xd800 || code >= 0xe000) {
            bytes += 3;
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
            bytes += 4;
          }
        }
      }
      bytes += this.encode(bytes * 8);
      this.update(str);
      return bytes;
    };

    Keccak.prototype.bytepad = function (strs, w) {
      var bytes = this.encode(w);
      for (var i = 0; i < strs.length; ++i) {
        bytes += this.encodeString(strs[i]);
      }
      var paddingBytes = w - bytes % w;
      var zeros = [];
      zeros.length = paddingBytes;
      this.update(zeros);
      return this;
    };

    Keccak.prototype.finalize = function () {
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
      blocks[i >> 2] |= this.padding[i & 3];
      if (this.lastByteIndex === this.byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f(s);
    };

    Keccak.prototype.toString = Keccak.prototype.hex = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var hex = '', block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
            HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
            HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
            HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
        }
        if (j % blockCount === 0) {
          f(s);
          i = 0;
        }
      }
      if (extraBytes) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
        if (extraBytes > 1) {
          hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
        }
        if (extraBytes > 2) {
          hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
        }
      }
      return hex;
    };

    Keccak.prototype.arrayBuffer = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var bytes = this.outputBits >> 3;
      var buffer;
      if (extraBytes) {
        buffer = new ArrayBuffer((outputBlocks + 1) << 2);
      } else {
        buffer = new ArrayBuffer(bytes);
      }
      var array = new Uint32Array(buffer);
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          array[j] = s[i];
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        array[i] = s[i];
        buffer = buffer.slice(0, bytes);
      }
      return buffer;
    };

    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

    Keccak.prototype.digest = Keccak.prototype.array = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var array = [], offset, block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          array[offset + 1] = (block >> 8) & 0xFF;
          array[offset + 2] = (block >> 16) & 0xFF;
          array[offset + 3] = (block >> 24) & 0xFF;
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        if (extraBytes > 1) {
          array[offset + 1] = (block >> 8) & 0xFF;
        }
        if (extraBytes > 2) {
          array[offset + 2] = (block >> 16) & 0xFF;
        }
      }
      return array;
    };

    function Kmac(bits, padding, outputBits) {
      Keccak.call(this, bits, padding, outputBits);
    }

    Kmac.prototype = new Keccak();

    Kmac.prototype.finalize = function () {
      this.encode(this.outputBits, true);
      return Keccak.prototype.finalize.call(this);
    };

    var f = function (s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        h = c8 ^ ((c2 << 1) | (c3 >>> 31));
        l = c9 ^ ((c3 << 1) | (c2 >>> 31));
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ ((c4 << 1) | (c5 >>> 31));
        l = c1 ^ ((c5 << 1) | (c4 >>> 31));
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ ((c6 << 1) | (c7 >>> 31));
        l = c3 ^ ((c7 << 1) | (c6 >>> 31));
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ ((c8 << 1) | (c9 >>> 31));
        l = c5 ^ ((c9 << 1) | (c8 >>> 31));
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ ((c0 << 1) | (c1 >>> 31));
        l = c7 ^ ((c1 << 1) | (c0 >>> 31));
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;

        b0 = s[0];
        b1 = s[1];
        b32 = (s[11] << 4) | (s[10] >>> 28);
        b33 = (s[10] << 4) | (s[11] >>> 28);
        b14 = (s[20] << 3) | (s[21] >>> 29);
        b15 = (s[21] << 3) | (s[20] >>> 29);
        b46 = (s[31] << 9) | (s[30] >>> 23);
        b47 = (s[30] << 9) | (s[31] >>> 23);
        b28 = (s[40] << 18) | (s[41] >>> 14);
        b29 = (s[41] << 18) | (s[40] >>> 14);
        b20 = (s[2] << 1) | (s[3] >>> 31);
        b21 = (s[3] << 1) | (s[2] >>> 31);
        b2 = (s[13] << 12) | (s[12] >>> 20);
        b3 = (s[12] << 12) | (s[13] >>> 20);
        b34 = (s[22] << 10) | (s[23] >>> 22);
        b35 = (s[23] << 10) | (s[22] >>> 22);
        b16 = (s[33] << 13) | (s[32] >>> 19);
        b17 = (s[32] << 13) | (s[33] >>> 19);
        b48 = (s[42] << 2) | (s[43] >>> 30);
        b49 = (s[43] << 2) | (s[42] >>> 30);
        b40 = (s[5] << 30) | (s[4] >>> 2);
        b41 = (s[4] << 30) | (s[5] >>> 2);
        b22 = (s[14] << 6) | (s[15] >>> 26);
        b23 = (s[15] << 6) | (s[14] >>> 26);
        b4 = (s[25] << 11) | (s[24] >>> 21);
        b5 = (s[24] << 11) | (s[25] >>> 21);
        b36 = (s[34] << 15) | (s[35] >>> 17);
        b37 = (s[35] << 15) | (s[34] >>> 17);
        b18 = (s[45] << 29) | (s[44] >>> 3);
        b19 = (s[44] << 29) | (s[45] >>> 3);
        b10 = (s[6] << 28) | (s[7] >>> 4);
        b11 = (s[7] << 28) | (s[6] >>> 4);
        b42 = (s[17] << 23) | (s[16] >>> 9);
        b43 = (s[16] << 23) | (s[17] >>> 9);
        b24 = (s[26] << 25) | (s[27] >>> 7);
        b25 = (s[27] << 25) | (s[26] >>> 7);
        b6 = (s[36] << 21) | (s[37] >>> 11);
        b7 = (s[37] << 21) | (s[36] >>> 11);
        b38 = (s[47] << 24) | (s[46] >>> 8);
        b39 = (s[46] << 24) | (s[47] >>> 8);
        b30 = (s[8] << 27) | (s[9] >>> 5);
        b31 = (s[9] << 27) | (s[8] >>> 5);
        b12 = (s[18] << 20) | (s[19] >>> 12);
        b13 = (s[19] << 20) | (s[18] >>> 12);
        b44 = (s[29] << 7) | (s[28] >>> 25);
        b45 = (s[28] << 7) | (s[29] >>> 25);
        b26 = (s[38] << 8) | (s[39] >>> 24);
        b27 = (s[39] << 8) | (s[38] >>> 24);
        b8 = (s[48] << 14) | (s[49] >>> 18);
        b9 = (s[49] << 14) | (s[48] >>> 18);

        s[0] = b0 ^ (~b2 & b4);
        s[1] = b1 ^ (~b3 & b5);
        s[10] = b10 ^ (~b12 & b14);
        s[11] = b11 ^ (~b13 & b15);
        s[20] = b20 ^ (~b22 & b24);
        s[21] = b21 ^ (~b23 & b25);
        s[30] = b30 ^ (~b32 & b34);
        s[31] = b31 ^ (~b33 & b35);
        s[40] = b40 ^ (~b42 & b44);
        s[41] = b41 ^ (~b43 & b45);
        s[2] = b2 ^ (~b4 & b6);
        s[3] = b3 ^ (~b5 & b7);
        s[12] = b12 ^ (~b14 & b16);
        s[13] = b13 ^ (~b15 & b17);
        s[22] = b22 ^ (~b24 & b26);
        s[23] = b23 ^ (~b25 & b27);
        s[32] = b32 ^ (~b34 & b36);
        s[33] = b33 ^ (~b35 & b37);
        s[42] = b42 ^ (~b44 & b46);
        s[43] = b43 ^ (~b45 & b47);
        s[4] = b4 ^ (~b6 & b8);
        s[5] = b5 ^ (~b7 & b9);
        s[14] = b14 ^ (~b16 & b18);
        s[15] = b15 ^ (~b17 & b19);
        s[24] = b24 ^ (~b26 & b28);
        s[25] = b25 ^ (~b27 & b29);
        s[34] = b34 ^ (~b36 & b38);
        s[35] = b35 ^ (~b37 & b39);
        s[44] = b44 ^ (~b46 & b48);
        s[45] = b45 ^ (~b47 & b49);
        s[6] = b6 ^ (~b8 & b0);
        s[7] = b7 ^ (~b9 & b1);
        s[16] = b16 ^ (~b18 & b10);
        s[17] = b17 ^ (~b19 & b11);
        s[26] = b26 ^ (~b28 & b20);
        s[27] = b27 ^ (~b29 & b21);
        s[36] = b36 ^ (~b38 & b30);
        s[37] = b37 ^ (~b39 & b31);
        s[46] = b46 ^ (~b48 & b40);
        s[47] = b47 ^ (~b49 & b41);
        s[8] = b8 ^ (~b0 & b2);
        s[9] = b9 ^ (~b1 & b3);
        s[18] = b18 ^ (~b10 & b12);
        s[19] = b19 ^ (~b11 & b13);
        s[28] = b28 ^ (~b20 & b22);
        s[29] = b29 ^ (~b21 & b23);
        s[38] = b38 ^ (~b30 & b32);
        s[39] = b39 ^ (~b31 & b33);
        s[48] = b48 ^ (~b40 & b42);
        s[49] = b49 ^ (~b41 & b43);

        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };

    if (COMMON_JS) {
      module.exports = methods;
    } else {
      for (i = 0; i < methodNames.length; ++i) {
        root[methodNames[i]] = methods[methodNames[i]];
      }
    }
  })();
  });

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  /**
   * @name keccakAsU8a
   * @summary Creates a keccak Uint8Array from the input.
   * @description
   * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { keccakAsU8a } from '@polkadot/util-crypto';
   *
   * keccakAsU8a('123'); // => Uint8Array
   * ```
   */

  function keccakAsU8a(value, bitLength = 256, onlyJs = false) {
    const is256 = bitLength === 256;
    return isReady() && is256 && !onlyJs ? keccak256(u8aToU8a(value)) : new Uint8Array((is256 ? sha3.keccak256 : sha3.keccak512).update(u8aToU8a(value)).arrayBuffer());
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  function secp256k1Expand(publicKey) {
    assert$a([33, 65].includes(publicKey.length), 'Invalid publicKey provided');
    const expanded = secp256k1.keyFromPublic(publicKey).getPublic();
    return u8aConcat(bnToU8a(expanded.getX(), EXPAND_OPT), bnToU8a(expanded.getY(), EXPAND_OPT));
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors

  function getH160(u8a) {
    if ([33, 65].includes(u8a.length)) {
      u8a = keccakAsU8a(secp256k1Expand(u8a));
    }

    return u8a.slice(-20);
  }

  function ethereumEncode(addressOrPublic) {
    if (!addressOrPublic) {
      return '0x';
    }

    const u8aAddress = u8aToU8a(addressOrPublic);
    assert$a([20, 32, 33, 65].includes(u8aAddress.length), 'Invalid address or publicKey passed');
    const address = u8aToHex(getH160(u8aAddress), -1, false);
    const hash = u8aToHex(keccakAsU8a(address), -1, false);
    let result = '';

    for (let index = 0; index < 40; index++) {
      result = `${result}${parseInt(hash[index], 16) > 7 ? address[index].toUpperCase() : address[index]}`;
    }

    return `0x${result}`;
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors

  function isInvalidChar(char, byte) {
    return byte > 7 && char !== char.toUpperCase() || byte <= 7 && char !== char.toLowerCase();
  }

  function isEthereumChecksum(_address) {
    const address = _address.replace('0x', '');

    const hash = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);

    for (let index = 0; index < 40; index++) {
      if (isInvalidChar(address[index], parseInt(hash[index], 16))) {
        return false;
      }
    }

    return true;
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  function isEthereumAddress(address) {
    if (!address || address.length !== 42 || !isHex(address)) {
      return false;
    }

    if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
      return true;
    }

    return isEthereumChecksum(address);
  }

  /**
  	C-like unsigned 32 bits integers in Javascript
  	Copyright (C) 2013, Pierre Curto
  	MIT license
   */

  var uint32 = createCommonjsModule(function (module) {
  (function (root) {

  	// Local cache for typical radices
  	({
  		36: UINT32( Math.pow(36, 5) )
  	,	16: UINT32( Math.pow(16, 7) )
  	,	10: UINT32( Math.pow(10, 9) )
  	,	2:  UINT32( Math.pow(2, 30) )
  	});
  	({
  		36: UINT32(36)
  	,	16: UINT32(16)
  	,	10: UINT32(10)
  	,	2:  UINT32(2)
  	});

  	/**
  	 *	Represents an unsigned 32 bits integer
  	 * @constructor
  	 * @param {Number|String|Number} low bits     | integer as a string 		 | integer as a number
  	 * @param {Number|Number|Undefined} high bits | radix (optional, default=10)
  	 * @return 
  	 */
  	function UINT32 (l, h) {
  		if ( !(this instanceof UINT32) )
  			return new UINT32(l, h)

  		this._low = 0;
  		this._high = 0;
  		this.remainder = null;
  		if (typeof h == 'undefined')
  			return fromNumber.call(this, l)

  		if (typeof l == 'string')
  			return fromString.call(this, l, h)

  		fromBits.call(this, l, h);
  	}

  	/**
  	 * Set the current _UINT32_ object with its low and high bits
  	 * @method fromBits
  	 * @param {Number} low bits
  	 * @param {Number} high bits
  	 * @return ThisExpression
  	 */
  	function fromBits (l, h) {
  		this._low = l | 0;
  		this._high = h | 0;

  		return this
  	}
  	UINT32.prototype.fromBits = fromBits;

  	/**
  	 * Set the current _UINT32_ object from a number
  	 * @method fromNumber
  	 * @param {Number} number
  	 * @return ThisExpression
  	 */
  	function fromNumber (value) {
  		this._low = value & 0xFFFF;
  		this._high = value >>> 16;

  		return this
  	}
  	UINT32.prototype.fromNumber = fromNumber;

  	/**
  	 * Set the current _UINT32_ object from a string
  	 * @method fromString
  	 * @param {String} integer as a string
  	 * @param {Number} radix (optional, default=10)
  	 * @return ThisExpression
  	 */
  	function fromString (s, radix) {
  		var value = parseInt(s, radix || 10);

  		this._low = value & 0xFFFF;
  		this._high = value >>> 16;

  		return this
  	}
  	UINT32.prototype.fromString = fromString;

  	/**
  	 * Convert this _UINT32_ to a number
  	 * @method toNumber
  	 * @return {Number} the converted UINT32
  	 */
  	UINT32.prototype.toNumber = function () {
  		return (this._high * 65536) + this._low
  	};

  	/**
  	 * Convert this _UINT32_ to a string
  	 * @method toString
  	 * @param {Number} radix (optional, default=10)
  	 * @return {String} the converted UINT32
  	 */
  	UINT32.prototype.toString = function (radix) {
  		return this.toNumber().toString(radix || 10)
  	};

  	/**
  	 * Add two _UINT32_. The current _UINT32_ stores the result
  	 * @method add
  	 * @param {Object} other UINT32
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.add = function (other) {
  		var a00 = this._low + other._low;
  		var a16 = a00 >>> 16;

  		a16 += this._high + other._high;

  		this._low = a00 & 0xFFFF;
  		this._high = a16 & 0xFFFF;

  		return this
  	};

  	/**
  	 * Subtract two _UINT32_. The current _UINT32_ stores the result
  	 * @method subtract
  	 * @param {Object} other UINT32
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.subtract = function (other) {
  		//TODO inline
  		return this.add( other.clone().negate() )
  	};

  	/**
  	 * Multiply two _UINT32_. The current _UINT32_ stores the result
  	 * @method multiply
  	 * @param {Object} other UINT32
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.multiply = function (other) {
  		/*
  			a = a00 + a16
  			b = b00 + b16
  			a*b = (a00 + a16)(b00 + b16)
  				= a00b00 + a00b16 + a16b00 + a16b16

  			a16b16 overflows the 32bits
  		 */
  		var a16 = this._high;
  		var a00 = this._low;
  		var b16 = other._high;
  		var b00 = other._low;

  /* Removed to increase speed under normal circumstances (i.e. not multiplying by 0 or 1)
  		// this == 0 or other == 1: nothing to do
  		if ((a00 == 0 && a16 == 0) || (b00 == 1 && b16 == 0)) return this

  		// other == 0 or this == 1: this = other
  		if ((b00 == 0 && b16 == 0) || (a00 == 1 && a16 == 0)) {
  			this._low = other._low
  			this._high = other._high
  			return this
  		}
  */

  		var c16, c00;
  		c00 = a00 * b00;
  		c16 = c00 >>> 16;

  		c16 += a16 * b00;
  		c16 &= 0xFFFF;		// Not required but improves performance
  		c16 += a00 * b16;

  		this._low = c00 & 0xFFFF;
  		this._high = c16 & 0xFFFF;

  		return this
  	};

  	/**
  	 * Divide two _UINT32_. The current _UINT32_ stores the result.
  	 * The remainder is made available as the _remainder_ property on
  	 * the _UINT32_ object. It can be null, meaning there are no remainder.
  	 * @method div
  	 * @param {Object} other UINT32
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.div = function (other) {
  		if ( (other._low == 0) && (other._high == 0) ) throw Error('division by zero')

  		// other == 1
  		if (other._high == 0 && other._low == 1) {
  			this.remainder = new UINT32(0);
  			return this
  		}

  		// other > this: 0
  		if ( other.gt(this) ) {
  			this.remainder = this.clone();
  			this._low = 0;
  			this._high = 0;
  			return this
  		}
  		// other == this: 1
  		if ( this.eq(other) ) {
  			this.remainder = new UINT32(0);
  			this._low = 1;
  			this._high = 0;
  			return this
  		}

  		// Shift the divisor left until it is higher than the dividend
  		var _other = other.clone();
  		var i = -1;
  		while ( !this.lt(_other) ) {
  			// High bit can overflow the default 16bits
  			// Its ok since we right shift after this loop
  			// The overflown bit must be kept though
  			_other.shiftLeft(1, true);
  			i++;
  		}

  		// Set the remainder
  		this.remainder = this.clone();
  		// Initialize the current result to 0
  		this._low = 0;
  		this._high = 0;
  		for (; i >= 0; i--) {
  			_other.shiftRight(1);
  			// If shifted divisor is smaller than the dividend
  			// then subtract it from the dividend
  			if ( !this.remainder.lt(_other) ) {
  				this.remainder.subtract(_other);
  				// Update the current result
  				if (i >= 16) {
  					this._high |= 1 << (i - 16);
  				} else {
  					this._low |= 1 << i;
  				}
  			}
  		}

  		return this
  	};

  	/**
  	 * Negate the current _UINT32_
  	 * @method negate
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.negate = function () {
  		var v = ( ~this._low & 0xFFFF ) + 1;
  		this._low = v & 0xFFFF;
  		this._high = (~this._high + (v >>> 16)) & 0xFFFF;

  		return this
  	};

  	/**
  	 * Equals
  	 * @method eq
  	 * @param {Object} other UINT32
  	 * @return {Boolean}
  	 */
  	UINT32.prototype.equals = UINT32.prototype.eq = function (other) {
  		return (this._low == other._low) && (this._high == other._high)
  	};

  	/**
  	 * Greater than (strict)
  	 * @method gt
  	 * @param {Object} other UINT32
  	 * @return {Boolean}
  	 */
  	UINT32.prototype.greaterThan = UINT32.prototype.gt = function (other) {
  		if (this._high > other._high) return true
  		if (this._high < other._high) return false
  		return this._low > other._low
  	};

  	/**
  	 * Less than (strict)
  	 * @method lt
  	 * @param {Object} other UINT32
  	 * @return {Boolean}
  	 */
  	UINT32.prototype.lessThan = UINT32.prototype.lt = function (other) {
  		if (this._high < other._high) return true
  		if (this._high > other._high) return false
  		return this._low < other._low
  	};

  	/**
  	 * Bitwise OR
  	 * @method or
  	 * @param {Object} other UINT32
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.or = function (other) {
  		this._low |= other._low;
  		this._high |= other._high;

  		return this
  	};

  	/**
  	 * Bitwise AND
  	 * @method and
  	 * @param {Object} other UINT32
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.and = function (other) {
  		this._low &= other._low;
  		this._high &= other._high;

  		return this
  	};

  	/**
  	 * Bitwise NOT
  	 * @method not
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.not = function() {
  		this._low = ~this._low & 0xFFFF;
  		this._high = ~this._high & 0xFFFF;

  		return this
  	};

  	/**
  	 * Bitwise XOR
  	 * @method xor
  	 * @param {Object} other UINT32
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.xor = function (other) {
  		this._low ^= other._low;
  		this._high ^= other._high;

  		return this
  	};

  	/**
  	 * Bitwise shift right
  	 * @method shiftRight
  	 * @param {Number} number of bits to shift
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.shiftRight = UINT32.prototype.shiftr = function (n) {
  		if (n > 16) {
  			this._low = this._high >> (n - 16);
  			this._high = 0;
  		} else if (n == 16) {
  			this._low = this._high;
  			this._high = 0;
  		} else {
  			this._low = (this._low >> n) | ( (this._high << (16-n)) & 0xFFFF );
  			this._high >>= n;
  		}

  		return this
  	};

  	/**
  	 * Bitwise shift left
  	 * @method shiftLeft
  	 * @param {Number} number of bits to shift
  	 * @param {Boolean} allow overflow
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.shiftLeft = UINT32.prototype.shiftl = function (n, allowOverflow) {
  		if (n > 16) {
  			this._high = this._low << (n - 16);
  			this._low = 0;
  			if (!allowOverflow) {
  				this._high &= 0xFFFF;
  			}
  		} else if (n == 16) {
  			this._high = this._low;
  			this._low = 0;
  		} else {
  			this._high = (this._high << n) | (this._low >> (16-n));
  			this._low = (this._low << n) & 0xFFFF;
  			if (!allowOverflow) {
  				// Overflow only allowed on the high bits...
  				this._high &= 0xFFFF;
  			}
  		}

  		return this
  	};

  	/**
  	 * Bitwise rotate left
  	 * @method rotl
  	 * @param {Number} number of bits to rotate
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.rotateLeft = UINT32.prototype.rotl = function (n) {
  		var v = (this._high << 16) | this._low;
  		v = (v << n) | (v >>> (32 - n));
  		this._low = v & 0xFFFF;
  		this._high = v >>> 16;

  		return this
  	};

  	/**
  	 * Bitwise rotate right
  	 * @method rotr
  	 * @param {Number} number of bits to rotate
  	 * @return ThisExpression
  	 */
  	UINT32.prototype.rotateRight = UINT32.prototype.rotr = function (n) {
  		var v = (this._high << 16) | this._low;
  		v = (v >>> n) | (v << (32 - n));
  		this._low = v & 0xFFFF;
  		this._high = v >>> 16;

  		return this
  	};

  	/**
  	 * Clone the current _UINT32_
  	 * @method clone
  	 * @return {Object} cloned UINT32
  	 */
  	UINT32.prototype.clone = function () {
  		return new UINT32(this._low, this._high)
  	};

  	if (module.exports) {
  		// Node.js
  		module.exports = UINT32;
  	} else {
  		// Browser
  		root['UINT32'] = UINT32;
  	}

  })(commonjsGlobal);
  });

  /**
  	C-like unsigned 64 bits integers in Javascript
  	Copyright (C) 2013, Pierre Curto
  	MIT license
   */

  var uint64 = createCommonjsModule(function (module) {
  (function (root) {

  	// Local cache for typical radices
  	var radixPowerCache = {
  		16: UINT64( Math.pow(16, 5) )
  	,	10: UINT64( Math.pow(10, 5) )
  	,	2:  UINT64( Math.pow(2, 5) )
  	};
  	var radixCache = {
  		16: UINT64(16)
  	,	10: UINT64(10)
  	,	2:  UINT64(2)
  	};

  	/**
  	 *	Represents an unsigned 64 bits integer
  	 * @constructor
  	 * @param {Number} first low bits (8)
  	 * @param {Number} second low bits (8)
  	 * @param {Number} first high bits (8)
  	 * @param {Number} second high bits (8)
  	 * or
  	 * @param {Number} low bits (32)
  	 * @param {Number} high bits (32)
  	 * or
  	 * @param {String|Number} integer as a string 		 | integer as a number
  	 * @param {Number|Undefined} radix (optional, default=10)
  	 * @return 
  	 */
  	function UINT64 (a00, a16, a32, a48) {
  		if ( !(this instanceof UINT64) )
  			return new UINT64(a00, a16, a32, a48)

  		this.remainder = null;
  		if (typeof a00 == 'string')
  			return fromString.call(this, a00, a16)

  		if (typeof a16 == 'undefined')
  			return fromNumber.call(this, a00)

  		fromBits.apply(this, arguments);
  	}

  	/**
  	 * Set the current _UINT64_ object with its low and high bits
  	 * @method fromBits
  	 * @param {Number} first low bits (8)
  	 * @param {Number} second low bits (8)
  	 * @param {Number} first high bits (8)
  	 * @param {Number} second high bits (8)
  	 * or
  	 * @param {Number} low bits (32)
  	 * @param {Number} high bits (32)
  	 * @return ThisExpression
  	 */
  	function fromBits (a00, a16, a32, a48) {
  		if (typeof a32 == 'undefined') {
  			this._a00 = a00 & 0xFFFF;
  			this._a16 = a00 >>> 16;
  			this._a32 = a16 & 0xFFFF;
  			this._a48 = a16 >>> 16;
  			return this
  		}

  		this._a00 = a00 | 0;
  		this._a16 = a16 | 0;
  		this._a32 = a32 | 0;
  		this._a48 = a48 | 0;

  		return this
  	}
  	UINT64.prototype.fromBits = fromBits;

  	/**
  	 * Set the current _UINT64_ object from a number
  	 * @method fromNumber
  	 * @param {Number} number
  	 * @return ThisExpression
  	 */
  	function fromNumber (value) {
  		this._a00 = value & 0xFFFF;
  		this._a16 = value >>> 16;
  		this._a32 = 0;
  		this._a48 = 0;

  		return this
  	}
  	UINT64.prototype.fromNumber = fromNumber;

  	/**
  	 * Set the current _UINT64_ object from a string
  	 * @method fromString
  	 * @param {String} integer as a string
  	 * @param {Number} radix (optional, default=10)
  	 * @return ThisExpression
  	 */
  	function fromString (s, radix) {
  		radix = radix || 10;

  		this._a00 = 0;
  		this._a16 = 0;
  		this._a32 = 0;
  		this._a48 = 0;

  		/*
  			In Javascript, bitwise operators only operate on the first 32 bits 
  			of a number, even though parseInt() encodes numbers with a 53 bits 
  			mantissa.
  			Therefore UINT64(<Number>) can only work on 32 bits.
  			The radix maximum value is 36 (as per ECMA specs) (26 letters + 10 digits)
  			maximum input value is m = 32bits as 1 = 2^32 - 1
  			So the maximum substring length n is:
  			36^(n+1) - 1 = 2^32 - 1
  			36^(n+1) = 2^32
  			(n+1)ln(36) = 32ln(2)
  			n = 32ln(2)/ln(36) - 1
  			n = 5.189644915687692
  			n = 5
  		 */
  		var radixUint = radixPowerCache[radix] || new UINT64( Math.pow(radix, 5) );

  		for (var i = 0, len = s.length; i < len; i += 5) {
  			var size = Math.min(5, len - i);
  			var value = parseInt( s.slice(i, i + size), radix );
  			this.multiply(
  					size < 5
  						? new UINT64( Math.pow(radix, size) )
  						: radixUint
  				)
  				.add( new UINT64(value) );
  		}

  		return this
  	}
  	UINT64.prototype.fromString = fromString;

  	/**
  	 * Convert this _UINT64_ to a number (last 32 bits are dropped)
  	 * @method toNumber
  	 * @return {Number} the converted UINT64
  	 */
  	UINT64.prototype.toNumber = function () {
  		return (this._a16 * 65536) + this._a00
  	};

  	/**
  	 * Convert this _UINT64_ to a string
  	 * @method toString
  	 * @param {Number} radix (optional, default=10)
  	 * @return {String} the converted UINT64
  	 */
  	UINT64.prototype.toString = function (radix) {
  		radix = radix || 10;
  		var radixUint = radixCache[radix] || new UINT64(radix);

  		if ( !this.gt(radixUint) ) return this.toNumber().toString(radix)

  		var self = this.clone();
  		var res = new Array(64);
  		for (var i = 63; i >= 0; i--) {
  			self.div(radixUint);
  			res[i] = self.remainder.toNumber().toString(radix);
  			if ( !self.gt(radixUint) ) break
  		}
  		res[i-1] = self.toNumber().toString(radix);

  		return res.join('')
  	};

  	/**
  	 * Add two _UINT64_. The current _UINT64_ stores the result
  	 * @method add
  	 * @param {Object} other UINT64
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.add = function (other) {
  		var a00 = this._a00 + other._a00;

  		var a16 = a00 >>> 16;
  		a16 += this._a16 + other._a16;

  		var a32 = a16 >>> 16;
  		a32 += this._a32 + other._a32;

  		var a48 = a32 >>> 16;
  		a48 += this._a48 + other._a48;

  		this._a00 = a00 & 0xFFFF;
  		this._a16 = a16 & 0xFFFF;
  		this._a32 = a32 & 0xFFFF;
  		this._a48 = a48 & 0xFFFF;

  		return this
  	};

  	/**
  	 * Subtract two _UINT64_. The current _UINT64_ stores the result
  	 * @method subtract
  	 * @param {Object} other UINT64
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.subtract = function (other) {
  		return this.add( other.clone().negate() )
  	};

  	/**
  	 * Multiply two _UINT64_. The current _UINT64_ stores the result
  	 * @method multiply
  	 * @param {Object} other UINT64
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.multiply = function (other) {
  		/*
  			a = a00 + a16 + a32 + a48
  			b = b00 + b16 + b32 + b48
  			a*b = (a00 + a16 + a32 + a48)(b00 + b16 + b32 + b48)
  				= a00b00 + a00b16 + a00b32 + a00b48
  				+ a16b00 + a16b16 + a16b32 + a16b48
  				+ a32b00 + a32b16 + a32b32 + a32b48
  				+ a48b00 + a48b16 + a48b32 + a48b48

  			a16b48, a32b32, a48b16, a48b32 and a48b48 overflow the 64 bits
  			so it comes down to:
  			a*b	= a00b00 + a00b16 + a00b32 + a00b48
  				+ a16b00 + a16b16 + a16b32
  				+ a32b00 + a32b16
  				+ a48b00
  				= a00b00
  				+ a00b16 + a16b00
  				+ a00b32 + a16b16 + a32b00
  				+ a00b48 + a16b32 + a32b16 + a48b00
  		 */
  		var a00 = this._a00;
  		var a16 = this._a16;
  		var a32 = this._a32;
  		var a48 = this._a48;
  		var b00 = other._a00;
  		var b16 = other._a16;
  		var b32 = other._a32;
  		var b48 = other._a48;

  		var c00 = a00 * b00;

  		var c16 = c00 >>> 16;
  		c16 += a00 * b16;
  		var c32 = c16 >>> 16;
  		c16 &= 0xFFFF;
  		c16 += a16 * b00;

  		c32 += c16 >>> 16;
  		c32 += a00 * b32;
  		var c48 = c32 >>> 16;
  		c32 &= 0xFFFF;
  		c32 += a16 * b16;
  		c48 += c32 >>> 16;
  		c32 &= 0xFFFF;
  		c32 += a32 * b00;

  		c48 += c32 >>> 16;
  		c48 += a00 * b48;
  		c48 &= 0xFFFF;
  		c48 += a16 * b32;
  		c48 &= 0xFFFF;
  		c48 += a32 * b16;
  		c48 &= 0xFFFF;
  		c48 += a48 * b00;

  		this._a00 = c00 & 0xFFFF;
  		this._a16 = c16 & 0xFFFF;
  		this._a32 = c32 & 0xFFFF;
  		this._a48 = c48 & 0xFFFF;

  		return this
  	};

  	/**
  	 * Divide two _UINT64_. The current _UINT64_ stores the result.
  	 * The remainder is made available as the _remainder_ property on
  	 * the _UINT64_ object. It can be null, meaning there are no remainder.
  	 * @method div
  	 * @param {Object} other UINT64
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.div = function (other) {
  		if ( (other._a16 == 0) && (other._a32 == 0) && (other._a48 == 0) ) {
  			if (other._a00 == 0) throw Error('division by zero')

  			// other == 1: this
  			if (other._a00 == 1) {
  				this.remainder = new UINT64(0);
  				return this
  			}
  		}

  		// other > this: 0
  		if ( other.gt(this) ) {
  			this.remainder = this.clone();
  			this._a00 = 0;
  			this._a16 = 0;
  			this._a32 = 0;
  			this._a48 = 0;
  			return this
  		}
  		// other == this: 1
  		if ( this.eq(other) ) {
  			this.remainder = new UINT64(0);
  			this._a00 = 1;
  			this._a16 = 0;
  			this._a32 = 0;
  			this._a48 = 0;
  			return this
  		}

  		// Shift the divisor left until it is higher than the dividend
  		var _other = other.clone();
  		var i = -1;
  		while ( !this.lt(_other) ) {
  			// High bit can overflow the default 16bits
  			// Its ok since we right shift after this loop
  			// The overflown bit must be kept though
  			_other.shiftLeft(1, true);
  			i++;
  		}

  		// Set the remainder
  		this.remainder = this.clone();
  		// Initialize the current result to 0
  		this._a00 = 0;
  		this._a16 = 0;
  		this._a32 = 0;
  		this._a48 = 0;
  		for (; i >= 0; i--) {
  			_other.shiftRight(1);
  			// If shifted divisor is smaller than the dividend
  			// then subtract it from the dividend
  			if ( !this.remainder.lt(_other) ) {
  				this.remainder.subtract(_other);
  				// Update the current result
  				if (i >= 48) {
  					this._a48 |= 1 << (i - 48);
  				} else if (i >= 32) {
  					this._a32 |= 1 << (i - 32);
  				} else if (i >= 16) {
  					this._a16 |= 1 << (i - 16);
  				} else {
  					this._a00 |= 1 << i;
  				}
  			}
  		}

  		return this
  	};

  	/**
  	 * Negate the current _UINT64_
  	 * @method negate
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.negate = function () {
  		var v = ( ~this._a00 & 0xFFFF ) + 1;
  		this._a00 = v & 0xFFFF;
  		v = (~this._a16 & 0xFFFF) + (v >>> 16);
  		this._a16 = v & 0xFFFF;
  		v = (~this._a32 & 0xFFFF) + (v >>> 16);
  		this._a32 = v & 0xFFFF;
  		this._a48 = (~this._a48 + (v >>> 16)) & 0xFFFF;

  		return this
  	};

  	/**

  	 * @method eq
  	 * @param {Object} other UINT64
  	 * @return {Boolean}
  	 */
  	UINT64.prototype.equals = UINT64.prototype.eq = function (other) {
  		return (this._a48 == other._a48) && (this._a00 == other._a00)
  			 && (this._a32 == other._a32) && (this._a16 == other._a16)
  	};

  	/**
  	 * Greater than (strict)
  	 * @method gt
  	 * @param {Object} other UINT64
  	 * @return {Boolean}
  	 */
  	UINT64.prototype.greaterThan = UINT64.prototype.gt = function (other) {
  		if (this._a48 > other._a48) return true
  		if (this._a48 < other._a48) return false
  		if (this._a32 > other._a32) return true
  		if (this._a32 < other._a32) return false
  		if (this._a16 > other._a16) return true
  		if (this._a16 < other._a16) return false
  		return this._a00 > other._a00
  	};

  	/**
  	 * Less than (strict)
  	 * @method lt
  	 * @param {Object} other UINT64
  	 * @return {Boolean}
  	 */
  	UINT64.prototype.lessThan = UINT64.prototype.lt = function (other) {
  		if (this._a48 < other._a48) return true
  		if (this._a48 > other._a48) return false
  		if (this._a32 < other._a32) return true
  		if (this._a32 > other._a32) return false
  		if (this._a16 < other._a16) return true
  		if (this._a16 > other._a16) return false
  		return this._a00 < other._a00
  	};

  	/**
  	 * Bitwise OR
  	 * @method or
  	 * @param {Object} other UINT64
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.or = function (other) {
  		this._a00 |= other._a00;
  		this._a16 |= other._a16;
  		this._a32 |= other._a32;
  		this._a48 |= other._a48;

  		return this
  	};

  	/**
  	 * Bitwise AND
  	 * @method and
  	 * @param {Object} other UINT64
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.and = function (other) {
  		this._a00 &= other._a00;
  		this._a16 &= other._a16;
  		this._a32 &= other._a32;
  		this._a48 &= other._a48;

  		return this
  	};

  	/**
  	 * Bitwise XOR
  	 * @method xor
  	 * @param {Object} other UINT64
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.xor = function (other) {
  		this._a00 ^= other._a00;
  		this._a16 ^= other._a16;
  		this._a32 ^= other._a32;
  		this._a48 ^= other._a48;

  		return this
  	};

  	/**
  	 * Bitwise NOT
  	 * @method not
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.not = function() {
  		this._a00 = ~this._a00 & 0xFFFF;
  		this._a16 = ~this._a16 & 0xFFFF;
  		this._a32 = ~this._a32 & 0xFFFF;
  		this._a48 = ~this._a48 & 0xFFFF;

  		return this
  	};

  	/**
  	 * Bitwise shift right
  	 * @method shiftRight
  	 * @param {Number} number of bits to shift
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.shiftRight = UINT64.prototype.shiftr = function (n) {
  		n %= 64;
  		if (n >= 48) {
  			this._a00 = this._a48 >> (n - 48);
  			this._a16 = 0;
  			this._a32 = 0;
  			this._a48 = 0;
  		} else if (n >= 32) {
  			n -= 32;
  			this._a00 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF;
  			this._a16 = (this._a48 >> n) & 0xFFFF;
  			this._a32 = 0;
  			this._a48 = 0;
  		} else if (n >= 16) {
  			n -= 16;
  			this._a00 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF;
  			this._a16 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF;
  			this._a32 = (this._a48 >> n) & 0xFFFF;
  			this._a48 = 0;
  		} else {
  			this._a00 = ( (this._a00 >> n) | (this._a16 << (16-n)) ) & 0xFFFF;
  			this._a16 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF;
  			this._a32 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF;
  			this._a48 = (this._a48 >> n) & 0xFFFF;
  		}

  		return this
  	};

  	/**
  	 * Bitwise shift left
  	 * @method shiftLeft
  	 * @param {Number} number of bits to shift
  	 * @param {Boolean} allow overflow
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.shiftLeft = UINT64.prototype.shiftl = function (n, allowOverflow) {
  		n %= 64;
  		if (n >= 48) {
  			this._a48 = this._a00 << (n - 48);
  			this._a32 = 0;
  			this._a16 = 0;
  			this._a00 = 0;
  		} else if (n >= 32) {
  			n -= 32;
  			this._a48 = (this._a16 << n) | (this._a00 >> (16-n));
  			this._a32 = (this._a00 << n) & 0xFFFF;
  			this._a16 = 0;
  			this._a00 = 0;
  		} else if (n >= 16) {
  			n -= 16;
  			this._a48 = (this._a32 << n) | (this._a16 >> (16-n));
  			this._a32 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF;
  			this._a16 = (this._a00 << n) & 0xFFFF;
  			this._a00 = 0;
  		} else {
  			this._a48 = (this._a48 << n) | (this._a32 >> (16-n));
  			this._a32 = ( (this._a32 << n) | (this._a16 >> (16-n)) ) & 0xFFFF;
  			this._a16 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF;
  			this._a00 = (this._a00 << n) & 0xFFFF;
  		}
  		if (!allowOverflow) {
  			this._a48 &= 0xFFFF;
  		}

  		return this
  	};

  	/**
  	 * Bitwise rotate left
  	 * @method rotl
  	 * @param {Number} number of bits to rotate
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.rotateLeft = UINT64.prototype.rotl = function (n) {
  		n %= 64;
  		if (n == 0) return this
  		if (n >= 32) {
  			// A.B.C.D
  			// B.C.D.A rotl(16)
  			// C.D.A.B rotl(32)
  			var v = this._a00;
  			this._a00 = this._a32;
  			this._a32 = v;
  			v = this._a48;
  			this._a48 = this._a16;
  			this._a16 = v;
  			if (n == 32) return this
  			n -= 32;
  		}

  		var high = (this._a48 << 16) | this._a32;
  		var low = (this._a16 << 16) | this._a00;

  		var _high = (high << n) | (low >>> (32 - n));
  		var _low = (low << n) | (high >>> (32 - n));

  		this._a00 = _low & 0xFFFF;
  		this._a16 = _low >>> 16;
  		this._a32 = _high & 0xFFFF;
  		this._a48 = _high >>> 16;

  		return this
  	};

  	/**
  	 * Bitwise rotate right
  	 * @method rotr
  	 * @param {Number} number of bits to rotate
  	 * @return ThisExpression
  	 */
  	UINT64.prototype.rotateRight = UINT64.prototype.rotr = function (n) {
  		n %= 64;
  		if (n == 0) return this
  		if (n >= 32) {
  			// A.B.C.D
  			// D.A.B.C rotr(16)
  			// C.D.A.B rotr(32)
  			var v = this._a00;
  			this._a00 = this._a32;
  			this._a32 = v;
  			v = this._a48;
  			this._a48 = this._a16;
  			this._a16 = v;
  			if (n == 32) return this
  			n -= 32;
  		}

  		var high = (this._a48 << 16) | this._a32;
  		var low = (this._a16 << 16) | this._a00;

  		var _high = (high >>> n) | (low << (32 - n));
  		var _low = (low >>> n) | (high << (32 - n));

  		this._a00 = _low & 0xFFFF;
  		this._a16 = _low >>> 16;
  		this._a32 = _high & 0xFFFF;
  		this._a48 = _high >>> 16;

  		return this
  	};

  	/**
  	 * Clone the current _UINT64_
  	 * @method clone
  	 * @return {Object} cloned UINT64
  	 */
  	UINT64.prototype.clone = function () {
  		return new UINT64(this._a00, this._a16, this._a32, this._a48)
  	};

  	if (module.exports) {
  		// Node.js
  		module.exports = UINT64;
  	} else {
  		// Browser
  		root['UINT64'] = UINT64;
  	}

  })(commonjsGlobal);
  });

  var UINT32$1 = uint32;
  var UINT64$1 = uint64;

  var cuint = {
  	UINT32: UINT32$1,
  	UINT64: UINT64$1
  };

  /**
  xxHash implementation in pure Javascript

  Copyright (C) 2013, Pierre Curto
  MIT license
  */

  var UINT32 = cuint.UINT32;

  /*
  	Merged this sequence of method calls as it speeds up
  	the calculations by a factor of 2
   */
  // this.v1.add( other.multiply(PRIME32_2) ).rotl(13).multiply(PRIME32_1);
  UINT32.prototype.xxh_update = function (low, high) {
  	var b00 = PRIME32_2._low;
  	var b16 = PRIME32_2._high;

  	var c16, c00;
  	c00 = low * b00;
  	c16 = c00 >>> 16;

  	c16 += high * b00;
  	c16 &= 0xFFFF;		// Not required but improves performance
  	c16 += low * b16;

  	var a00 = this._low + (c00 & 0xFFFF);
  	var a16 = a00 >>> 16;

  	a16 += this._high + (c16 & 0xFFFF);

  	var v = (a16 << 16) | (a00 & 0xFFFF);
  	v = (v << 13) | (v >>> 19);

  	a00 = v & 0xFFFF;
  	a16 = v >>> 16;

  	b00 = PRIME32_1._low;
  	b16 = PRIME32_1._high;

  	c00 = a00 * b00;
  	c16 = c00 >>> 16;

  	c16 += a16 * b00;
  	c16 &= 0xFFFF;		// Not required but improves performance
  	c16 += a00 * b16;

  	this._low = c00 & 0xFFFF;
  	this._high = c16 & 0xFFFF;
  };

  /*
   * Constants
   */
  var PRIME32_1 = UINT32( '2654435761' );
  var PRIME32_2 = UINT32( '2246822519' );
  var PRIME32_3 = UINT32( '3266489917' );
  var PRIME32_4 = UINT32(  '668265263' );
  var PRIME32_5 = UINT32(  '374761393' );

  /**
  * Convert string to proper UTF-8 array
  * @param str Input string
  * @returns {Uint8Array} UTF8 array is returned as uint8 array
  */
  function toUTF8Array$1 (str) {
  	var utf8 = [];
  	for (var i=0, n=str.length; i < n; i++) {
  		var charcode = str.charCodeAt(i);
  		if (charcode < 0x80) utf8.push(charcode);
  		else if (charcode < 0x800) {
  			utf8.push(0xc0 | (charcode >> 6),
  			0x80 | (charcode & 0x3f));
  		}
  		else if (charcode < 0xd800 || charcode >= 0xe000) {
  			utf8.push(0xe0 | (charcode >> 12),
  			0x80 | ((charcode>>6) & 0x3f),
  			0x80 | (charcode & 0x3f));
  		}
  		// surrogate pair
  		else {
  			i++;
  			// UTF-16 encodes 0x10000-0x10FFFF by
  			// subtracting 0x10000 and splitting the
  			// 20 bits of 0x0-0xFFFFF into two halves
  			charcode = 0x10000 + (((charcode & 0x3ff)<<10)
  			| (str.charCodeAt(i) & 0x3ff));
  			utf8.push(0xf0 | (charcode >>18),
  			0x80 | ((charcode>>12) & 0x3f),
  			0x80 | ((charcode>>6) & 0x3f),
  			0x80 | (charcode & 0x3f));
  		}
  	}

  	return new Uint8Array(utf8)
  }

  /**
   * XXH object used as a constructor or a function
   * @constructor
   * or
   * @param {Object|String} input data
   * @param {Number|UINT32} seed
   * @return ThisExpression
   * or
   * @return {UINT32} xxHash
   */
  function XXH () {
  	if (arguments.length == 2)
  		return new XXH( arguments[1] ).update( arguments[0] ).digest()

  	if (!(this instanceof XXH))
  		return new XXH( arguments[0] )

  	init$1.call(this, arguments[0]);
  }

  /**
   * Initialize the XXH instance with the given seed
   * @method init
   * @param {Number|Object} seed as a number or an unsigned 32 bits integer
   * @return ThisExpression
   */
   function init$1 (seed) {
  	this.seed = seed instanceof UINT32 ? seed.clone() : UINT32(seed);
  	this.v1 = this.seed.clone().add(PRIME32_1).add(PRIME32_2);
  	this.v2 = this.seed.clone().add(PRIME32_2);
  	this.v3 = this.seed.clone();
  	this.v4 = this.seed.clone().subtract(PRIME32_1);
  	this.total_len = 0;
  	this.memsize = 0;
  	this.memory = null;

  	return this
  }
  XXH.prototype.init = init$1;

  /**
   * Add data to be computed for the XXH hash
   * @method update
   * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer
   * @return ThisExpression
   */
  XXH.prototype.update = function (input) {
  	var isString = typeof input == 'string';
  	var isArrayBuffer;

  	// Convert all strings to utf-8 first (issue #5)
  	if (isString) {
  		input = toUTF8Array$1(input);
  		isString = false;
  		isArrayBuffer = true;
  	}

  	if (typeof ArrayBuffer !== "undefined" && input instanceof ArrayBuffer)
  	{
  		isArrayBuffer = true;
  		input = new Uint8Array(input);
  	}

  	var p = 0;
  	var len = input.length;
  	var bEnd = p + len;

  	if (len == 0) return this

  	this.total_len += len;

  	if (this.memsize == 0)
  	{
  		if (isString) {
  			this.memory = '';
  		} else if (isArrayBuffer) {
  			this.memory = new Uint8Array(16);
  		} else {
  			this.memory = new Buffer(16);
  		}
  	}

  	if (this.memsize + len < 16)   // fill in tmp buffer
  	{
  		// XXH_memcpy(this.memory + this.memsize, input, len)
  		if (isString) {
  			this.memory += input;
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(0, len), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, 0, len );
  		}

  		this.memsize += len;
  		return this
  	}

  	if (this.memsize > 0)   // some data left from previous update
  	{
  		// XXH_memcpy(this.memory + this.memsize, input, 16-this.memsize);
  		if (isString) {
  			this.memory += input.slice(0, 16 - this.memsize);
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(0, 16 - this.memsize), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, 0, 16 - this.memsize );
  		}

  		var p32 = 0;
  		if (isString) {
  			this.v1.xxh_update(
  				(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
  			,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
  			);
  			p32 += 4;
  			this.v2.xxh_update(
  				(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
  			,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
  			);
  			p32 += 4;
  			this.v3.xxh_update(
  				(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
  			,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
  			);
  			p32 += 4;
  			this.v4.xxh_update(
  				(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)
  			,	(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)
  			);
  		} else {
  			this.v1.xxh_update(
  				(this.memory[p32+1] << 8) | this.memory[p32]
  			,	(this.memory[p32+3] << 8) | this.memory[p32+2]
  			);
  			p32 += 4;
  			this.v2.xxh_update(
  				(this.memory[p32+1] << 8) | this.memory[p32]
  			,	(this.memory[p32+3] << 8) | this.memory[p32+2]
  			);
  			p32 += 4;
  			this.v3.xxh_update(
  				(this.memory[p32+1] << 8) | this.memory[p32]
  			,	(this.memory[p32+3] << 8) | this.memory[p32+2]
  			);
  			p32 += 4;
  			this.v4.xxh_update(
  				(this.memory[p32+1] << 8) | this.memory[p32]
  			,	(this.memory[p32+3] << 8) | this.memory[p32+2]
  			);
  		}

  		p += 16 - this.memsize;
  		this.memsize = 0;
  		if (isString) this.memory = '';
  	}

  	if (p <= bEnd - 16)
  	{
  		var limit = bEnd - 16;

  		do
  		{
  			if (isString) {
  				this.v1.xxh_update(
  					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  				);
  				p += 4;
  				this.v2.xxh_update(
  					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  				);
  				p += 4;
  				this.v3.xxh_update(
  					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  				);
  				p += 4;
  				this.v4.xxh_update(
  					(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  				,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  				);
  			} else {
  				this.v1.xxh_update(
  					(input[p+1] << 8) | input[p]
  				,	(input[p+3] << 8) | input[p+2]
  				);
  				p += 4;
  				this.v2.xxh_update(
  					(input[p+1] << 8) | input[p]
  				,	(input[p+3] << 8) | input[p+2]
  				);
  				p += 4;
  				this.v3.xxh_update(
  					(input[p+1] << 8) | input[p]
  				,	(input[p+3] << 8) | input[p+2]
  				);
  				p += 4;
  				this.v4.xxh_update(
  					(input[p+1] << 8) | input[p]
  				,	(input[p+3] << 8) | input[p+2]
  				);
  			}
  			p += 4;
  		} while (p <= limit)
  	}

  	if (p < bEnd)
  	{
  		// XXH_memcpy(this.memory, p, bEnd-p);
  		if (isString) {
  			this.memory += input.slice(p);
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(p, bEnd), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, p, bEnd );
  		}

  		this.memsize = bEnd - p;
  	}

  	return this
  };

  /**
   * Finalize the XXH computation. The XXH instance is ready for reuse for the given seed
   * @method digest
   * @return {UINT32} xxHash
   */
  XXH.prototype.digest = function () {
  	var input = this.memory;
  	var isString = typeof input == 'string';
  	var p = 0;
  	var bEnd = this.memsize;
  	var h32, h;
  	var u = new UINT32;

  	if (this.total_len >= 16)
  	{
  		h32 = this.v1.rotl(1).add( this.v2.rotl(7).add( this.v3.rotl(12).add( this.v4.rotl(18) ) ) );
  	}
  	else
  	{
  		h32  = this.seed.clone().add( PRIME32_5 );
  	}

  	h32.add( u.fromNumber(this.total_len) );

  	while (p <= bEnd - 4)
  	{
  		if (isString) {
  			u.fromBits(
  				(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  			,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  			);
  		} else {
  			u.fromBits(
  				(input[p+1] << 8) | input[p]
  			,	(input[p+3] << 8) | input[p+2]
  			);
  		}
  		h32
  			.add( u.multiply(PRIME32_3) )
  			.rotl(17)
  			.multiply( PRIME32_4 );
  		p += 4;
  	}

  	while (p < bEnd)
  	{
  		u.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0 );
  		h32
  			.add( u.multiply(PRIME32_5) )
  			.rotl(11)
  			.multiply(PRIME32_1);
  	}

  	h = h32.clone().shiftRight(15);
  	h32.xor(h).multiply(PRIME32_2);

  	h = h32.clone().shiftRight(13);
  	h32.xor(h).multiply(PRIME32_3);

  	h = h32.clone().shiftRight(16);
  	h32.xor(h);

  	// Reset the state
  	this.init( this.seed );

  	return h32
  };

  var xxhash = XXH;

  /**
  xxHash64 implementation in pure Javascript

  Copyright (C) 2016, Pierre Curto
  MIT license
  */

  var UINT64 = cuint.UINT64;

  /*
   * Constants
   */
  var PRIME64_1 = UINT64( '11400714785074694791' );
  var PRIME64_2 = UINT64( '14029467366897019727' );
  var PRIME64_3 = UINT64(  '1609587929392839161' );
  var PRIME64_4 = UINT64(  '9650029242287828579' );
  var PRIME64_5 = UINT64(  '2870177450012600261' );

  /**
  * Convert string to proper UTF-8 array
  * @param str Input string
  * @returns {Uint8Array} UTF8 array is returned as uint8 array
  */
  function toUTF8Array (str) {
  	var utf8 = [];
  	for (var i=0, n=str.length; i < n; i++) {
  		var charcode = str.charCodeAt(i);
  		if (charcode < 0x80) utf8.push(charcode);
  		else if (charcode < 0x800) {
  			utf8.push(0xc0 | (charcode >> 6),
  			0x80 | (charcode & 0x3f));
  		}
  		else if (charcode < 0xd800 || charcode >= 0xe000) {
  			utf8.push(0xe0 | (charcode >> 12),
  			0x80 | ((charcode>>6) & 0x3f),
  			0x80 | (charcode & 0x3f));
  		}
  		// surrogate pair
  		else {
  			i++;
  			// UTF-16 encodes 0x10000-0x10FFFF by
  			// subtracting 0x10000 and splitting the
  			// 20 bits of 0x0-0xFFFFF into two halves
  			charcode = 0x10000 + (((charcode & 0x3ff)<<10)
  			| (str.charCodeAt(i) & 0x3ff));
  			utf8.push(0xf0 | (charcode >>18),
  			0x80 | ((charcode>>12) & 0x3f),
  			0x80 | ((charcode>>6) & 0x3f),
  			0x80 | (charcode & 0x3f));
  		}
  	}

  	return new Uint8Array(utf8)
  }

  /**
   * XXH64 object used as a constructor or a function
   * @constructor
   * or
   * @param {Object|String} input data
   * @param {Number|UINT64} seed
   * @return ThisExpression
   * or
   * @return {UINT64} xxHash
   */
  function XXH64 () {
  	if (arguments.length == 2)
  		return new XXH64( arguments[1] ).update( arguments[0] ).digest()

  	if (!(this instanceof XXH64))
  		return new XXH64( arguments[0] )

  	init.call(this, arguments[0]);
  }

  /**
   * Initialize the XXH64 instance with the given seed
   * @method init
   * @param {Number|Object} seed as a number or an unsigned 32 bits integer
   * @return ThisExpression
   */
   function init (seed) {
  	this.seed = seed instanceof UINT64 ? seed.clone() : UINT64(seed);
  	this.v1 = this.seed.clone().add(PRIME64_1).add(PRIME64_2);
  	this.v2 = this.seed.clone().add(PRIME64_2);
  	this.v3 = this.seed.clone();
  	this.v4 = this.seed.clone().subtract(PRIME64_1);
  	this.total_len = 0;
  	this.memsize = 0;
  	this.memory = null;

  	return this
  }
  XXH64.prototype.init = init;

  /**
   * Add data to be computed for the XXH64 hash
   * @method update
   * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer
   * @return ThisExpression
   */
  XXH64.prototype.update = function (input) {
  	var isString = typeof input == 'string';
  	var isArrayBuffer;

  	// Convert all strings to utf-8 first (issue #5)
  	if (isString) {
  		input = toUTF8Array(input);
  		isString = false;
  		isArrayBuffer = true;
  	}

  	if (typeof ArrayBuffer !== "undefined" && input instanceof ArrayBuffer)
  	{
  		isArrayBuffer = true;
  		input = new Uint8Array(input);
  	}

  	var p = 0;
  	var len = input.length;
  	var bEnd = p + len;

  	if (len == 0) return this

  	this.total_len += len;

  	if (this.memsize == 0)
  	{
  		if (isString) {
  			this.memory = '';
  		} else if (isArrayBuffer) {
  			this.memory = new Uint8Array(32);
  		} else {
  			this.memory = new Buffer(32);
  		}
  	}

  	if (this.memsize + len < 32)   // fill in tmp buffer
  	{
  		// XXH64_memcpy(this.memory + this.memsize, input, len)
  		if (isString) {
  			this.memory += input;
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(0, len), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, 0, len );
  		}

  		this.memsize += len;
  		return this
  	}

  	if (this.memsize > 0)   // some data left from previous update
  	{
  		// XXH64_memcpy(this.memory + this.memsize, input, 16-this.memsize);
  		if (isString) {
  			this.memory += input.slice(0, 32 - this.memsize);
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(0, 32 - this.memsize), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, 0, 32 - this.memsize );
  		}

  		var p64 = 0;
  		if (isString) {
  			var other;
  			other = UINT64(
  					(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
  				,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
  				,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
  				,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
  				);
  			this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
  				,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
  				,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
  				,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
  				);
  			this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
  				,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
  				,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
  				,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
  				);
  			this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)
  				,	(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)
  				,	(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)
  				,	(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)
  				);
  			this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  		} else {
  			var other;
  			other = UINT64(
  					(this.memory[p64+1] << 8) | this.memory[p64]
  				,	(this.memory[p64+3] << 8) | this.memory[p64+2]
  				,	(this.memory[p64+5] << 8) | this.memory[p64+4]
  				,	(this.memory[p64+7] << 8) | this.memory[p64+6]
  				);
  			this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory[p64+1] << 8) | this.memory[p64]
  				,	(this.memory[p64+3] << 8) | this.memory[p64+2]
  				,	(this.memory[p64+5] << 8) | this.memory[p64+4]
  				,	(this.memory[p64+7] << 8) | this.memory[p64+6]
  				);
  			this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory[p64+1] << 8) | this.memory[p64]
  				,	(this.memory[p64+3] << 8) | this.memory[p64+2]
  				,	(this.memory[p64+5] << 8) | this.memory[p64+4]
  				,	(this.memory[p64+7] << 8) | this.memory[p64+6]
  				);
  			this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			p64 += 8;
  			other = UINT64(
  					(this.memory[p64+1] << 8) | this.memory[p64]
  				,	(this.memory[p64+3] << 8) | this.memory[p64+2]
  				,	(this.memory[p64+5] << 8) | this.memory[p64+4]
  				,	(this.memory[p64+7] << 8) | this.memory[p64+6]
  				);
  			this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  		}

  		p += 32 - this.memsize;
  		this.memsize = 0;
  		if (isString) this.memory = '';
  	}

  	if (p <= bEnd - 32)
  	{
  		var limit = bEnd - 32;

  		do
  		{
  			if (isString) {
  				var other;
  				other = UINT64(
  						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  					,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  					,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  					);
  				this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  					,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  					,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  					);
  				this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  					,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  					,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  					);
  				this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  					,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  					,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  					,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  					);
  				this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			} else {
  				var other;
  				other = UINT64(
  						(input[p+1] << 8) | input[p]
  					,	(input[p+3] << 8) | input[p+2]
  					,	(input[p+5] << 8) | input[p+4]
  					,	(input[p+7] << 8) | input[p+6]
  					);
  				this.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input[p+1] << 8) | input[p]
  					,	(input[p+3] << 8) | input[p+2]
  					,	(input[p+5] << 8) | input[p+4]
  					,	(input[p+7] << 8) | input[p+6]
  					);
  				this.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input[p+1] << 8) | input[p]
  					,	(input[p+3] << 8) | input[p+2]
  					,	(input[p+5] << 8) | input[p+4]
  					,	(input[p+7] << 8) | input[p+6]
  					);
  				this.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  				p += 8;
  				other = UINT64(
  						(input[p+1] << 8) | input[p]
  					,	(input[p+3] << 8) | input[p+2]
  					,	(input[p+5] << 8) | input[p+4]
  					,	(input[p+7] << 8) | input[p+6]
  					);
  				this.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);
  			}
  			p += 8;
  		} while (p <= limit)
  	}

  	if (p < bEnd)
  	{
  		// XXH64_memcpy(this.memory, p, bEnd-p);
  		if (isString) {
  			this.memory += input.slice(p);
  		} else if (isArrayBuffer) {
  			this.memory.set( input.subarray(p, bEnd), this.memsize );
  		} else {
  			input.copy( this.memory, this.memsize, p, bEnd );
  		}

  		this.memsize = bEnd - p;
  	}

  	return this
  };

  /**
   * Finalize the XXH64 computation. The XXH64 instance is ready for reuse for the given seed
   * @method digest
   * @return {UINT64} xxHash
   */
  XXH64.prototype.digest = function () {
  	var input = this.memory;
  	var isString = typeof input == 'string';
  	var p = 0;
  	var bEnd = this.memsize;
  	var h64, h;
  	var u = new UINT64;

  	if (this.total_len >= 32)
  	{
  		h64 = this.v1.clone().rotl(1);
  		h64.add( this.v2.clone().rotl(7) );
  		h64.add( this.v3.clone().rotl(12) );
  		h64.add( this.v4.clone().rotl(18) );

  		h64.xor( this.v1.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
  		h64.multiply(PRIME64_1).add(PRIME64_4);

  		h64.xor( this.v2.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
  		h64.multiply(PRIME64_1).add(PRIME64_4);

  		h64.xor( this.v3.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
  		h64.multiply(PRIME64_1).add(PRIME64_4);

  		h64.xor( this.v4.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) );
  		h64.multiply(PRIME64_1).add(PRIME64_4);
  	}
  	else
  	{
  		h64  = this.seed.clone().add( PRIME64_5 );
  	}

  	h64.add( u.fromNumber(this.total_len) );

  	while (p <= bEnd - 8)
  	{
  		if (isString) {
  			u.fromBits(
  				(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  			,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  			,	(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)
  			,	(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)
  			);
  		} else {
  			u.fromBits(
  				(input[p+1] << 8) | input[p]
  			,	(input[p+3] << 8) | input[p+2]
  			,	(input[p+5] << 8) | input[p+4]
  			,	(input[p+7] << 8) | input[p+6]
  			);
  		}
  		u.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1);
  		h64
  			.xor(u)
  			.rotl(27)
  			.multiply( PRIME64_1 )
  			.add( PRIME64_4 );
  		p += 8;
  	}

  	if (p + 4 <= bEnd) {
  		if (isString) {
  			u.fromBits(
  				(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)
  			,	(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)
  			,	0
  			,	0
  			);
  		} else {
  			u.fromBits(
  				(input[p+1] << 8) | input[p]
  			,	(input[p+3] << 8) | input[p+2]
  			,	0
  			,	0
  			);
  		}
  		h64
  			.xor( u.multiply(PRIME64_1) )
  			.rotl(23)
  			.multiply( PRIME64_2 )
  			.add( PRIME64_3 );
  		p += 4;
  	}

  	while (p < bEnd)
  	{
  		u.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0, 0, 0 );
  		h64
  			.xor( u.multiply(PRIME64_5) )
  			.rotl(11)
  			.multiply(PRIME64_1);
  	}

  	h = h64.clone().shiftRight(33);
  	h64.xor(h).multiply(PRIME64_2);

  	h = h64.clone().shiftRight(29);
  	h64.xor(h).multiply(PRIME64_3);

  	h = h64.clone().shiftRight(32);
  	h64.xor(h);

  	// Reset the state
  	this.init( this.seed );

  	return h64
  };

  var xxhash64 = XXH64;

  var lib = {
  	h32: xxhash
  ,	h64: xxhash64
  };

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  function xxhash64AsValue(data, seed) {
    if (isBuffer(data) || isString(data)) {
      return lib.h64(data, seed);
    }

    return lib.h64(u8aToBuffer(data), seed);
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  function xxhash64AsRaw(data, seed) {
    return xxhash64AsValue(data, seed).toString(16);
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  function xxhash64AsBn(data, seed) {
    return new bn(xxhash64AsRaw(data, seed), 16);
  }

  // Copyright 2017-2021 @polkadot/util-crypto authors & contributors
  /**
   * @name xxhashAsU8a
   * @summary Creates a xxhash64 u8a from the input.
   * @description
   * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { xxhashAsU8a } from '@polkadot/util-crypto';
   *
   * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999
   * ```
   */

  function xxhashAsU8a(data, bitLength = 64, onlyJs = false) {
    const iterations = Math.ceil(bitLength / 64);

    if (isReady() && !onlyJs) {
      return twox(u8aToU8a(data), iterations);
    }

    const u8a = new Uint8Array(Math.ceil(bitLength / 8));

    for (let seed = 0; seed < iterations; seed++) {
      u8a.set(xxhash64AsBn(data, seed).toArray('le', 8), seed * 8);
    }

    return u8a;
  }

  var eventemitter3 = createCommonjsModule(function (module) {

  var has = Object.prototype.hasOwnProperty
    , prefix = '~';

  /**
   * Constructor to create a storage for our `EE` objects.
   * An `Events` instance is a plain object whose properties are event names.
   *
   * @constructor
   * @private
   */
  function Events() {}

  //
  // We try to not inherit from `Object.prototype`. In some engines creating an
  // instance in this way is faster than calling `Object.create(null)` directly.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // character to make sure that the built-in object properties are not
  // overridden or used as an attack vector.
  //
  if (Object.create) {
    Events.prototype = Object.create(null);

    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__) prefix = false;
  }

  /**
   * Representation of a single event listener.
   *
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
   * @constructor
   * @private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Add a listener for a given event.
   *
   * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} once Specify if the listener is a one-time listener.
   * @returns {EventEmitter}
   * @private
   */
  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once)
      , evt = prefix ? prefix + event : event;

    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    else emitter._events[evt] = [emitter._events[evt], listener];

    return emitter;
  }

  /**
   * Clear event by name.
   *
   * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
   * @param {(String|Symbol)} evt The Event name.
   * @private
   */
  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();
    else delete emitter._events[evt];
  }

  /**
   * Minimal `EventEmitter` interface that is molded against the Node.js
   * `EventEmitter` interface.
   *
   * @constructor
   * @public
   */
  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @public
   */
  EventEmitter.prototype.eventNames = function eventNames() {
    var names = []
      , events
      , name;

    if (this._eventsCount === 0) return names;

    for (name in (events = this._events)) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  /**
   * Return the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Array} The registered listeners.
   * @public
   */
  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event
      , handlers = this._events[evt];

    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  /**
   * Return the number of listeners listening to a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Number} The number of listeners.
   * @public
   */
  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event
      , listeners = this._events[evt];

    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  /**
   * Calls each of the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Boolean} `true` if the event had listeners, else `false`.
   * @public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return false;

    var listeners = this._events[evt]
      , len = arguments.length
      , args
      , i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1: return listeners.fn.call(listeners.context), true;
        case 2: return listeners.fn.call(listeners.context, a1), true;
        case 3: return listeners.fn.call(listeners.context, a1, a2), true;
        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len -1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length
        , j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1: listeners[i].fn.call(listeners[i].context); break;
          case 2: listeners[i].fn.call(listeners[i].context, a1); break;
          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
          case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
          default:
            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Add a listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  /**
   * Add a one-time listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  /**
   * Remove the listeners of a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn Only remove the listeners that match this function.
   * @param {*} context Only remove the listeners that have this context.
   * @param {Boolean} once Only remove one-time listeners.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (
        listeners.fn === fn &&
        (!once || listeners.once) &&
        (!context || listeners.context === context)
      ) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (
          listeners[i].fn !== fn ||
          (once && !listeners[i].once) ||
          (context && listeners[i].context !== context)
        ) {
          events.push(listeners[i]);
        }
      }

      //
      // Reset the array, or remove it completely if we have no more listeners.
      //
      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
      else clearEvent(this, evt);
    }

    return this;
  };

  /**
   * Remove all listeners, or those of the specified event.
   *
   * @param {(String|Symbol)} [event] The event name.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Allow `EventEmitter` to be imported as module namespace.
  //
  EventEmitter.EventEmitter = EventEmitter;

  //
  // Expose the module.
  //
  {
    module.exports = EventEmitter;
  }
  });

  function formatErrorData(data) {
    if (isUndefined(data)) {
      return '';
    }

    const formatted = `: ${isString(data) ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '') : JSON.stringify(data)}`; // We need some sort of cut-off here since these can be very large and
    // very nested, pick a number and trim the result display to it

    return formatted.length <= 256 ? formatted : `${formatted.substr(0, 255)}…`;
  }
  /** @internal */


  var _id = _classPrivateFieldKey("id");

  class RpcCoder {
    constructor() {
      Object.defineProperty(this, _id, {
        writable: true,
        value: 0
      });
    }

    decodeResponse(response) {
      assert$a(response, 'Empty response object received');
      assert$a(response.jsonrpc === '2.0', 'Invalid jsonrpc field in decoded object');
      const isSubscription = !isUndefined(response.params) && !isUndefined(response.method);
      assert$a(isNumber(response.id) || isSubscription && (isNumber(response.params.subscription) || isString(response.params.subscription)), 'Invalid id field in decoded object');

      this._checkError(response.error);

      assert$a(!isUndefined(response.result) || isSubscription, 'No result found in JsonRpc response');

      if (isSubscription) {
        this._checkError(response.params.error);

        return response.params.result;
      }

      return response.result;
    }

    encodeJson(method, params) {
      return JSON.stringify(this.encodeObject(method, params));
    }

    encodeObject(method, params) {
      return {
        id: ++_classPrivateFieldBase(this, _id)[_id],
        jsonrpc: '2.0',
        method,
        params
      };
    }

    getId() {
      return _classPrivateFieldBase(this, _id)[_id];
    }

    _checkError(error) {
      if (error) {
        const {
          code,
          data,
          message
        } = error;
        throw new Error(`${code}: ${message}${formatErrorData(data)}`);
      }
    }

  }

  // Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const HTTP_URL = 'http://127.0.0.1:9933';
  const WS_URL = 'ws://127.0.0.1:9944';
  var defaults = {
    HTTP_URL,
    WS_URL
  };

  // Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // from https://stackoverflow.com/questions/19304157/getting-the-reason-why-websockets-closed-with-close-code-1006
  const known = {
    1000: 'Normal Closure',
    1001: 'Going Away',
    1002: 'Protocol Error',
    1003: 'Unsupported Data',
    1004: '(For future)',
    1005: 'No Status Received',
    1006: 'Abnormal Closure',
    1007: 'Invalid frame payload data',
    1008: 'Policy Violation',
    1009: 'Message too big',
    1010: 'Missing Extension',
    1011: 'Internal Error',
    1012: 'Service Restart',
    1013: 'Try Again Later',
    1014: 'Bad Gateway',
    1015: 'TLS Handshake'
  };

  function getUnmapped(code) {
    if (code <= 1999) {
      return '(For WebSocket standard)';
    } else if (code <= 2999) {
      return '(For WebSocket extensions)';
    } else if (code <= 3999) {
      return '(For libraries and frameworks)';
    } else if (code <= 4999) {
      return '(For applications)';
    }
  }

  function getWSErrorString(code) {
    if (code >= 0 && code <= 999) {
      return '(Unused)';
    }

    return known[code] || getUnmapped(code) || '(Unknown)';
  }

  function ownKeys$K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$K(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$K(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const ALIASSES = {
    chain_finalisedHead: 'chain_finalizedHead',
    chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
    chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
  };
  const RETRY_DELAY = 1000;
  const l$c = logger('api-ws');

  function eraseRecord(record, cb) {
    Object.keys(record).forEach(key => {
      if (cb) {
        cb(record[key]);
      }

      delete record[key];
    });
  }
  /**
   * # @polkadot/rpc-provider/ws
   *
   * @name WsProvider
   *
   * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   * import { WsProvider } from '@polkadot/rpc-provider/ws';
   *
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const api = new Api(provider);
   * ```
   *
   * @see [[HttpProvider]]
   */


  var _coder = _classPrivateFieldKey("coder");

  var _endpoints = _classPrivateFieldKey("endpoints");

  var _headers = _classPrivateFieldKey("headers");

  var _eventemitter$1 = _classPrivateFieldKey("eventemitter");

  var _handlers = _classPrivateFieldKey("handlers");

  var _isReadyPromise$1 = _classPrivateFieldKey("isReadyPromise");

  var _waitingForId = _classPrivateFieldKey("waitingForId");

  var _autoConnectMs = _classPrivateFieldKey("autoConnectMs");

  var _endpointIndex = _classPrivateFieldKey("endpointIndex");

  var _isConnected = _classPrivateFieldKey("isConnected");

  var _subscriptions$1 = _classPrivateFieldKey("subscriptions");

  var _websocket = _classPrivateFieldKey("websocket");

  var _emit = _classPrivateFieldKey("emit");

  var _onSocketClose = _classPrivateFieldKey("onSocketClose");

  var _onSocketError = _classPrivateFieldKey("onSocketError");

  var _onSocketMessage = _classPrivateFieldKey("onSocketMessage");

  var _onSocketMessageResult = _classPrivateFieldKey("onSocketMessageResult");

  var _onSocketMessageSubscribe = _classPrivateFieldKey("onSocketMessageSubscribe");

  var _onSocketOpen = _classPrivateFieldKey("onSocketOpen");

  var _resubscribe = _classPrivateFieldKey("resubscribe");

  class WsProvider {
    /**
     * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
     * @param {boolean} autoConnect Whether to connect automatically or not.
     */
    constructor(endpoint = defaults.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}) {
      Object.defineProperty(this, _coder, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _endpoints, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _headers, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _eventemitter$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _handlers, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _isReadyPromise$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _waitingForId, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _autoConnectMs, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _endpointIndex, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isConnected, {
        writable: true,
        value: false
      });
      Object.defineProperty(this, _subscriptions$1, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _websocket, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _emit, {
        writable: true,
        value: (type, ...args) => {
          _classPrivateFieldBase(this, _eventemitter$1)[_eventemitter$1].emit(type, ...args);
        }
      });
      Object.defineProperty(this, _onSocketClose, {
        writable: true,
        value: event => {
          const error = new Error(`disconnected from ${_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);

          if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
            l$c.error(error.message);
          }

          _classPrivateFieldBase(this, _isConnected)[_isConnected] = false;

          _classPrivateFieldBase(this, _emit)[_emit]('disconnected'); // reject all hanging requests


          eraseRecord(_classPrivateFieldBase(this, _handlers)[_handlers], handler => handler.callback(error, undefined));
          eraseRecord(_classPrivateFieldBase(this, _waitingForId)[_waitingForId]);

          if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
            setTimeout(() => {
              this.connectWithRetry().catch(() => {// does not throw
              });
            }, _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs]);
          }
        }
      });
      Object.defineProperty(this, _onSocketError, {
        writable: true,
        value: error => {
          l$c.debug(() => ['socket error', error]);

          _classPrivateFieldBase(this, _emit)[_emit]('error', error);
        }
      });
      Object.defineProperty(this, _onSocketMessage, {
        writable: true,
        value: message => {
          l$c.debug(() => ['received', message.data]);
          const response = JSON.parse(message.data);
          return isUndefined(response.method) ? _classPrivateFieldBase(this, _onSocketMessageResult)[_onSocketMessageResult](response) : _classPrivateFieldBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](response);
        }
      });
      Object.defineProperty(this, _onSocketMessageResult, {
        writable: true,
        value: response => {
          const handler = _classPrivateFieldBase(this, _handlers)[_handlers][response.id];

          if (!handler) {
            l$c.debug(() => `Unable to find handler for id=${response.id}`);
            return;
          }

          try {
            const {
              method,
              params,
              subscription
            } = handler;

            const result = _classPrivateFieldBase(this, _coder)[_coder].decodeResponse(response); // first send the result - in case of subs, we may have an update
            // immediately if we have some queued results already


            handler.callback(null, result);

            if (subscription) {
              const subId = `${subscription.type}::${result}`;
              _classPrivateFieldBase(this, _subscriptions$1)[_subscriptions$1][subId] = _objectSpread$K(_objectSpread$K({}, subscription), {}, {
                method,
                params
              }); // if we have a result waiting for this subscription already

              if (_classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId]) {
                _classPrivateFieldBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](_classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId]);
              }
            }
          } catch (error) {
            handler.callback(error, undefined);
          }

          delete _classPrivateFieldBase(this, _handlers)[_handlers][response.id];
        }
      });
      Object.defineProperty(this, _onSocketMessageSubscribe, {
        writable: true,
        value: response => {
          const method = ALIASSES[response.method] || response.method || 'invalid';
          const subId = `${method}::${response.params.subscription}`;

          const handler = _classPrivateFieldBase(this, _subscriptions$1)[_subscriptions$1][subId];

          if (!handler) {
            // store the JSON, we could have out-of-order subid coming in
            _classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId] = response;
            l$c.debug(() => `Unable to find handler for subscription=${subId}`);
            return;
          } // housekeeping


          delete _classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId];

          try {
            const result = _classPrivateFieldBase(this, _coder)[_coder].decodeResponse(response);

            handler.callback(null, result);
          } catch (error) {
            handler.callback(error, undefined);
          }
        }
      });
      Object.defineProperty(this, _onSocketOpen, {
        writable: true,
        value: () => {
          assert$a(!isNull(_classPrivateFieldBase(this, _websocket)[_websocket]), 'WebSocket cannot be null in onOpen');
          l$c.debug(() => ['connected to', _classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]]);
          _classPrivateFieldBase(this, _isConnected)[_isConnected] = true;

          _classPrivateFieldBase(this, _emit)[_emit]('connected');

          _classPrivateFieldBase(this, _resubscribe)[_resubscribe]();

          return true;
        }
      });
      Object.defineProperty(this, _resubscribe, {
        writable: true,
        value: () => {
          const subscriptions = _classPrivateFieldBase(this, _subscriptions$1)[_subscriptions$1];

          _classPrivateFieldBase(this, _subscriptions$1)[_subscriptions$1] = {};
          Promise.all(Object.keys(subscriptions).map(async id => {
            const {
              callback,
              method,
              params,
              type
            } = subscriptions[id]; // only re-create subscriptions which are not in author (only area where
            // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
            // are not included (and will not be re-broadcast)

            if (type.startsWith('author_')) {
              return;
            }

            try {
              await this.subscribe(type, method, params, callback);
            } catch (error) {
              l$c.error(error);
            }
          })).catch(l$c.error);
        }
      });
      const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
      assert$a(endpoints.length !== 0, 'WsProvider requires at least one Endpoint');
      endpoints.forEach(endpoint => {
        assert$a(/^(wss|ws):\/\//.test(endpoint), `Endpoint should start with 'ws://', received '${endpoint}'`);
      });
      _classPrivateFieldBase(this, _eventemitter$1)[_eventemitter$1] = new eventemitter3();
      _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] = autoConnectMs || 0;
      _classPrivateFieldBase(this, _coder)[_coder] = new RpcCoder();
      _classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] = -1;
      _classPrivateFieldBase(this, _endpoints)[_endpoints] = endpoints;
      _classPrivateFieldBase(this, _headers)[_headers] = headers;
      _classPrivateFieldBase(this, _websocket)[_websocket] = null;

      if (autoConnectMs > 0) {
        this.connectWithRetry().catch(() => {// does not throw
        });
      }

      _classPrivateFieldBase(this, _isReadyPromise$1)[_isReadyPromise$1] = new Promise(resolve => {
        _classPrivateFieldBase(this, _eventemitter$1)[_eventemitter$1].once('connected', () => {
          resolve(this);
        });
      });
    }
    /**
     * @summary `true` when this provider supports subscriptions
     */


    get hasSubscriptions() {
      return true;
    }
    /**
     * @summary Whether the node is connected or not.
     * @return {boolean} true if connected
     */


    get isConnected() {
      return _classPrivateFieldBase(this, _isConnected)[_isConnected];
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */


    get isReady() {
      return _classPrivateFieldBase(this, _isReadyPromise$1)[_isReadyPromise$1];
    }
    /**
     * @description Returns a clone of the object
     */


    clone() {
      return new WsProvider(_classPrivateFieldBase(this, _endpoints)[_endpoints]);
    }
    /**
     * @summary Manually connect
     * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
     * connect manually using this method.
     */
    // eslint-disable-next-line @typescript-eslint/require-await


    async connect() {
      try {
        _classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] = (_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] + 1) % _classPrivateFieldBase(this, _endpoints)[_endpoints].length;
        _classPrivateFieldBase(this, _websocket)[_websocket] = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket, xWs.WebSocket) ? new xWs.WebSocket(_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore - WS may be an instance of w3cwebsocket, which supports headers
        : new xWs.WebSocket(_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]], undefined, undefined, _classPrivateFieldBase(this, _headers)[_headers], undefined, {
          // default: true
          fragmentOutgoingMessages: true,
          // default: 16K
          fragmentationThreshold: 256 * 1024
        });
        _classPrivateFieldBase(this, _websocket)[_websocket].onclose = _classPrivateFieldBase(this, _onSocketClose)[_onSocketClose];
        _classPrivateFieldBase(this, _websocket)[_websocket].onerror = _classPrivateFieldBase(this, _onSocketError)[_onSocketError];
        _classPrivateFieldBase(this, _websocket)[_websocket].onmessage = _classPrivateFieldBase(this, _onSocketMessage)[_onSocketMessage];
        _classPrivateFieldBase(this, _websocket)[_websocket].onopen = _classPrivateFieldBase(this, _onSocketOpen)[_onSocketOpen];
      } catch (error) {
        l$c.error(error);

        _classPrivateFieldBase(this, _emit)[_emit]('error', error);

        throw error;
      }
    }
    /**
     * @description Connect, never throwing an error, but rather forcing a retry
     */


    async connectWithRetry() {
      if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
        try {
          await this.connect();
        } catch (error) {
          setTimeout(() => {
            this.connectWithRetry().catch(() => {// does not throw
            });
          }, _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs]);
        }
      }
    }
    /**
     * @description Manually disconnect from the connection, clearing autoconnect logic
     */
    // eslint-disable-next-line @typescript-eslint/require-await


    async disconnect() {
      try {
        assert$a(!isNull(_classPrivateFieldBase(this, _websocket)[_websocket]), 'Cannot disconnect on a non-connected websocket'); // switch off autoConnect, we are in manual mode now

        _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] = 0; // 1000 - Normal closure; the connection successfully completed

        _classPrivateFieldBase(this, _websocket)[_websocket].close(1000);

        _classPrivateFieldBase(this, _websocket)[_websocket] = null;
      } catch (error) {
        l$c.error(error);

        _classPrivateFieldBase(this, _emit)[_emit]('error', error);

        throw error;
      }
    }
    /**
     * @summary Listens on events after having subscribed using the [[subscribe]] function.
     * @param  {ProviderInterfaceEmitted} type Event
     * @param  {ProviderInterfaceEmitCb}  sub  Callback
     * @return unsubscribe function
     */


    on(type, sub) {
      _classPrivateFieldBase(this, _eventemitter$1)[_eventemitter$1].on(type, sub);

      return () => {
        _classPrivateFieldBase(this, _eventemitter$1)[_eventemitter$1].removeListener(type, sub);
      };
    }
    /**
     * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
     * @param method The RPC methods to execute
     * @param params Encoded parameters as applicable for the method
     * @param subscription Subscription details (internally used)
     */


    send(method, params, subscription) {
      return new Promise((resolve, reject) => {
        try {
          assert$a(this.isConnected && !isNull(_classPrivateFieldBase(this, _websocket)[_websocket]), 'WebSocket is not connected');

          const json = _classPrivateFieldBase(this, _coder)[_coder].encodeJson(method, params);

          const id = _classPrivateFieldBase(this, _coder)[_coder].getId();

          const callback = (error, result) => {
            error ? reject(error) : resolve(result);
          };

          l$c.debug(() => ['calling', method, json]);
          _classPrivateFieldBase(this, _handlers)[_handlers][id] = {
            callback,
            method,
            params,
            subscription
          };

          _classPrivateFieldBase(this, _websocket)[_websocket].send(json);
        } catch (error) {
          reject(error);
        }
      });
    }
    /**
     * @name subscribe
     * @summary Allows subscribing to a specific event.
     * @param  {string}                     type     Subscription type
     * @param  {string}                     method   Subscription method
     * @param  {any[]}                 params   Parameters
     * @param  {ProviderInterfaceCallback} callback Callback
     * @return {Promise<number>}                     Promise resolving to the dd of the subscription you can use with [[unsubscribe]].
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const rpc = new Rpc(provider);
     *
     * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
     *   console.log(values)
     * }).then((subscriptionId) => {
     *   console.log('balance changes subscription id: ', subscriptionId)
     * })
     * ```
     */


    subscribe(type, method, params, callback) {
      return this.send(method, params, {
        callback,
        type
      });
    }
    /**
     * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
     */


    async unsubscribe(type, method, id) {
      const subscription = `${type}::${id}`; // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
      // the assigned id now does not match what the API user originally received. It has
      // a slight complication in solving - since we cannot rely on the send id, but rather
      // need to find the actual subscription id to map it

      if (isUndefined(_classPrivateFieldBase(this, _subscriptions$1)[_subscriptions$1][subscription])) {
        l$c.debug(() => `Unable to find active subscription=${subscription}`);
        return false;
      }

      delete _classPrivateFieldBase(this, _subscriptions$1)[_subscriptions$1][subscription];

      try {
        return this.isConnected && !isNull(_classPrivateFieldBase(this, _websocket)[_websocket]) ? this.send(method, [id]) : true;
      } catch (error) {
        return false;
      }
    }

  }

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isFunction(x) {
      return typeof x === 'function';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var _enable_super_gross_mode_that_will_cause_bad_things = false;
  var config = {
      Promise: undefined,
      set useDeprecatedSynchronousErrorHandling(value) {
          if (value) {
              var error = /*@__PURE__*/ new Error();
              /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
          }
          _enable_super_gross_mode_that_will_cause_bad_things = value;
      },
      get useDeprecatedSynchronousErrorHandling() {
          return _enable_super_gross_mode_that_will_cause_bad_things;
      },
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function hostReportError(err) {
      setTimeout(function () { throw err; }, 0);
  }

  /** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
  var empty$2 = {
      closed: true,
      next: function (value) { },
      error: function (err) {
          if (config.useDeprecatedSynchronousErrorHandling) {
              throw err;
          }
          else {
              hostReportError(err);
          }
      },
      complete: function () { }
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var isArray = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isObject(x) {
      return x !== null && typeof x === 'object';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
      function UnsubscriptionErrorImpl(errors) {
          Error.call(this);
          this.message = errors ?
              errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
          this.name = 'UnsubscriptionError';
          this.errors = errors;
          return this;
      }
      UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
      return UnsubscriptionErrorImpl;
  })();
  var UnsubscriptionError = UnsubscriptionErrorImpl;

  /** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */
  var Subscription = /*@__PURE__*/ (function () {
      function Subscription(unsubscribe) {
          this.closed = false;
          this._parentOrParents = null;
          this._subscriptions = null;
          if (unsubscribe) {
              this._ctorUnsubscribe = true;
              this._unsubscribe = unsubscribe;
          }
      }
      Subscription.prototype.unsubscribe = function () {
          var errors;
          if (this.closed) {
              return;
          }
          var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
          this.closed = true;
          this._parentOrParents = null;
          this._subscriptions = null;
          if (_parentOrParents instanceof Subscription) {
              _parentOrParents.remove(this);
          }
          else if (_parentOrParents !== null) {
              for (var index = 0; index < _parentOrParents.length; ++index) {
                  var parent_1 = _parentOrParents[index];
                  parent_1.remove(this);
              }
          }
          if (isFunction(_unsubscribe)) {
              if (_ctorUnsubscribe) {
                  this._unsubscribe = undefined;
              }
              try {
                  _unsubscribe.call(this);
              }
              catch (e) {
                  errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
              }
          }
          if (isArray(_subscriptions)) {
              var index = -1;
              var len = _subscriptions.length;
              while (++index < len) {
                  var sub = _subscriptions[index];
                  if (isObject(sub)) {
                      try {
                          sub.unsubscribe();
                      }
                      catch (e) {
                          errors = errors || [];
                          if (e instanceof UnsubscriptionError) {
                              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                          }
                          else {
                              errors.push(e);
                          }
                      }
                  }
              }
          }
          if (errors) {
              throw new UnsubscriptionError(errors);
          }
      };
      Subscription.prototype.add = function (teardown) {
          var subscription = teardown;
          if (!teardown) {
              return Subscription.EMPTY;
          }
          switch (typeof teardown) {
              case 'function':
                  subscription = new Subscription(teardown);
              case 'object':
                  if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                      return subscription;
                  }
                  else if (this.closed) {
                      subscription.unsubscribe();
                      return subscription;
                  }
                  else if (!(subscription instanceof Subscription)) {
                      var tmp = subscription;
                      subscription = new Subscription();
                      subscription._subscriptions = [tmp];
                  }
                  break;
              default: {
                  throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
              }
          }
          var _parentOrParents = subscription._parentOrParents;
          if (_parentOrParents === null) {
              subscription._parentOrParents = this;
          }
          else if (_parentOrParents instanceof Subscription) {
              if (_parentOrParents === this) {
                  return subscription;
              }
              subscription._parentOrParents = [_parentOrParents, this];
          }
          else if (_parentOrParents.indexOf(this) === -1) {
              _parentOrParents.push(this);
          }
          else {
              return subscription;
          }
          var subscriptions = this._subscriptions;
          if (subscriptions === null) {
              this._subscriptions = [subscription];
          }
          else {
              subscriptions.push(subscription);
          }
          return subscription;
      };
      Subscription.prototype.remove = function (subscription) {
          var subscriptions = this._subscriptions;
          if (subscriptions) {
              var subscriptionIndex = subscriptions.indexOf(subscription);
              if (subscriptionIndex !== -1) {
                  subscriptions.splice(subscriptionIndex, 1);
              }
          }
      };
      Subscription.EMPTY = (function (empty) {
          empty.closed = true;
          return empty;
      }(new Subscription()));
      return Subscription;
  }());
  function flattenUnsubscriptionErrors(errors) {
      return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var rxSubscriber = /*@__PURE__*/ (function () {
      return typeof Symbol === 'function'
          ? /*@__PURE__*/ Symbol('rxSubscriber')
          : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
  })();

  /** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
  var Subscriber = /*@__PURE__*/ (function (_super) {
      __extends(Subscriber, _super);
      function Subscriber(destinationOrNext, error, complete) {
          var _this = _super.call(this) || this;
          _this.syncErrorValue = null;
          _this.syncErrorThrown = false;
          _this.syncErrorThrowable = false;
          _this.isStopped = false;
          switch (arguments.length) {
              case 0:
                  _this.destination = empty$2;
                  break;
              case 1:
                  if (!destinationOrNext) {
                      _this.destination = empty$2;
                      break;
                  }
                  if (typeof destinationOrNext === 'object') {
                      if (destinationOrNext instanceof Subscriber) {
                          _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                          _this.destination = destinationOrNext;
                          destinationOrNext.add(_this);
                      }
                      else {
                          _this.syncErrorThrowable = true;
                          _this.destination = new SafeSubscriber(_this, destinationOrNext);
                      }
                      break;
                  }
              default:
                  _this.syncErrorThrowable = true;
                  _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                  break;
          }
          return _this;
      }
      Subscriber.prototype[rxSubscriber] = function () { return this; };
      Subscriber.create = function (next, error, complete) {
          var subscriber = new Subscriber(next, error, complete);
          subscriber.syncErrorThrowable = false;
          return subscriber;
      };
      Subscriber.prototype.next = function (value) {
          if (!this.isStopped) {
              this._next(value);
          }
      };
      Subscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              this.isStopped = true;
              this._error(err);
          }
      };
      Subscriber.prototype.complete = function () {
          if (!this.isStopped) {
              this.isStopped = true;
              this._complete();
          }
      };
      Subscriber.prototype.unsubscribe = function () {
          if (this.closed) {
              return;
          }
          this.isStopped = true;
          _super.prototype.unsubscribe.call(this);
      };
      Subscriber.prototype._next = function (value) {
          this.destination.next(value);
      };
      Subscriber.prototype._error = function (err) {
          this.destination.error(err);
          this.unsubscribe();
      };
      Subscriber.prototype._complete = function () {
          this.destination.complete();
          this.unsubscribe();
      };
      Subscriber.prototype._unsubscribeAndRecycle = function () {
          var _parentOrParents = this._parentOrParents;
          this._parentOrParents = null;
          this.unsubscribe();
          this.closed = false;
          this.isStopped = false;
          this._parentOrParents = _parentOrParents;
          return this;
      };
      return Subscriber;
  }(Subscription));
  var SafeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SafeSubscriber, _super);
      function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
          var _this = _super.call(this) || this;
          _this._parentSubscriber = _parentSubscriber;
          var next;
          var context = _this;
          if (isFunction(observerOrNext)) {
              next = observerOrNext;
          }
          else if (observerOrNext) {
              next = observerOrNext.next;
              error = observerOrNext.error;
              complete = observerOrNext.complete;
              if (observerOrNext !== empty$2) {
                  context = Object.create(observerOrNext);
                  if (isFunction(context.unsubscribe)) {
                      _this.add(context.unsubscribe.bind(context));
                  }
                  context.unsubscribe = _this.unsubscribe.bind(_this);
              }
          }
          _this._context = context;
          _this._next = next;
          _this._error = error;
          _this._complete = complete;
          return _this;
      }
      SafeSubscriber.prototype.next = function (value) {
          if (!this.isStopped && this._next) {
              var _parentSubscriber = this._parentSubscriber;
              if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                  this.__tryOrUnsub(this._next, value);
              }
              else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;
              var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
              if (this._error) {
                  if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                      this.__tryOrUnsub(this._error, err);
                      this.unsubscribe();
                  }
                  else {
                      this.__tryOrSetError(_parentSubscriber, this._error, err);
                      this.unsubscribe();
                  }
              }
              else if (!_parentSubscriber.syncErrorThrowable) {
                  this.unsubscribe();
                  if (useDeprecatedSynchronousErrorHandling) {
                      throw err;
                  }
                  hostReportError(err);
              }
              else {
                  if (useDeprecatedSynchronousErrorHandling) {
                      _parentSubscriber.syncErrorValue = err;
                      _parentSubscriber.syncErrorThrown = true;
                  }
                  else {
                      hostReportError(err);
                  }
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.complete = function () {
          var _this = this;
          if (!this.isStopped) {
              var _parentSubscriber = this._parentSubscriber;
              if (this._complete) {
                  var wrappedComplete = function () { return _this._complete.call(_this._context); };
                  if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                      this.__tryOrUnsub(wrappedComplete);
                      this.unsubscribe();
                  }
                  else {
                      this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                      this.unsubscribe();
                  }
              }
              else {
                  this.unsubscribe();
              }
          }
      };
      SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
          try {
              fn.call(this._context, value);
          }
          catch (err) {
              this.unsubscribe();
              if (config.useDeprecatedSynchronousErrorHandling) {
                  throw err;
              }
              else {
                  hostReportError(err);
              }
          }
      };
      SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
          if (!config.useDeprecatedSynchronousErrorHandling) {
              throw new Error('bad call');
          }
          try {
              fn.call(this._context, value);
          }
          catch (err) {
              if (config.useDeprecatedSynchronousErrorHandling) {
                  parent.syncErrorValue = err;
                  parent.syncErrorThrown = true;
                  return true;
              }
              else {
                  hostReportError(err);
                  return true;
              }
          }
          return false;
      };
      SafeSubscriber.prototype._unsubscribe = function () {
          var _parentSubscriber = this._parentSubscriber;
          this._context = null;
          this._parentSubscriber = null;
          _parentSubscriber.unsubscribe();
      };
      return SafeSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
  function canReportError(observer) {
      while (observer) {
          var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
          if (closed_1 || isStopped) {
              return false;
          }
          else if (destination && destination instanceof Subscriber) {
              observer = destination;
          }
          else {
              observer = null;
          }
      }
      return true;
  }

  /** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
  function toSubscriber(nextOrObserver, error, complete) {
      if (nextOrObserver) {
          if (nextOrObserver instanceof Subscriber) {
              return nextOrObserver;
          }
          if (nextOrObserver[rxSubscriber]) {
              return nextOrObserver[rxSubscriber]();
          }
      }
      if (!nextOrObserver && !error && !complete) {
          return new Subscriber(empty$2);
      }
      return new Subscriber(nextOrObserver, error, complete);
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function identity$2(x) {
      return x;
  }

  /** PURE_IMPORTS_START _identity PURE_IMPORTS_END */
  function pipe() {
      var fns = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          fns[_i] = arguments[_i];
      }
      return pipeFromArray(fns);
  }
  function pipeFromArray(fns) {
      if (fns.length === 0) {
          return identity$2;
      }
      if (fns.length === 1) {
          return fns[0];
      }
      return function piped(input) {
          return fns.reduce(function (prev, fn) { return fn(prev); }, input);
      };
  }

  /** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
  var Observable = /*@__PURE__*/ (function () {
      function Observable(subscribe) {
          this._isScalar = false;
          if (subscribe) {
              this._subscribe = subscribe;
          }
      }
      Observable.prototype.lift = function (operator) {
          var observable = new Observable();
          observable.source = this;
          observable.operator = operator;
          return observable;
      };
      Observable.prototype.subscribe = function (observerOrNext, error, complete) {
          var operator = this.operator;
          var sink = toSubscriber(observerOrNext, error, complete);
          if (operator) {
              sink.add(operator.call(sink, this.source));
          }
          else {
              sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                  this._subscribe(sink) :
                  this._trySubscribe(sink));
          }
          if (config.useDeprecatedSynchronousErrorHandling) {
              if (sink.syncErrorThrowable) {
                  sink.syncErrorThrowable = false;
                  if (sink.syncErrorThrown) {
                      throw sink.syncErrorValue;
                  }
              }
          }
          return sink;
      };
      Observable.prototype._trySubscribe = function (sink) {
          try {
              return this._subscribe(sink);
          }
          catch (err) {
              if (config.useDeprecatedSynchronousErrorHandling) {
                  sink.syncErrorThrown = true;
                  sink.syncErrorValue = err;
              }
              if (canReportError(sink)) {
                  sink.error(err);
              }
              else {
                  console.warn(err);
              }
          }
      };
      Observable.prototype.forEach = function (next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var subscription;
              subscription = _this.subscribe(function (value) {
                  try {
                      next(value);
                  }
                  catch (err) {
                      reject(err);
                      if (subscription) {
                          subscription.unsubscribe();
                      }
                  }
              }, reject, resolve);
          });
      };
      Observable.prototype._subscribe = function (subscriber) {
          var source = this.source;
          return source && source.subscribe(subscriber);
      };
      Observable.prototype[observable] = function () {
          return this;
      };
      Observable.prototype.pipe = function () {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              operations[_i] = arguments[_i];
          }
          if (operations.length === 0) {
              return this;
          }
          return pipeFromArray(operations)(this);
      };
      Observable.prototype.toPromise = function (promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var value;
              _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
          });
      };
      Observable.create = function (subscribe) {
          return new Observable(subscribe);
      };
      return Observable;
  }());
  function getPromiseCtor(promiseCtor) {
      if (!promiseCtor) {
          promiseCtor = Promise;
      }
      if (!promiseCtor) {
          throw new Error('no Promise impl found');
      }
      return promiseCtor;
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {
      function ObjectUnsubscribedErrorImpl() {
          Error.call(this);
          this.message = 'object unsubscribed';
          this.name = 'ObjectUnsubscribedError';
          return this;
      }
      ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
      return ObjectUnsubscribedErrorImpl;
  })();
  var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

  /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
  var SubjectSubscription = /*@__PURE__*/ (function (_super) {
      __extends(SubjectSubscription, _super);
      function SubjectSubscription(subject, subscriber) {
          var _this = _super.call(this) || this;
          _this.subject = subject;
          _this.subscriber = subscriber;
          _this.closed = false;
          return _this;
      }
      SubjectSubscription.prototype.unsubscribe = function () {
          if (this.closed) {
              return;
          }
          this.closed = true;
          var subject = this.subject;
          var observers = subject.observers;
          this.subject = null;
          if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
              return;
          }
          var subscriberIndex = observers.indexOf(this.subscriber);
          if (subscriberIndex !== -1) {
              observers.splice(subscriberIndex, 1);
          }
      };
      return SubjectSubscription;
  }(Subscription));

  /** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
  var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SubjectSubscriber, _super);
      function SubjectSubscriber(destination) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          return _this;
      }
      return SubjectSubscriber;
  }(Subscriber));
  var Subject = /*@__PURE__*/ (function (_super) {
      __extends(Subject, _super);
      function Subject() {
          var _this = _super.call(this) || this;
          _this.observers = [];
          _this.closed = false;
          _this.isStopped = false;
          _this.hasError = false;
          _this.thrownError = null;
          return _this;
      }
      Subject.prototype[rxSubscriber] = function () {
          return new SubjectSubscriber(this);
      };
      Subject.prototype.lift = function (operator) {
          var subject = new AnonymousSubject(this, this);
          subject.operator = operator;
          return subject;
      };
      Subject.prototype.next = function (value) {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          if (!this.isStopped) {
              var observers = this.observers;
              var len = observers.length;
              var copy = observers.slice();
              for (var i = 0; i < len; i++) {
                  copy[i].next(value);
              }
          }
      };
      Subject.prototype.error = function (err) {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          this.hasError = true;
          this.thrownError = err;
          this.isStopped = true;
          var observers = this.observers;
          var len = observers.length;
          var copy = observers.slice();
          for (var i = 0; i < len; i++) {
              copy[i].error(err);
          }
          this.observers.length = 0;
      };
      Subject.prototype.complete = function () {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          this.isStopped = true;
          var observers = this.observers;
          var len = observers.length;
          var copy = observers.slice();
          for (var i = 0; i < len; i++) {
              copy[i].complete();
          }
          this.observers.length = 0;
      };
      Subject.prototype.unsubscribe = function () {
          this.isStopped = true;
          this.closed = true;
          this.observers = null;
      };
      Subject.prototype._trySubscribe = function (subscriber) {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          else {
              return _super.prototype._trySubscribe.call(this, subscriber);
          }
      };
      Subject.prototype._subscribe = function (subscriber) {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          else if (this.hasError) {
              subscriber.error(this.thrownError);
              return Subscription.EMPTY;
          }
          else if (this.isStopped) {
              subscriber.complete();
              return Subscription.EMPTY;
          }
          else {
              this.observers.push(subscriber);
              return new SubjectSubscription(this, subscriber);
          }
      };
      Subject.prototype.asObservable = function () {
          var observable = new Observable();
          observable.source = this;
          return observable;
      };
      Subject.create = function (destination, source) {
          return new AnonymousSubject(destination, source);
      };
      return Subject;
  }(Observable));
  var AnonymousSubject = /*@__PURE__*/ (function (_super) {
      __extends(AnonymousSubject, _super);
      function AnonymousSubject(destination, source) {
          var _this = _super.call(this) || this;
          _this.destination = destination;
          _this.source = source;
          return _this;
      }
      AnonymousSubject.prototype.next = function (value) {
          var destination = this.destination;
          if (destination && destination.next) {
              destination.next(value);
          }
      };
      AnonymousSubject.prototype.error = function (err) {
          var destination = this.destination;
          if (destination && destination.error) {
              this.destination.error(err);
          }
      };
      AnonymousSubject.prototype.complete = function () {
          var destination = this.destination;
          if (destination && destination.complete) {
              this.destination.complete();
          }
      };
      AnonymousSubject.prototype._subscribe = function (subscriber) {
          var source = this.source;
          if (source) {
              return this.source.subscribe(subscriber);
          }
          else {
              return Subscription.EMPTY;
          }
      };
      return AnonymousSubject;
  }(Subject));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function refCount() {
      return function refCountOperatorFunction(source) {
          return source.lift(new RefCountOperator(source));
      };
  }
  var RefCountOperator = /*@__PURE__*/ (function () {
      function RefCountOperator(connectable) {
          this.connectable = connectable;
      }
      RefCountOperator.prototype.call = function (subscriber, source) {
          var connectable = this.connectable;
          connectable._refCount++;
          var refCounter = new RefCountSubscriber(subscriber, connectable);
          var subscription = source.subscribe(refCounter);
          if (!refCounter.closed) {
              refCounter.connection = connectable.connect();
          }
          return subscription;
      };
      return RefCountOperator;
  }());
  var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(RefCountSubscriber, _super);
      function RefCountSubscriber(destination, connectable) {
          var _this = _super.call(this, destination) || this;
          _this.connectable = connectable;
          return _this;
      }
      RefCountSubscriber.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (!connectable) {
              this.connection = null;
              return;
          }
          this.connectable = null;
          var refCount = connectable._refCount;
          if (refCount <= 0) {
              this.connection = null;
              return;
          }
          connectable._refCount = refCount - 1;
          if (refCount > 1) {
              this.connection = null;
              return;
          }
          var connection = this.connection;
          var sharedConnection = connectable._connection;
          this.connection = null;
          if (sharedConnection && (!connection || sharedConnection === connection)) {
              sharedConnection.unsubscribe();
          }
      };
      return RefCountSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
  var ConnectableObservable = /*@__PURE__*/ (function (_super) {
      __extends(ConnectableObservable, _super);
      function ConnectableObservable(source, subjectFactory) {
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.subjectFactory = subjectFactory;
          _this._refCount = 0;
          _this._isComplete = false;
          return _this;
      }
      ConnectableObservable.prototype._subscribe = function (subscriber) {
          return this.getSubject().subscribe(subscriber);
      };
      ConnectableObservable.prototype.getSubject = function () {
          var subject = this._subject;
          if (!subject || subject.isStopped) {
              this._subject = this.subjectFactory();
          }
          return this._subject;
      };
      ConnectableObservable.prototype.connect = function () {
          var connection = this._connection;
          if (!connection) {
              this._isComplete = false;
              connection = this._connection = new Subscription();
              connection.add(this.source
                  .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
              if (connection.closed) {
                  this._connection = null;
                  connection = Subscription.EMPTY;
              }
          }
          return connection;
      };
      ConnectableObservable.prototype.refCount = function () {
          return refCount()(this);
      };
      return ConnectableObservable;
  }(Observable));
  var connectableObservableDescriptor = /*@__PURE__*/ (function () {
      var connectableProto = ConnectableObservable.prototype;
      return {
          operator: { value: null },
          _refCount: { value: 0, writable: true },
          _subject: { value: null, writable: true },
          _connection: { value: null, writable: true },
          _subscribe: { value: connectableProto._subscribe },
          _isComplete: { value: connectableProto._isComplete, writable: true },
          getSubject: { value: connectableProto.getSubject },
          connect: { value: connectableProto.connect },
          refCount: { value: connectableProto.refCount }
      };
  })();
  var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ConnectableSubscriber, _super);
      function ConnectableSubscriber(destination, connectable) {
          var _this = _super.call(this, destination) || this;
          _this.connectable = connectable;
          return _this;
      }
      ConnectableSubscriber.prototype._error = function (err) {
          this._unsubscribe();
          _super.prototype._error.call(this, err);
      };
      ConnectableSubscriber.prototype._complete = function () {
          this.connectable._isComplete = true;
          this._unsubscribe();
          _super.prototype._complete.call(this);
      };
      ConnectableSubscriber.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (connectable) {
              this.connectable = null;
              var connection = connectable._connection;
              connectable._refCount = 0;
              connectable._subject = null;
              connectable._connection = null;
              if (connection) {
                  connection.unsubscribe();
              }
          }
      };
      return ConnectableSubscriber;
  }(SubjectSubscriber));

  /** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
  var BehaviorSubject = /*@__PURE__*/ (function (_super) {
      __extends(BehaviorSubject, _super);
      function BehaviorSubject(_value) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          return _this;
      }
      Object.defineProperty(BehaviorSubject.prototype, "value", {
          get: function () {
              return this.getValue();
          },
          enumerable: true,
          configurable: true
      });
      BehaviorSubject.prototype._subscribe = function (subscriber) {
          var subscription = _super.prototype._subscribe.call(this, subscriber);
          if (subscription && !subscription.closed) {
              subscriber.next(this._value);
          }
          return subscription;
      };
      BehaviorSubject.prototype.getValue = function () {
          if (this.hasError) {
              throw this.thrownError;
          }
          else if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          else {
              return this._value;
          }
      };
      BehaviorSubject.prototype.next = function (value) {
          _super.prototype.next.call(this, this._value = value);
      };
      return BehaviorSubject;
  }(Subject));

  /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
  var Action = /*@__PURE__*/ (function (_super) {
      __extends(Action, _super);
      function Action(scheduler, work) {
          return _super.call(this) || this;
      }
      Action.prototype.schedule = function (state, delay) {
          return this;
      };
      return Action;
  }(Subscription));

  /** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
  var AsyncAction = /*@__PURE__*/ (function (_super) {
      __extends(AsyncAction, _super);
      function AsyncAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.pending = false;
          return _this;
      }
      AsyncAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (this.closed) {
              return this;
          }
          this.state = state;
          var id = this.id;
          var scheduler = this.scheduler;
          if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, delay);
          }
          this.pending = true;
          this.delay = delay;
          this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
          return this;
      };
      AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          return setInterval(scheduler.flush.bind(scheduler, this), delay);
      };
      AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (delay !== null && this.delay === delay && this.pending === false) {
              return id;
          }
          clearInterval(id);
          return undefined;
      };
      AsyncAction.prototype.execute = function (state, delay) {
          if (this.closed) {
              return new Error('executing a cancelled action');
          }
          this.pending = false;
          var error = this._execute(state, delay);
          if (error) {
              return error;
          }
          else if (this.pending === false && this.id != null) {
              this.id = this.recycleAsyncId(this.scheduler, this.id, null);
          }
      };
      AsyncAction.prototype._execute = function (state, delay) {
          var errored = false;
          var errorValue = undefined;
          try {
              this.work(state);
          }
          catch (e) {
              errored = true;
              errorValue = !!e && e || new Error(e);
          }
          if (errored) {
              this.unsubscribe();
              return errorValue;
          }
      };
      AsyncAction.prototype._unsubscribe = function () {
          var id = this.id;
          var scheduler = this.scheduler;
          var actions = scheduler.actions;
          var index = actions.indexOf(this);
          this.work = null;
          this.state = null;
          this.pending = false;
          this.scheduler = null;
          if (index !== -1) {
              actions.splice(index, 1);
          }
          if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, null);
          }
          this.delay = null;
      };
      return AsyncAction;
  }(Action));

  /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
  var QueueAction = /*@__PURE__*/ (function (_super) {
      __extends(QueueAction, _super);
      function QueueAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      QueueAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (delay > 0) {
              return _super.prototype.schedule.call(this, state, delay);
          }
          this.delay = delay;
          this.state = state;
          this.scheduler.flush(this);
          return this;
      };
      QueueAction.prototype.execute = function (state, delay) {
          return (delay > 0 || this.closed) ?
              _super.prototype.execute.call(this, state, delay) :
              this._execute(state, delay);
      };
      QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          return scheduler.flush(this);
      };
      return QueueAction;
  }(AsyncAction));

  var Scheduler = /*@__PURE__*/ (function () {
      function Scheduler(SchedulerAction, now) {
          if (now === void 0) {
              now = Scheduler.now;
          }
          this.SchedulerAction = SchedulerAction;
          this.now = now;
      }
      Scheduler.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) {
              delay = 0;
          }
          return new this.SchedulerAction(this, work).schedule(state, delay);
      };
      Scheduler.now = function () { return Date.now(); };
      return Scheduler;
  }());

  /** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
  var AsyncScheduler = /*@__PURE__*/ (function (_super) {
      __extends(AsyncScheduler, _super);
      function AsyncScheduler(SchedulerAction, now) {
          if (now === void 0) {
              now = Scheduler.now;
          }
          var _this = _super.call(this, SchedulerAction, function () {
              if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                  return AsyncScheduler.delegate.now();
              }
              else {
                  return now();
              }
          }) || this;
          _this.actions = [];
          _this.active = false;
          _this.scheduled = undefined;
          return _this;
      }
      AsyncScheduler.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) {
              delay = 0;
          }
          if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
              return AsyncScheduler.delegate.schedule(work, delay, state);
          }
          else {
              return _super.prototype.schedule.call(this, work, delay, state);
          }
      };
      AsyncScheduler.prototype.flush = function (action) {
          var actions = this.actions;
          if (this.active) {
              actions.push(action);
              return;
          }
          var error;
          this.active = true;
          do {
              if (error = action.execute(action.state, action.delay)) {
                  break;
              }
          } while (action = actions.shift());
          this.active = false;
          if (error) {
              while (action = actions.shift()) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AsyncScheduler;
  }(Scheduler));

  /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
  var QueueScheduler = /*@__PURE__*/ (function (_super) {
      __extends(QueueScheduler, _super);
      function QueueScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return QueueScheduler;
  }(AsyncScheduler));

  /** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
  var queueScheduler = /*@__PURE__*/ new QueueScheduler(QueueAction);
  var queue = queueScheduler;

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
  var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
  function empty$1(scheduler) {
      return scheduler ? emptyScheduled(scheduler) : EMPTY;
  }
  function emptyScheduled(scheduler) {
      return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isScheduler(value) {
      return value && typeof value.schedule === 'function';
  }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var subscribeToArray = function (array) {
      return function (subscriber) {
          for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
              subscriber.next(array[i]);
          }
          subscriber.complete();
      };
  };

  /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
  function scheduleArray(input, scheduler) {
      return new Observable(function (subscriber) {
          var sub = new Subscription();
          var i = 0;
          sub.add(scheduler.schedule(function () {
              if (i === input.length) {
                  subscriber.complete();
                  return;
              }
              subscriber.next(input[i++]);
              if (!subscriber.closed) {
                  sub.add(this.schedule());
              }
          }));
          return sub;
      });
  }

  /** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */
  function fromArray(input, scheduler) {
      if (!scheduler) {
          return new Observable(subscribeToArray(input));
      }
      else {
          return scheduleArray(input, scheduler);
      }
  }

  /** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */
  function of() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      var scheduler = args[args.length - 1];
      if (isScheduler(scheduler)) {
          args.pop();
          return scheduleArray(args, scheduler);
      }
      else {
          return fromArray(args);
      }
  }

  /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
  function throwError(error, scheduler) {
      if (!scheduler) {
          return new Observable(function (subscriber) { return subscriber.error(error); });
      }
      else {
          return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
      }
  }
  function dispatch(_a) {
      var error = _a.error, subscriber = _a.subscriber;
      subscriber.error(error);
  }

  /** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
  var Notification = /*@__PURE__*/ (function () {
      function Notification(kind, value, error) {
          this.kind = kind;
          this.value = value;
          this.error = error;
          this.hasValue = kind === 'N';
      }
      Notification.prototype.observe = function (observer) {
          switch (this.kind) {
              case 'N':
                  return observer.next && observer.next(this.value);
              case 'E':
                  return observer.error && observer.error(this.error);
              case 'C':
                  return observer.complete && observer.complete();
          }
      };
      Notification.prototype.do = function (next, error, complete) {
          var kind = this.kind;
          switch (kind) {
              case 'N':
                  return next && next(this.value);
              case 'E':
                  return error && error(this.error);
              case 'C':
                  return complete && complete();
          }
      };
      Notification.prototype.accept = function (nextOrObserver, error, complete) {
          if (nextOrObserver && typeof nextOrObserver.next === 'function') {
              return this.observe(nextOrObserver);
          }
          else {
              return this.do(nextOrObserver, error, complete);
          }
      };
      Notification.prototype.toObservable = function () {
          var kind = this.kind;
          switch (kind) {
              case 'N':
                  return of(this.value);
              case 'E':
                  return throwError(this.error);
              case 'C':
                  return empty$1();
          }
          throw new Error('unexpected notification kind value');
      };
      Notification.createNext = function (value) {
          if (typeof value !== 'undefined') {
              return new Notification('N', value);
          }
          return Notification.undefinedValueNotification;
      };
      Notification.createError = function (err) {
          return new Notification('E', undefined, err);
      };
      Notification.createComplete = function () {
          return Notification.completeNotification;
      };
      Notification.completeNotification = new Notification('C');
      Notification.undefinedValueNotification = new Notification('N', undefined);
      return Notification;
  }());

  /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
  var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ObserveOnSubscriber, _super);
      function ObserveOnSubscriber(destination, scheduler, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          var _this = _super.call(this, destination) || this;
          _this.scheduler = scheduler;
          _this.delay = delay;
          return _this;
      }
      ObserveOnSubscriber.dispatch = function (arg) {
          var notification = arg.notification, destination = arg.destination;
          notification.observe(destination);
          this.unsubscribe();
      };
      ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
          var destination = this.destination;
          destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
      };
      ObserveOnSubscriber.prototype._next = function (value) {
          this.scheduleMessage(Notification.createNext(value));
      };
      ObserveOnSubscriber.prototype._error = function (err) {
          this.scheduleMessage(Notification.createError(err));
          this.unsubscribe();
      };
      ObserveOnSubscriber.prototype._complete = function () {
          this.scheduleMessage(Notification.createComplete());
          this.unsubscribe();
      };
      return ObserveOnSubscriber;
  }(Subscriber));
  var ObserveOnMessage = /*@__PURE__*/ (function () {
      function ObserveOnMessage(notification, destination) {
          this.notification = notification;
          this.destination = destination;
      }
      return ObserveOnMessage;
  }());

  /** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
  var ReplaySubject = /*@__PURE__*/ (function (_super) {
      __extends(ReplaySubject, _super);
      function ReplaySubject(bufferSize, windowTime, scheduler) {
          if (bufferSize === void 0) {
              bufferSize = Number.POSITIVE_INFINITY;
          }
          if (windowTime === void 0) {
              windowTime = Number.POSITIVE_INFINITY;
          }
          var _this = _super.call(this) || this;
          _this.scheduler = scheduler;
          _this._events = [];
          _this._infiniteTimeWindow = false;
          _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
          _this._windowTime = windowTime < 1 ? 1 : windowTime;
          if (windowTime === Number.POSITIVE_INFINITY) {
              _this._infiniteTimeWindow = true;
              _this.next = _this.nextInfiniteTimeWindow;
          }
          else {
              _this.next = _this.nextTimeWindow;
          }
          return _this;
      }
      ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
          if (!this.isStopped) {
              var _events = this._events;
              _events.push(value);
              if (_events.length > this._bufferSize) {
                  _events.shift();
              }
          }
          _super.prototype.next.call(this, value);
      };
      ReplaySubject.prototype.nextTimeWindow = function (value) {
          if (!this.isStopped) {
              this._events.push(new ReplayEvent(this._getNow(), value));
              this._trimBufferThenGetEvents();
          }
          _super.prototype.next.call(this, value);
      };
      ReplaySubject.prototype._subscribe = function (subscriber) {
          var _infiniteTimeWindow = this._infiniteTimeWindow;
          var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
          var scheduler = this.scheduler;
          var len = _events.length;
          var subscription;
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
          else if (this.isStopped || this.hasError) {
              subscription = Subscription.EMPTY;
          }
          else {
              this.observers.push(subscriber);
              subscription = new SubjectSubscription(this, subscriber);
          }
          if (scheduler) {
              subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
          }
          if (_infiniteTimeWindow) {
              for (var i = 0; i < len && !subscriber.closed; i++) {
                  subscriber.next(_events[i]);
              }
          }
          else {
              for (var i = 0; i < len && !subscriber.closed; i++) {
                  subscriber.next(_events[i].value);
              }
          }
          if (this.hasError) {
              subscriber.error(this.thrownError);
          }
          else if (this.isStopped) {
              subscriber.complete();
          }
          return subscription;
      };
      ReplaySubject.prototype._getNow = function () {
          return (this.scheduler || queue).now();
      };
      ReplaySubject.prototype._trimBufferThenGetEvents = function () {
          var now = this._getNow();
          var _bufferSize = this._bufferSize;
          var _windowTime = this._windowTime;
          var _events = this._events;
          var eventsCount = _events.length;
          var spliceCount = 0;
          while (spliceCount < eventsCount) {
              if ((now - _events[spliceCount].time) < _windowTime) {
                  break;
              }
              spliceCount++;
          }
          if (eventsCount > _bufferSize) {
              spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
          }
          if (spliceCount > 0) {
              _events.splice(0, spliceCount);
          }
          return _events;
      };
      return ReplaySubject;
  }(Subject));
  var ReplayEvent = /*@__PURE__*/ (function () {
      function ReplayEvent(time, value) {
          this.time = time;
          this.value = value;
      }
      return ReplayEvent;
  }());

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var nextHandle = 1;
  var RESOLVED = /*@__PURE__*/ (function () { return /*@__PURE__*/ Promise.resolve(); })();
  var activeHandles = {};
  function findAndClearHandle(handle) {
      if (handle in activeHandles) {
          delete activeHandles[handle];
          return true;
      }
      return false;
  }
  var Immediate = {
      setImmediate: function (cb) {
          var handle = nextHandle++;
          activeHandles[handle] = true;
          RESOLVED.then(function () { return findAndClearHandle(handle) && cb(); });
          return handle;
      },
      clearImmediate: function (handle) {
          findAndClearHandle(handle);
      },
  };

  /** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
  var AsapAction = /*@__PURE__*/ (function (_super) {
      __extends(AsapAction, _super);
      function AsapAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if (delay !== null && delay > 0) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          scheduler.actions.push(this);
          return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
      };
      AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
              delay = 0;
          }
          if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
              return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
          }
          if (scheduler.actions.length === 0) {
              Immediate.clearImmediate(id);
              scheduler.scheduled = undefined;
          }
          return undefined;
      };
      return AsapAction;
  }(AsyncAction));

  /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
  var AsapScheduler = /*@__PURE__*/ (function (_super) {
      __extends(AsapScheduler, _super);
      function AsapScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      AsapScheduler.prototype.flush = function (action) {
          this.active = true;
          this.scheduled = undefined;
          var actions = this.actions;
          var error;
          var index = -1;
          var count = actions.length;
          action = action || actions.shift();
          do {
              if (error = action.execute(action.state, action.delay)) {
                  break;
              }
          } while (++index < count && (action = actions.shift()));
          this.active = false;
          if (error) {
              while (++index < count && (action = actions.shift())) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AsapScheduler;
  }(AsyncScheduler));

  /** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
  var asapScheduler = /*@__PURE__*/ new AsapScheduler(AsapAction);

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function noop() { }

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var ArgumentOutOfRangeErrorImpl = /*@__PURE__*/ (function () {
      function ArgumentOutOfRangeErrorImpl() {
          Error.call(this);
          this.message = 'argument out of range';
          this.name = 'ArgumentOutOfRangeError';
          return this;
      }
      ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
      return ArgumentOutOfRangeErrorImpl;
  })();
  var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var EmptyErrorImpl = /*@__PURE__*/ (function () {
      function EmptyErrorImpl() {
          Error.call(this);
          this.message = 'no elements in sequence';
          this.name = 'EmptyError';
          return this;
      }
      EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
      return EmptyErrorImpl;
  })();
  var EmptyError = EmptyErrorImpl;

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function map(project, thisArg) {
      return function mapOperation(source) {
          if (typeof project !== 'function') {
              throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
          }
          return source.lift(new MapOperator(project, thisArg));
      };
  }
  var MapOperator = /*@__PURE__*/ (function () {
      function MapOperator(project, thisArg) {
          this.project = project;
          this.thisArg = thisArg;
      }
      MapOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
      };
      return MapOperator;
  }());
  var MapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MapSubscriber, _super);
      function MapSubscriber(destination, project, thisArg) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.count = 0;
          _this.thisArg = thisArg || _this;
          return _this;
      }
      MapSubscriber.prototype._next = function (value) {
          var result;
          try {
              result = this.project.call(this.thisArg, value, this.count++);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(result);
      };
      return MapSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var OuterSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(OuterSubscriber, _super);
      function OuterSubscriber() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
      };
      OuterSubscriber.prototype.notifyError = function (error, innerSub) {
          this.destination.error(error);
      };
      OuterSubscriber.prototype.notifyComplete = function (innerSub) {
          this.destination.complete();
      };
      return OuterSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  var InnerSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(InnerSubscriber, _super);
      function InnerSubscriber(parent, outerValue, outerIndex) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          _this.outerValue = outerValue;
          _this.outerIndex = outerIndex;
          _this.index = 0;
          return _this;
      }
      InnerSubscriber.prototype._next = function (value) {
          this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
      };
      InnerSubscriber.prototype._error = function (error) {
          this.parent.notifyError(error, this);
          this.unsubscribe();
      };
      InnerSubscriber.prototype._complete = function () {
          this.parent.notifyComplete(this);
          this.unsubscribe();
      };
      return InnerSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
  var subscribeToPromise = function (promise) {
      return function (subscriber) {
          promise.then(function (value) {
              if (!subscriber.closed) {
                  subscriber.next(value);
                  subscriber.complete();
              }
          }, function (err) { return subscriber.error(err); })
              .then(null, hostReportError);
          return subscriber;
      };
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function getSymbolIterator() {
      if (typeof Symbol !== 'function' || !Symbol.iterator) {
          return '@@iterator';
      }
      return Symbol.iterator;
  }
  var iterator = /*@__PURE__*/ getSymbolIterator();

  /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
  var subscribeToIterable = function (iterable) {
      return function (subscriber) {
          var iterator$1 = iterable[iterator]();
          do {
              var item = void 0;
              try {
                  item = iterator$1.next();
              }
              catch (err) {
                  subscriber.error(err);
                  return subscriber;
              }
              if (item.done) {
                  subscriber.complete();
                  break;
              }
              subscriber.next(item.value);
              if (subscriber.closed) {
                  break;
              }
          } while (true);
          if (typeof iterator$1.return === 'function') {
              subscriber.add(function () {
                  if (iterator$1.return) {
                      iterator$1.return();
                  }
              });
          }
          return subscriber;
      };
  };

  /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
  var subscribeToObservable = function (obj) {
      return function (subscriber) {
          var obs = obj[observable]();
          if (typeof obs.subscribe !== 'function') {
              throw new TypeError('Provided object does not correctly implement Symbol.observable');
          }
          else {
              return obs.subscribe(subscriber);
          }
      };
  };

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

  /** PURE_IMPORTS_START  PURE_IMPORTS_END */
  function isPromise(value) {
      return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
  }

  /** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
  var subscribeTo = function (result) {
      if (!!result && typeof result[observable] === 'function') {
          return subscribeToObservable(result);
      }
      else if (isArrayLike(result)) {
          return subscribeToArray(result);
      }
      else if (isPromise(result)) {
          return subscribeToPromise(result);
      }
      else if (!!result && typeof result[iterator] === 'function') {
          return subscribeToIterable(result);
      }
      else {
          var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
          var msg = "You provided " + value + " where a stream was expected."
              + ' You can provide an Observable, Promise, Array, or Iterable.';
          throw new TypeError(msg);
      }
  };

  /** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */
  function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
      if (innerSubscriber === void 0) {
          innerSubscriber = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
      }
      if (innerSubscriber.closed) {
          return undefined;
      }
      if (result instanceof Observable) {
          return result.subscribe(innerSubscriber);
      }
      return subscribeTo(result)(innerSubscriber);
  }

  /** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
  var NONE = {};
  function combineLatest() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
      }
      var resultSelector = undefined;
      var scheduler = undefined;
      if (isScheduler(observables[observables.length - 1])) {
          scheduler = observables.pop();
      }
      if (typeof observables[observables.length - 1] === 'function') {
          resultSelector = observables.pop();
      }
      if (observables.length === 1 && isArray(observables[0])) {
          observables = observables[0];
      }
      return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
  }
  var CombineLatestOperator = /*@__PURE__*/ (function () {
      function CombineLatestOperator(resultSelector) {
          this.resultSelector = resultSelector;
      }
      CombineLatestOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
      };
      return CombineLatestOperator;
  }());
  var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(CombineLatestSubscriber, _super);
      function CombineLatestSubscriber(destination, resultSelector) {
          var _this = _super.call(this, destination) || this;
          _this.resultSelector = resultSelector;
          _this.active = 0;
          _this.values = [];
          _this.observables = [];
          return _this;
      }
      CombineLatestSubscriber.prototype._next = function (observable) {
          this.values.push(NONE);
          this.observables.push(observable);
      };
      CombineLatestSubscriber.prototype._complete = function () {
          var observables = this.observables;
          var len = observables.length;
          if (len === 0) {
              this.destination.complete();
          }
          else {
              this.active = len;
              this.toRespond = len;
              for (var i = 0; i < len; i++) {
                  var observable = observables[i];
                  this.add(subscribeToResult(this, observable, undefined, i));
              }
          }
      };
      CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
          if ((this.active -= 1) === 0) {
              this.destination.complete();
          }
      };
      CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
          var values = this.values;
          var oldVal = values[outerIndex];
          var toRespond = !this.toRespond
              ? 0
              : oldVal === NONE ? --this.toRespond : this.toRespond;
          values[outerIndex] = innerValue;
          if (toRespond === 0) {
              if (this.resultSelector) {
                  this._tryResultSelector(values);
              }
              else {
                  this.destination.next(values.slice());
              }
          }
      };
      CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
          var result;
          try {
              result = this.resultSelector.apply(this, values);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(result);
      };
      return CombineLatestSubscriber;
  }(OuterSubscriber));

  /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */
  function scheduleObservable(input, scheduler) {
      return new Observable(function (subscriber) {
          var sub = new Subscription();
          sub.add(scheduler.schedule(function () {
              var observable$1 = input[observable]();
              sub.add(observable$1.subscribe({
                  next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                  error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                  complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
              }));
          }));
          return sub;
      });
  }

  /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
  function schedulePromise(input, scheduler) {
      return new Observable(function (subscriber) {
          var sub = new Subscription();
          sub.add(scheduler.schedule(function () {
              return input.then(function (value) {
                  sub.add(scheduler.schedule(function () {
                      subscriber.next(value);
                      sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                  }));
              }, function (err) {
                  sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
              });
          }));
          return sub;
      });
  }

  /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */
  function scheduleIterable(input, scheduler) {
      if (!input) {
          throw new Error('Iterable cannot be null');
      }
      return new Observable(function (subscriber) {
          var sub = new Subscription();
          var iterator$1;
          sub.add(function () {
              if (iterator$1 && typeof iterator$1.return === 'function') {
                  iterator$1.return();
              }
          });
          sub.add(scheduler.schedule(function () {
              iterator$1 = input[iterator]();
              sub.add(scheduler.schedule(function () {
                  if (subscriber.closed) {
                      return;
                  }
                  var value;
                  var done;
                  try {
                      var result = iterator$1.next();
                      value = result.value;
                      done = result.done;
                  }
                  catch (err) {
                      subscriber.error(err);
                      return;
                  }
                  if (done) {
                      subscriber.complete();
                  }
                  else {
                      subscriber.next(value);
                      this.schedule();
                  }
              }));
          }));
          return sub;
      });
  }

  /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
  function isInteropObservable(input) {
      return input && typeof input[observable] === 'function';
  }

  /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
  function isIterable(input) {
      return input && typeof input[iterator] === 'function';
  }

  /** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */
  function scheduled(input, scheduler) {
      if (input != null) {
          if (isInteropObservable(input)) {
              return scheduleObservable(input, scheduler);
          }
          else if (isPromise(input)) {
              return schedulePromise(input, scheduler);
          }
          else if (isArrayLike(input)) {
              return scheduleArray(input, scheduler);
          }
          else if (isIterable(input) || typeof input === 'string') {
              return scheduleIterable(input, scheduler);
          }
      }
      throw new TypeError((input !== null && typeof input || input) + ' is not observable');
  }

  /** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */
  function from(input, scheduler) {
      if (!scheduler) {
          if (input instanceof Observable) {
              return input;
          }
          return new Observable(subscribeTo(input));
      }
      else {
          return scheduled(input, scheduler);
      }
  }

  /** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */
  var SimpleInnerSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SimpleInnerSubscriber, _super);
      function SimpleInnerSubscriber(parent) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          return _this;
      }
      SimpleInnerSubscriber.prototype._next = function (value) {
          this.parent.notifyNext(value);
      };
      SimpleInnerSubscriber.prototype._error = function (error) {
          this.parent.notifyError(error);
          this.unsubscribe();
      };
      SimpleInnerSubscriber.prototype._complete = function () {
          this.parent.notifyComplete();
          this.unsubscribe();
      };
      return SimpleInnerSubscriber;
  }(Subscriber));
  var SimpleOuterSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SimpleOuterSubscriber, _super);
      function SimpleOuterSubscriber() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
          this.destination.next(innerValue);
      };
      SimpleOuterSubscriber.prototype.notifyError = function (err) {
          this.destination.error(err);
      };
      SimpleOuterSubscriber.prototype.notifyComplete = function () {
          this.destination.complete();
      };
      return SimpleOuterSubscriber;
  }(Subscriber));
  function innerSubscribe(result, innerSubscriber) {
      if (innerSubscriber.closed) {
          return undefined;
      }
      if (result instanceof Observable) {
          return result.subscribe(innerSubscriber);
      }
      return subscribeTo(result)(innerSubscriber);
  }

  /** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */
  function mergeMap(project, resultSelector, concurrent) {
      if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
      }
      if (typeof resultSelector === 'function') {
          return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
      }
      else if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
      }
      return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
  }
  var MergeMapOperator = /*@__PURE__*/ (function () {
      function MergeMapOperator(project, concurrent) {
          if (concurrent === void 0) {
              concurrent = Number.POSITIVE_INFINITY;
          }
          this.project = project;
          this.concurrent = concurrent;
      }
      MergeMapOperator.prototype.call = function (observer, source) {
          return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
      };
      return MergeMapOperator;
  }());
  var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MergeMapSubscriber, _super);
      function MergeMapSubscriber(destination, project, concurrent) {
          if (concurrent === void 0) {
              concurrent = Number.POSITIVE_INFINITY;
          }
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.concurrent = concurrent;
          _this.hasCompleted = false;
          _this.buffer = [];
          _this.active = 0;
          _this.index = 0;
          return _this;
      }
      MergeMapSubscriber.prototype._next = function (value) {
          if (this.active < this.concurrent) {
              this._tryNext(value);
          }
          else {
              this.buffer.push(value);
          }
      };
      MergeMapSubscriber.prototype._tryNext = function (value) {
          var result;
          var index = this.index++;
          try {
              result = this.project(value, index);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.active++;
          this._innerSub(result);
      };
      MergeMapSubscriber.prototype._innerSub = function (ish) {
          var innerSubscriber = new SimpleInnerSubscriber(this);
          var destination = this.destination;
          destination.add(innerSubscriber);
          var innerSubscription = innerSubscribe(ish, innerSubscriber);
          if (innerSubscription !== innerSubscriber) {
              destination.add(innerSubscription);
          }
      };
      MergeMapSubscriber.prototype._complete = function () {
          this.hasCompleted = true;
          if (this.active === 0 && this.buffer.length === 0) {
              this.destination.complete();
          }
          this.unsubscribe();
      };
      MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
          this.destination.next(innerValue);
      };
      MergeMapSubscriber.prototype.notifyComplete = function () {
          var buffer = this.buffer;
          this.active--;
          if (buffer.length > 0) {
              this._next(buffer.shift());
          }
          else if (this.active === 0 && this.hasCompleted) {
              this.destination.complete();
          }
      };
      return MergeMapSubscriber;
  }(SimpleOuterSubscriber));

  /** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
  function mergeAll(concurrent) {
      if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
      }
      return mergeMap(identity$2, concurrent);
  }

  /** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */
  function concatAll() {
      return mergeAll(1);
  }

  /** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */
  function concat() {
      var observables = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
      }
      return concatAll()(of.apply(void 0, observables));
  }

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function filter(predicate, thisArg) {
      return function filterOperatorFunction(source) {
          return source.lift(new FilterOperator(predicate, thisArg));
      };
  }
  var FilterOperator = /*@__PURE__*/ (function () {
      function FilterOperator(predicate, thisArg) {
          this.predicate = predicate;
          this.thisArg = thisArg;
      }
      FilterOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
      };
      return FilterOperator;
  }());
  var FilterSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(FilterSubscriber, _super);
      function FilterSubscriber(destination, predicate, thisArg) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.thisArg = thisArg;
          _this.count = 0;
          return _this;
      }
      FilterSubscriber.prototype._next = function (value) {
          var result;
          try {
              result = this.predicate.call(this.thisArg, value, this.count++);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          if (result) {
              this.destination.next(value);
          }
      };
      return FilterSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
  function catchError(selector) {
      return function catchErrorOperatorFunction(source) {
          var operator = new CatchOperator(selector);
          var caught = source.lift(operator);
          return (operator.caught = caught);
      };
  }
  var CatchOperator = /*@__PURE__*/ (function () {
      function CatchOperator(selector) {
          this.selector = selector;
      }
      CatchOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
      };
      return CatchOperator;
  }());
  var CatchSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(CatchSubscriber, _super);
      function CatchSubscriber(destination, selector, caught) {
          var _this = _super.call(this, destination) || this;
          _this.selector = selector;
          _this.caught = caught;
          return _this;
      }
      CatchSubscriber.prototype.error = function (err) {
          if (!this.isStopped) {
              var result = void 0;
              try {
                  result = this.selector(err, this.caught);
              }
              catch (err2) {
                  _super.prototype.error.call(this, err2);
                  return;
              }
              this._unsubscribeAndRecycle();
              var innerSubscriber = new SimpleInnerSubscriber(this);
              this.add(innerSubscriber);
              var innerSubscription = innerSubscribe(result, innerSubscriber);
              if (innerSubscription !== innerSubscriber) {
                  this.add(innerSubscription);
              }
          }
      };
      return CatchSubscriber;
  }(SimpleOuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function defaultIfEmpty(defaultValue) {
      if (defaultValue === void 0) {
          defaultValue = null;
      }
      return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
  }
  var DefaultIfEmptyOperator = /*@__PURE__*/ (function () {
      function DefaultIfEmptyOperator(defaultValue) {
          this.defaultValue = defaultValue;
      }
      DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
      };
      return DefaultIfEmptyOperator;
  }());
  var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DefaultIfEmptySubscriber, _super);
      function DefaultIfEmptySubscriber(destination, defaultValue) {
          var _this = _super.call(this, destination) || this;
          _this.defaultValue = defaultValue;
          _this.isEmpty = true;
          return _this;
      }
      DefaultIfEmptySubscriber.prototype._next = function (value) {
          this.isEmpty = false;
          this.destination.next(value);
      };
      DefaultIfEmptySubscriber.prototype._complete = function () {
          if (this.isEmpty) {
              this.destination.next(this.defaultValue);
          }
          this.destination.complete();
      };
      return DefaultIfEmptySubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function distinctUntilChanged(compare, keySelector) {
      return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
  }
  var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
      function DistinctUntilChangedOperator(compare, keySelector) {
          this.compare = compare;
          this.keySelector = keySelector;
      }
      DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
      };
      return DistinctUntilChangedOperator;
  }());
  var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(DistinctUntilChangedSubscriber, _super);
      function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
          var _this = _super.call(this, destination) || this;
          _this.keySelector = keySelector;
          _this.hasKey = false;
          if (typeof compare === 'function') {
              _this.compare = compare;
          }
          return _this;
      }
      DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
          return x === y;
      };
      DistinctUntilChangedSubscriber.prototype._next = function (value) {
          var key;
          try {
              var keySelector = this.keySelector;
              key = keySelector ? keySelector(value) : value;
          }
          catch (err) {
              return this.destination.error(err);
          }
          var result = false;
          if (this.hasKey) {
              try {
                  var compare = this.compare;
                  result = compare(this.key, key);
              }
              catch (err) {
                  return this.destination.error(err);
              }
          }
          else {
              this.hasKey = true;
          }
          if (!result) {
              this.key = key;
              this.destination.next(value);
          }
      };
      return DistinctUntilChangedSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_util_EmptyError,_Subscriber PURE_IMPORTS_END */
  function throwIfEmpty(errorFactory) {
      if (errorFactory === void 0) {
          errorFactory = defaultErrorFactory;
      }
      return function (source) {
          return source.lift(new ThrowIfEmptyOperator(errorFactory));
      };
  }
  var ThrowIfEmptyOperator = /*@__PURE__*/ (function () {
      function ThrowIfEmptyOperator(errorFactory) {
          this.errorFactory = errorFactory;
      }
      ThrowIfEmptyOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
      };
      return ThrowIfEmptyOperator;
  }());
  var ThrowIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ThrowIfEmptySubscriber, _super);
      function ThrowIfEmptySubscriber(destination, errorFactory) {
          var _this = _super.call(this, destination) || this;
          _this.errorFactory = errorFactory;
          _this.hasValue = false;
          return _this;
      }
      ThrowIfEmptySubscriber.prototype._next = function (value) {
          this.hasValue = true;
          this.destination.next(value);
      };
      ThrowIfEmptySubscriber.prototype._complete = function () {
          if (!this.hasValue) {
              var err = void 0;
              try {
                  err = this.errorFactory();
              }
              catch (e) {
                  err = e;
              }
              this.destination.error(err);
          }
          else {
              return this.destination.complete();
          }
      };
      return ThrowIfEmptySubscriber;
  }(Subscriber));
  function defaultErrorFactory() {
      return new EmptyError();
  }

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
  function take(count) {
      return function (source) {
          if (count === 0) {
              return empty$1();
          }
          else {
              return source.lift(new TakeOperator(count));
          }
      };
  }
  var TakeOperator = /*@__PURE__*/ (function () {
      function TakeOperator(total) {
          this.total = total;
          if (this.total < 0) {
              throw new ArgumentOutOfRangeError;
          }
      }
      TakeOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new TakeSubscriber(subscriber, this.total));
      };
      return TakeOperator;
  }());
  var TakeSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TakeSubscriber, _super);
      function TakeSubscriber(destination, total) {
          var _this = _super.call(this, destination) || this;
          _this.total = total;
          _this.count = 0;
          return _this;
      }
      TakeSubscriber.prototype._next = function (value) {
          var total = this.total;
          var count = ++this.count;
          if (count <= total) {
              this.destination.next(value);
              if (count === total) {
                  this.destination.complete();
                  this.unsubscribe();
              }
          }
      };
      return TakeSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */
  function first(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function (source) { return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity$2, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
  }

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
  function takeLast(count) {
      return function takeLastOperatorFunction(source) {
          if (count === 0) {
              return empty$1();
          }
          else {
              return source.lift(new TakeLastOperator(count));
          }
      };
  }
  var TakeLastOperator = /*@__PURE__*/ (function () {
      function TakeLastOperator(total) {
          this.total = total;
          if (this.total < 0) {
              throw new ArgumentOutOfRangeError;
          }
      }
      TakeLastOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
      };
      return TakeLastOperator;
  }());
  var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TakeLastSubscriber, _super);
      function TakeLastSubscriber(destination, total) {
          var _this = _super.call(this, destination) || this;
          _this.total = total;
          _this.ring = new Array();
          _this.count = 0;
          return _this;
      }
      TakeLastSubscriber.prototype._next = function (value) {
          var ring = this.ring;
          var total = this.total;
          var count = this.count++;
          if (ring.length < total) {
              ring.push(value);
          }
          else {
              var index = count % total;
              ring[index] = value;
          }
      };
      TakeLastSubscriber.prototype._complete = function () {
          var destination = this.destination;
          var count = this.count;
          if (count > 0) {
              var total = this.count >= this.total ? this.total : this.count;
              var ring = this.ring;
              for (var i = 0; i < total; i++) {
                  var idx = (count++) % total;
                  destination.next(ring[idx]);
              }
          }
          destination.complete();
      };
      return TakeLastSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function mapTo(value) {
      return function (source) { return source.lift(new MapToOperator(value)); };
  }
  var MapToOperator = /*@__PURE__*/ (function () {
      function MapToOperator(value) {
          this.value = value;
      }
      MapToOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new MapToSubscriber(subscriber, this.value));
      };
      return MapToOperator;
  }());
  var MapToSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(MapToSubscriber, _super);
      function MapToSubscriber(destination, value) {
          var _this = _super.call(this, destination) || this;
          _this.value = value;
          return _this;
      }
      MapToSubscriber.prototype._next = function (x) {
          this.destination.next(this.value);
      };
      return MapToSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
  function scan(accumulator, seed) {
      var hasSeed = false;
      if (arguments.length >= 2) {
          hasSeed = true;
      }
      return function scanOperatorFunction(source) {
          return source.lift(new ScanOperator(accumulator, seed, hasSeed));
      };
  }
  var ScanOperator = /*@__PURE__*/ (function () {
      function ScanOperator(accumulator, seed, hasSeed) {
          if (hasSeed === void 0) {
              hasSeed = false;
          }
          this.accumulator = accumulator;
          this.seed = seed;
          this.hasSeed = hasSeed;
      }
      ScanOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
      };
      return ScanOperator;
  }());
  var ScanSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(ScanSubscriber, _super);
      function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
          var _this = _super.call(this, destination) || this;
          _this.accumulator = accumulator;
          _this._seed = _seed;
          _this.hasSeed = hasSeed;
          _this.index = 0;
          return _this;
      }
      Object.defineProperty(ScanSubscriber.prototype, "seed", {
          get: function () {
              return this._seed;
          },
          set: function (value) {
              this.hasSeed = true;
              this._seed = value;
          },
          enumerable: true,
          configurable: true
      });
      ScanSubscriber.prototype._next = function (value) {
          if (!this.hasSeed) {
              this.seed = value;
              this.destination.next(value);
          }
          else {
              return this._tryNext(value);
          }
      };
      ScanSubscriber.prototype._tryNext = function (value) {
          var index = this.index++;
          var result;
          try {
              result = this.accumulator(this.seed, value, index);
          }
          catch (err) {
              this.destination.error(err);
          }
          this.seed = result;
          this.destination.next(result);
      };
      return ScanSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */
  function reduce(accumulator, seed) {
      if (arguments.length >= 2) {
          return function reduceOperatorFunctionWithSeed(source) {
              return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);
          };
      }
      return function reduceOperatorFunction(source) {
          return pipe(scan(function (acc, value, index) { return accumulator(acc, value, index + 1); }), takeLast(1))(source);
      };
  }

  /** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */
  function multicast(subjectOrSubjectFactory, selector) {
      return function multicastOperatorFunction(source) {
          var subjectFactory;
          if (typeof subjectOrSubjectFactory === 'function') {
              subjectFactory = subjectOrSubjectFactory;
          }
          else {
              subjectFactory = function subjectFactory() {
                  return subjectOrSubjectFactory;
              };
          }
          if (typeof selector === 'function') {
              return source.lift(new MulticastOperator(subjectFactory, selector));
          }
          var connectable = Object.create(source, connectableObservableDescriptor);
          connectable.source = source;
          connectable.subjectFactory = subjectFactory;
          return connectable;
      };
  }
  var MulticastOperator = /*@__PURE__*/ (function () {
      function MulticastOperator(subjectFactory, selector) {
          this.subjectFactory = subjectFactory;
          this.selector = selector;
      }
      MulticastOperator.prototype.call = function (subscriber, source) {
          var selector = this.selector;
          var subject = this.subjectFactory();
          var subscription = selector(subject).subscribe(subscriber);
          subscription.add(source.subscribe(subject));
          return subscription;
      };
      return MulticastOperator;
  }());

  /** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */
  function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
      if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
          scheduler = selectorOrScheduler;
      }
      var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
      var subject = new ReplaySubject(bufferSize, windowTime, scheduler);
      return function (source) { return multicast(function () { return subject; }, selector)(source); };
  }

  /** PURE_IMPORTS_START _observable_concat,_util_isScheduler PURE_IMPORTS_END */
  function startWith() {
      var array = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          array[_i] = arguments[_i];
      }
      var scheduler = array[array.length - 1];
      if (isScheduler(scheduler)) {
          array.pop();
          return function (source) { return concat(array, source, scheduler); };
      }
      else {
          return function (source) { return concat(array, source); };
      }
  }

  /** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */
  function switchMap(project, resultSelector) {
      if (typeof resultSelector === 'function') {
          return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
      }
      return function (source) { return source.lift(new SwitchMapOperator(project)); };
  }
  var SwitchMapOperator = /*@__PURE__*/ (function () {
      function SwitchMapOperator(project) {
          this.project = project;
      }
      SwitchMapOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
      };
      return SwitchMapOperator;
  }());
  var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(SwitchMapSubscriber, _super);
      function SwitchMapSubscriber(destination, project) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.index = 0;
          return _this;
      }
      SwitchMapSubscriber.prototype._next = function (value) {
          var result;
          var index = this.index++;
          try {
              result = this.project(value, index);
          }
          catch (error) {
              this.destination.error(error);
              return;
          }
          this._innerSub(result);
      };
      SwitchMapSubscriber.prototype._innerSub = function (result) {
          var innerSubscription = this.innerSubscription;
          if (innerSubscription) {
              innerSubscription.unsubscribe();
          }
          var innerSubscriber = new SimpleInnerSubscriber(this);
          var destination = this.destination;
          destination.add(innerSubscriber);
          this.innerSubscription = innerSubscribe(result, innerSubscriber);
          if (this.innerSubscription !== innerSubscriber) {
              destination.add(this.innerSubscription);
          }
      };
      SwitchMapSubscriber.prototype._complete = function () {
          var innerSubscription = this.innerSubscription;
          if (!innerSubscription || innerSubscription.closed) {
              _super.prototype._complete.call(this);
          }
          this.unsubscribe();
      };
      SwitchMapSubscriber.prototype._unsubscribe = function () {
          this.innerSubscription = undefined;
      };
      SwitchMapSubscriber.prototype.notifyComplete = function () {
          this.innerSubscription = undefined;
          if (this.isStopped) {
              _super.prototype._complete.call(this);
          }
      };
      SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {
          this.destination.next(innerValue);
      };
      return SwitchMapSubscriber;
  }(SimpleOuterSubscriber));

  /** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
  function tap(nextOrObserver, error, complete) {
      return function tapOperatorFunction(source) {
          return source.lift(new DoOperator(nextOrObserver, error, complete));
      };
  }
  var DoOperator = /*@__PURE__*/ (function () {
      function DoOperator(nextOrObserver, error, complete) {
          this.nextOrObserver = nextOrObserver;
          this.error = error;
          this.complete = complete;
      }
      DoOperator.prototype.call = function (subscriber, source) {
          return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
      };
      return DoOperator;
  }());
  var TapSubscriber = /*@__PURE__*/ (function (_super) {
      __extends(TapSubscriber, _super);
      function TapSubscriber(destination, observerOrNext, error, complete) {
          var _this = _super.call(this, destination) || this;
          _this._tapNext = noop;
          _this._tapError = noop;
          _this._tapComplete = noop;
          _this._tapError = error || noop;
          _this._tapComplete = complete || noop;
          if (isFunction(observerOrNext)) {
              _this._context = _this;
              _this._tapNext = observerOrNext;
          }
          else if (observerOrNext) {
              _this._context = observerOrNext;
              _this._tapNext = observerOrNext.next || noop;
              _this._tapError = observerOrNext.error || noop;
              _this._tapComplete = observerOrNext.complete || noop;
          }
          return _this;
      }
      TapSubscriber.prototype._next = function (value) {
          try {
              this._tapNext.call(this._context, value);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.next(value);
      };
      TapSubscriber.prototype._error = function (err) {
          try {
              this._tapError.call(this._context, err);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          this.destination.error(err);
      };
      TapSubscriber.prototype._complete = function () {
          try {
              this._tapComplete.call(this._context);
          }
          catch (err) {
              this.destination.error(err);
              return;
          }
          return this.destination.complete();
      };
      return TapSubscriber;
  }(Subscriber));

  /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
  function toArrayReducer(arr, item, index) {
      if (index === 0) {
          return [item];
      }
      arr.push(item);
      return arr;
  }
  function toArray() {
      return reduce(toArrayReducer, []);
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  function hasEq(o) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return isFunction$1(o.eq);
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // when the second is an Codec[] that the first has to be as well

  function compareArray(a, b) {
    if (Array.isArray(b)) {
      return a.length === b.length && isUndefined(a.find((value, index) => hasEq(value) ? !value.eq(b[index]) : value !== b[index]));
    }

    return false;
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  function hasMismatch(a, b) {
    return isUndefined(a) || (hasEq(a) ? !a.eq(b) : a !== b);
  }

  function notEntry(value) {
    return !Array.isArray(value) || value.length !== 2;
  }

  function compareMapArray(a, b) {
    // equal number of entries and each entry in the array should match
    return a.size === b.length && !b.some(entry => notEntry(entry) || hasMismatch(a.get(entry[0]), entry[1]));
  } // NOTE These are used internally and when comparing objects, expects that
  // when the second is an Map<string, Codec> that the first has to be as well


  function compareMap(a, b) {
    if (Array.isArray(b)) {
      return compareMapArray(a, b);
    } else if (b instanceof Map) {
      return compareMapArray(a, [...b.entries()]);
    } else if (isObject$1(b)) {
      return compareMapArray(a, Object.entries(b));
    }

    return false;
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  function compareSetArray(a, b) {
    // equal number of entries and each entry in the array should match
    return a.size === b.length && !b.some(entry => !a.has(entry));
  } // NOTE These are used internally and when comparing objects, expects that
  // when the second is an Set<string, Codec> that the first has to be as well


  function compareSet(a, b) {
    if (Array.isArray(b)) {
      return compareSetArray(a, b);
    } else if (b instanceof Set) {
      return compareSetArray(a, [...b.values()]);
    } else if (isObject$1(b)) {
      return compareSetArray(a, Object.values(b));
    }

    return false;
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * Given an u8a, and an array of Type constructors, decode the u8a against the
   * types, and return an array of decoded values.
   *
   * @param u8a - The u8a to decode.
   * @param types - The array of Constructor to decode the U8a against.
   */
  function decodeU8a$3(registry, u8a, _types) {
    const types = Array.isArray(_types) ? _types : Object.values(_types);
    const result = [];
    let offset = 0;

    for (let i = 0; i < types.length; i++) {
      const value = new types[i](registry, u8a.subarray(offset));
      result.push(value);
      offset += value.encodedLength;
    }

    return result;
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  function typeToConstructor(registry, type) {
    return isString(type) ? registry.createClass(type) : type;
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @description takes an input map of the form `{ [string]: string | Constructor }` and returns a map of `{ [string]: Constructor }`
   */

  function mapToTypeMap(registry, input) {
    return Object.entries(input).reduce((output, [key, type]) => {
      output[key] = typeToConstructor(registry, type);
      return output;
    }, {});
  }

  const l$b = logger('Map');
  /** @internal */

  function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
    const output = new Map();
    const [offset, length] = compactFromU8a(u8a);
    const types = [];

    for (let i = 0; i < length.toNumber(); i++) {
      types.push(KeyClass, ValClass);
    }

    const values = decodeU8a$3(registry, u8a.subarray(offset), types);

    for (let i = 0; i < values.length; i += 2) {
      output.set(values[i], values[i + 1]);
    }

    return output;
  }
  /** @internal */


  function decodeMapFromMap(registry, KeyClass, ValClass, value) {
    const output = new Map();
    value.forEach((val, key) => {
      try {
        output.set(key instanceof KeyClass ? key : new KeyClass(registry, key), val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l$b.error('Failed to decode key or value:', error.message);
        throw error;
      }
    });
    return output;
  }
  /**
   * Decode input to pass into constructor.
   *
   * @param KeyClass - Type of the map key
   * @param ValClass - Type of the map value
   * @param value - Value to decode, one of:
   * - null
   * - undefined
   * - hex
   * - Uint8Array
   * - Map<any, any>, where both key and value types are either
   *   constructors or decodeable values for their types.
   * @param jsonMap
   * @internal
   */


  function decodeMap(registry, keyType, valType, value) {
    const KeyClass = typeToConstructor(registry, keyType);
    const ValClass = typeToConstructor(registry, valType);

    if (!value) {
      return new Map();
    } else if (isU8a(value) || isHex(value)) {
      return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));
    } else if (value instanceof Map) {
      return decodeMapFromMap(registry, KeyClass, ValClass, value);
    } else if (isObject$1(value)) {
      return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
    }

    throw new Error('Map: cannot decode type');
  }

  var _KeyClass = _classPrivateFieldKey("KeyClass");

  var _ValClass$1 = _classPrivateFieldKey("ValClass");

  var _type = _classPrivateFieldKey("type");

  class CodecMap extends Map {
    constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
      super(decodeMap(registry, keyType, valType, rawValue));
      this.registry = void 0;
      Object.defineProperty(this, _KeyClass, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _ValClass$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _type, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _KeyClass)[_KeyClass] = typeToConstructor(registry, keyType);
      _classPrivateFieldBase(this, _ValClass$1)[_ValClass$1] = typeToConstructor(registry, valType);
      _classPrivateFieldBase(this, _type)[_type] = type;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      let len = compactToU8a(this.size).length;
      this.forEach((v, k) => {
        len += v.encodedLength + k.encodedLength;
      });
      return len;
    }
    /**
     * @description Returns a hash of the value
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.size === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareMap(this, other);
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      const json = {};
      this.forEach((v, k) => {
        json[k.toString()] = v.toHuman(isExtended);
      });
      return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      const json = {};
      this.forEach((v, k) => {
        json[k.toString()] = v.toJSON();
      });
      return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `${_classPrivateFieldBase(this, _type)[_type]}<${this.registry.getClassName(_classPrivateFieldBase(this, _KeyClass)[_KeyClass]) || new (_classPrivateFieldBase(this, _KeyClass)[_KeyClass])(this.registry).toRawType()},${this.registry.getClassName(_classPrivateFieldBase(this, _ValClass$1)[_ValClass$1]) || new (_classPrivateFieldBase(this, _ValClass$1)[_ValClass$1])(this.registry).toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return JSON.stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = new Array();

      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }

      this.forEach((v, k) => {
        encoded.push(k.toU8a(isBare), v.toU8a(isBare));
      });
      return u8aConcat(...encoded);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  class BTreeMap extends CodecMap {
    static with(keyType, valType) {
      return class extends BTreeMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value, 'BTreeMap');
        }

      };
    }

  }

  const l$a = logger('BTreeSet');
  /** @internal */

  function decodeSetFromU8a(registry, ValClass, u8a) {
    const output = new Set();
    const [offset, length] = compactFromU8a(u8a);
    const types = [];

    for (let i = 0; i < length.toNumber(); i++) {
      types.push(ValClass);
    }

    const values = decodeU8a$3(registry, u8a.subarray(offset), types);

    for (let i = 0; i < values.length; i++) {
      output.add(values[i]);
    }

    return output;
  }
  /** @internal */


  function decodeSetFromSet(registry, ValClass, value) {
    const output = new Set();
    value.forEach(val => {
      try {
        output.add(val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l$a.error('Failed to decode key or value:', error.message);
        throw error;
      }
    });
    return output;
  }
  /**
   * Decode input to pass into constructor.
   *
   * @param ValClass - Type of the map value
   * @param value - Value to decode, one of:
   * - null
   * - undefined
   * - hex
   * - Uint8Array
   * - Set<any>, where both key and value types are either
   *   constructors or decodeable values for their types.
   * @param jsonSet
   * @internal
   */


  function decodeSet$1(registry, valType, value) {
    if (!value) {
      return new Set();
    }

    const ValClass = typeToConstructor(registry, valType);

    if (isHex(value) || isU8a(value)) {
      return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));
    } else if (Array.isArray(value) || value instanceof Set) {
      return decodeSetFromSet(registry, ValClass, value);
    }

    throw new Error('BTreeSet: cannot decode type');
  }

  var _ValClass = _classPrivateFieldKey("ValClass");

  class BTreeSet extends Set {
    constructor(registry, valType, rawValue) {
      super(decodeSet$1(registry, valType, rawValue));
      this.registry = void 0;
      Object.defineProperty(this, _ValClass, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _ValClass)[_ValClass] = typeToConstructor(registry, valType);
    }

    static with(valType) {
      return class extends BTreeSet {
        constructor(registry, value) {
          super(registry, valType, value);
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      let len = compactToU8a(this.size).length;
      this.forEach(v => {
        len += v.encodedLength;
      });
      return len;
    }
    /**
     * @description Returns a hash of the value
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.size === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareSet(this, other);
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      const json = [];
      this.forEach(v => {
        json.push(v.toHuman(isExtended));
      });
      return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      const json = [];
      this.forEach(v => {
        json.push(v.toJSON());
      });
      return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `BTreeSet<${this.registry.getClassName(_classPrivateFieldBase(this, _ValClass)[_ValClass]) || new (_classPrivateFieldBase(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return JSON.stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = new Array();

      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }

      this.forEach(v => {
        encoded.push(v.toU8a(isBare));
      });
      return u8aConcat(...encoded);
    }

  }

  /**
   * @name Compact
   * @description
   * A compact length-encoding codec wrapper. It performs the same function as Length, however
   * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
   * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
   * a number and making the compact representation thereof
   */

  var _Type$1 = _classPrivateFieldKey("Type");

  var _raw$2 = _classPrivateFieldKey("raw");

  class Compact {
    constructor(registry, Type, value = 0) {
      this.registry = void 0;
      Object.defineProperty(this, _Type$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _raw$2, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _Type$1)[_Type$1] = typeToConstructor(registry, Type);
      _classPrivateFieldBase(this, _raw$2)[_raw$2] = Compact.decodeCompact(registry, _classPrivateFieldBase(this, _Type$1)[_Type$1], value);
    }

    static with(Type) {
      return class extends Compact {
        constructor(registry, value) {
          super(registry, Type, value);
        }

      };
    }
    /** @internal */


    static decodeCompact(registry, Type, value) {
      if (value instanceof Compact) {
        return new Type(registry, _classPrivateFieldBase(value, _raw$2)[_raw$2]);
      } else if (isString(value) || isNumber(value) || isBn(value) || isBigInt(value)) {
        return new Type(registry, value);
      }

      const [, _value] = compactFromU8a(value, new Type(registry, 0).bitLength());
      return new Type(registry, _value);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].isEmpty;
    }
    /**
     * @description Returns the number of bits in the value
     */


    bitLength() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].bitLength();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].eq(other instanceof Compact ? _classPrivateFieldBase(other, _raw$2)[_raw$2] : other);
    }
    /**
     * @description Returns a BigInt representation of the number
     */


    toBigInt() {
      return BigInt(this.toString());
    }
    /**
     * @description Returns the BN representation of the number
     */


    toBn() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].toBn();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */


    toHex(isLe) {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].toJSON();
    }
    /**
     * @description Returns the number representation for the value
     */


    toNumber() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `Compact<${this.registry.getClassName(_classPrivateFieldBase(this, _Type$1)[_Type$1]) || _classPrivateFieldBase(this, _raw$2)[_raw$2].toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2].toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return compactToU8a(_classPrivateFieldBase(this, _raw$2)[_raw$2].toBn());
    }
    /**
     * @description Returns the embedded [[UInt]] or [[Moment]] value
     */


    unwrap() {
      return _classPrivateFieldBase(this, _raw$2)[_raw$2];
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name Null
   * @description
   * Implements a type that does not contain anything (apart from `null`)
   */

  class Null {
    constructor(registry) {
      this.registry = void 0;
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return 0;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      throw new Error('.hash is not implemented on Null');
    }
    /**
     * @description Checks if the value is an empty value (always true)
     */


    get isEmpty() {
      return true;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return other instanceof Null || isNull(other);
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return '0x';
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return null;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Null';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return '';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return new Uint8Array();
    }

  }

  /** @internal */
  function decodeStructFromObject(registry, Types, value, jsonMap) {
    let jsonObj;
    return Object.keys(Types).reduce((raw, key, index) => {
      // The key in the JSON can be snake_case (or other cases), but in our
      // Types, result or any other maps, it's camelCase
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      const jsonKey = jsonMap.get(key) && !value[key] ? jsonMap.get(key) : key;

      try {
        if (Array.isArray(value)) {
          // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
          raw[key] = value[index] instanceof Types[key] ? value[index] : new Types[key](registry, value[index]);
        } else if (value instanceof Map) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          const mapped = value.get(jsonKey); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

          raw[key] = mapped instanceof Types[key] ? mapped : new Types[key](registry, mapped);
        } else if (isObject$1(value)) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          let assign = value[jsonKey];

          if (isUndefined(assign)) {
            if (isUndefined(jsonObj)) {
              jsonObj = Object.entries(value).reduce((all, [key, value]) => {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                all[stringCamelCase(key)] = value;
                return all;
              }, {});
            } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment


            assign = jsonObj[jsonKey];
          } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access


          raw[key] = assign instanceof Types[key] ? assign : new Types[key](registry, assign);
        } else {
          throw new Error(`Cannot decode value ${JSON.stringify(value)}`);
        }
      } catch (error) {
        let type = Types[key].name;

        try {
          type = new Types[key](registry).toRawType();
        } catch (error) {// ignore
        }

        throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
      }

      return raw;
    }, {});
  }
  /**
   * Decode input to pass into constructor.
   *
   * @param Types - Types definition.
   * @param value - Value to decode, one of:
   * - null
   * - undefined
   * - hex
   * - Uint8Array
   * - object with `{ key1: value1, key2: value2 }`, assuming `key1` and `key2`
   * are also keys in `Types`
   * - array with `[value1, value2]` assuming the array has the same length as
   * `Object.keys(Types)`
   * @param jsonMap
   * @internal
   */


  function decodeStruct(registry, Types, value, jsonMap) {
    if (isHex(value)) {
      return decodeStruct(registry, Types, hexToU8a(value), jsonMap);
    } else if (isU8a(value)) {
      const values = decodeU8a$3(registry, value, Object.values(Types)); // Transform array of values to {key: value} mapping

      return Object.keys(Types).reduce((raw, key, index) => {
        // TS2322: Type 'Codec' is not assignable to type 'T[keyof S]'.
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        raw[key] = values[index];
        return raw;
      }, {});
    } else if (!value) {
      return {};
    } // We assume from here that value is a JS object (Array, Map, Object)


    return decodeStructFromObject(registry, Types, value, jsonMap);
  }
  /**
   * @name Struct
   * @description
   * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
   * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
   * values in the constructor and it manages the decoding. It is important that the constructor
   * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
   * it needs to decoded in the specific defined order.
   * @noInheritDoc
   */


  var _jsonMap = _classPrivateFieldKey("jsonMap");

  var _Types = _classPrivateFieldKey("Types");

  class Struct extends Map {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    constructor(registry, Types, value = {}, jsonMap = new Map()) {
      super(Object.entries(decodeStruct(registry, mapToTypeMap(registry, Types), value, jsonMap)));
      this.registry = void 0;
      Object.defineProperty(this, _jsonMap, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _Types, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _jsonMap)[_jsonMap] = jsonMap;
      _classPrivateFieldBase(this, _Types)[_Types] = mapToTypeMap(registry, Types);
    }

    static with(Types, jsonMap) {
      return class extends Struct {
        constructor(registry, value) {
          super(registry, Types, value, jsonMap);
          Object.keys(Types).forEach(key => {
            isUndefined(this[key]) && Object.defineProperty(this, key, {
              enumerable: true,
              get: () => this.get(key)
            });
          });
        }

      };
    }

    static typesToMap(registry, Types) {
      return Object.entries(Types).reduce((result, [key, Type]) => {
        result[key] = registry.getClassName(Type) || new Type(registry).toRawType();
        return result;
      }, {});
    }
    /**
     * @description The available keys for this enum
     */


    get defKeys() {
      return Object.keys(_classPrivateFieldBase(this, _Types)[_Types]);
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      const items = this.toArray();

      for (let i = 0; i < items.length; i++) {
        if (!items[i].isEmpty) {
          return false;
        }
      }

      return true;
    }
    /**
     * @description Returns the Type description to sthe structure
     */


    get Type() {
      return Object.entries(_classPrivateFieldBase(this, _Types)[_Types]).reduce((result, [key, Type]) => {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        result[key] = new Type(this.registry).toRawType();
        return result;
      }, {});
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toArray().reduce((length, entry) => {
        length += entry.encodedLength;
        return length;
      }, 0);
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareMap(this, other);
    }
    /**
     * @description Returns a specific names entry in the structure
     * @param name The name of the entry to retrieve
     */


    get(name) {
      return super.get(name);
    }
    /**
     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
     */


    getAtIndex(index) {
      return this.toArray()[index];
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */


    toArray() {
      return [...this.values()];
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return [...this.keys()].reduce((json, key) => {
        const value = this.get(key);
        json[key] = value && value.toHuman(isExtended);
        return json;
      }, {});
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return [...this.keys()].reduce((json, key) => {
        const jsonKey = _classPrivateFieldBase(this, _jsonMap)[_jsonMap].get(key) || key;
        const value = this.get(key);
        json[jsonKey] = value && value.toJSON();
        return json;
      }, {});
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return JSON.stringify(Struct.typesToMap(this.registry, _classPrivateFieldBase(this, _Types)[_Types]));
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return JSON.stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      // we have keyof S here, cast to string to make it compatible with isBare
      const entries = [...this.entries()];
      return u8aConcat(...entries // eslint-disable-next-line @typescript-eslint/unbound-method
      .filter(([, value]) => isFunction$1(value === null || value === void 0 ? void 0 : value.toU8a)).map(([key, value]) => value.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[key])));
    }

  }

  function isRustEnum$1(def) {
    const defValues = Object.values(def);

    if (defValues.some(v => isNumber(v))) {
      assert$a(defValues.every(v => isNumber(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
      return false;
    }

    return true;
  }

  function extractDef(registry, _def) {
    if (Array.isArray(_def)) {
      return {
        def: _def.reduce((def, key, index) => {
          def[key] = {
            Type: Null,
            index
          };
          return def;
        }, {}),
        isBasic: true,
        isIndexed: false
      };
    }

    let isBasic;
    let isIndexed;
    let def;

    if (isRustEnum$1(_def)) {
      def = Object.entries(mapToTypeMap(registry, _def)).reduce((def, [key, Type], index) => {
        def[key] = {
          Type,
          index
        };
        return def;
      }, {});
      isBasic = !Object.values(def).some(({
        Type
      }) => Type !== Null);
      isIndexed = false;
    } else {
      def = Object.entries(_def).reduce((def, [key, index]) => {
        def[key] = {
          Type: Null,
          index
        };
        return def;
      }, {});
      isBasic = true;
      isIndexed = true;
    }

    return {
      def,
      isBasic,
      isIndexed
    };
  }

  function createFromValue(registry, def, index = 0, value) {
    const entry = Object.values(def).find(e => e.index === index);
    assert$a(!isUndefined(entry), `Unable to create Enum via index ${index}, in ${Object.keys(def).join(', ')}`);
    return {
      index,
      value: value instanceof entry.Type ? value : new entry.Type(registry, value)
    };
  }

  function decodeFromJSON(registry, def, key, value) {
    // JSON comes in the form of { "<type (lowercased)>": "<value for type>" }, here we
    // additionally force to lower to ensure forward compat
    const keys = Object.keys(def).map(k => k.toLowerCase());
    const keyLower = key.toLowerCase();
    const index = keys.indexOf(keyLower);
    assert$a(index !== -1, `Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);

    try {
      return createFromValue(registry, def, Object.values(def)[index].index, value);
    } catch (error) {
      throw new Error(`Enum(${key}):: ${error.message}`);
    }
  }

  function decodeFromString(registry, def, value) {
    return isHex(value) // eslint-disable-next-line @typescript-eslint/no-use-before-define
    ? decodeFromValue(registry, def, hexToU8a(value)) : decodeFromJSON(registry, def, value);
  }

  function decodeFromValue(registry, def, value) {
    if (isU8a(value)) {
      // nested, we don't want to match isObject below
      if (value.length) {
        return createFromValue(registry, def, value[0], value.subarray(1));
      }
    } else if (isNumber(value)) {
      return createFromValue(registry, def, value);
    } else if (isString(value)) {
      return decodeFromString(registry, def, value.toString());
    } else if (isObject$1(value)) {
      const key = Object.keys(value)[0];
      return decodeFromJSON(registry, def, key, value[key]);
    } // Worst-case scenario, return the first with default


    return createFromValue(registry, def, Object.values(def)[0].index);
  }

  function decodeEnum(registry, def, value, index) {
    // NOTE We check the index path first, before looking at values - this allows treating
    // the optional indexes before anything else, more-specific > less-specific
    if (isNumber(index)) {
      return createFromValue(registry, def, index, value); // eslint-disable-next-line @typescript-eslint/no-use-before-define
    } else if (value instanceof Enum) {
      return createFromValue(registry, def, value.index, value.value);
    }

    return decodeFromValue(registry, def, value);
  }
  /**
   * @name Enum
   * @description
   * This implements an enum, that based on the value wraps a different type. It is effectively
   * an extension to enum where the value type is determined by the actual index.
   */
  // TODO:
  //   - As per Enum, actually use TS enum
  //   - It should rather probably extend Enum instead of copying code


  var _def2 = _classPrivateFieldKey("def");

  var _entryIndex = _classPrivateFieldKey("entryIndex");

  var _indexes = _classPrivateFieldKey("indexes");

  var _isBasic = _classPrivateFieldKey("isBasic");

  var _isIndexed = _classPrivateFieldKey("isIndexed");

  var _raw$1 = _classPrivateFieldKey("raw");

  class Enum {
    constructor(registry, def, value, index) {
      this.registry = void 0;
      Object.defineProperty(this, _def2, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _entryIndex, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _indexes, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isBasic, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isIndexed, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _raw$1, {
        writable: true,
        value: void 0
      });
      const defInfo = extractDef(registry, def);
      const decoded = decodeEnum(registry, defInfo.def, value, index);
      this.registry = registry;
      _classPrivateFieldBase(this, _def2)[_def2] = defInfo.def;
      _classPrivateFieldBase(this, _isBasic)[_isBasic] = defInfo.isBasic;
      _classPrivateFieldBase(this, _isIndexed)[_isIndexed] = defInfo.isIndexed;
      _classPrivateFieldBase(this, _indexes)[_indexes] = Object.values(defInfo.def).map(({
        index
      }) => index);
      _classPrivateFieldBase(this, _entryIndex)[_entryIndex] = _classPrivateFieldBase(this, _indexes)[_indexes].indexOf(decoded.index) || 0;
      _classPrivateFieldBase(this, _raw$1)[_raw$1] = decoded.value;
    }

    static with(Types) {
      return class extends Enum {
        constructor(registry, value, index) {
          super(registry, Types, value, index);
          Object.keys(_classPrivateFieldBase(this, _def2)[_def2]).forEach(_key => {
            const name = stringUpperFirst(stringCamelCase(_key.replace(' ', '_')));
            const askey = `as${name}`;
            const iskey = `is${name}`;
            isUndefined(this[iskey]) && Object.defineProperty(this, iskey, {
              enumerable: true,
              get: () => this.type === _key
            });
            isUndefined(this[askey]) && Object.defineProperty(this, askey, {
              enumerable: true,
              get: () => {
                assert$a(this[iskey], `Cannot convert '${this.type}' via ${askey}`);
                return this.value;
              }
            });
          });
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return 1 + _classPrivateFieldBase(this, _raw$1)[_raw$1].encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description The index of the enum value
     */


    get index() {
      return _classPrivateFieldBase(this, _indexes)[_indexes][_classPrivateFieldBase(this, _entryIndex)[_entryIndex]];
    }
    /**
     * @description true if this is a basic enum (no values)
     */


    get isBasic() {
      return _classPrivateFieldBase(this, _isBasic)[_isBasic];
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1].isEmpty;
    }
    /**
     * @description Checks if the Enum points to a [[Null]] type
     */


    get isNone() {
      return this.isNull;
    }
    /**
     * @description Checks if the Enum points to a [[Null]] type (deprecated, use isNone)
     */


    get isNull() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1] instanceof Null;
    }
    /**
     * @description The available keys for this enum
     */


    get defIndexes() {
      return _classPrivateFieldBase(this, _indexes)[_indexes];
    }
    /**
     * @description The available keys for this enum
     */


    get defKeys() {
      return Object.keys(_classPrivateFieldBase(this, _def2)[_def2]);
    }
    /**
     * @description The name of the type this enum value represents
     */


    get type() {
      return this.defKeys[_classPrivateFieldBase(this, _entryIndex)[_entryIndex]];
    }
    /**
     * @description The value of the enum
     */


    get value() {
      return _classPrivateFieldBase(this, _raw$1)[_raw$1];
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      // cater for the case where we only pass the enum index
      if (isNumber(other)) {
        return this.toNumber() === other;
      } else if (_classPrivateFieldBase(this, _isBasic)[_isBasic] && isString(other)) {
        return this.type === other;
      } else if (isU8a(other)) {
        return !this.toU8a().some((entry, index) => entry !== other[index]);
      } else if (isHex(other)) {
        return this.toHex() === other;
      } else if (other instanceof Enum) {
        return this.index === other.index && this.value.eq(other.value);
      } else if (isObject$1(other)) {
        return this.value.eq(other[this.type]);
      } // compare the actual wrapper value


      return this.value.eq(other);
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return _classPrivateFieldBase(this, _isBasic)[_isBasic] ? this.type : {
        [this.type]: _classPrivateFieldBase(this, _raw$1)[_raw$1].toHuman(isExtended)
      };
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return _classPrivateFieldBase(this, _isBasic)[_isBasic] ? this.type : {
        [this.type]: _classPrivateFieldBase(this, _raw$1)[_raw$1].toJSON()
      };
    }
    /**
     * @description Returns the number representation for the value
     */


    toNumber() {
      return this.index;
    }
    /**
     * @description Returns a raw struct representation of the enum types
     */


    _toRawStruct() {
      if (_classPrivateFieldBase(this, _isBasic)[_isBasic]) {
        return _classPrivateFieldBase(this, _isIndexed)[_isIndexed] ? this.defKeys.reduce((out, key, index) => {
          out[key] = _classPrivateFieldBase(this, _indexes)[_indexes][index];
          return out;
        }, {}) : this.defKeys;
      }

      const typeMap = Object.entries(_classPrivateFieldBase(this, _def2)[_def2]).reduce((out, [key, {
        Type
      }]) => {
        out[key] = Type;
        return out;
      }, {});
      return Struct.typesToMap(this.registry, typeMap);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return JSON.stringify({
        _enum: this._toRawStruct()
      });
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.isNull ? this.type : JSON.stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return u8aConcat(new Uint8Array(isBare ? [] : [this.index]), _classPrivateFieldBase(this, _raw$1)[_raw$1].toU8a(isBare));
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  class HashMap extends CodecMap {
    static with(keyType, valType) {
      return class extends HashMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value);
        }

      };
    }

  }

  const DEFAULT_UINT_BITS = 64; // Maximum allowed integer for JS is 2^53 - 1, set limit at 52
  // In this case however, we always print any >32 as hex

  const MAX_NUMBER_BITS = 52;
  const MUL_P = new bn(10000);
  const FORMATTERS = [['Perquintill', BN_QUINTILL], ['Perbill', BN_BILLION], ['Permill', BN_MILLION], ['Percent', BN_HUNDRED]];

  function toPercentage(value, divisor) {
    return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
  }
  /** @internal */


  function decodeAbstracIntU8a(value, bitLength, isNegative) {
    if (!value.length) {
      return '0';
    }

    try {
      // NOTE When passing u8a in (typically from decoded data), it is always Little Endian
      return u8aToBn(value.subarray(0, bitLength / 8), {
        isLe: true,
        isNegative
      }).toString();
    } catch (error) {
      throw new Error(`AbstractInt: failed on ${JSON.stringify(value)}:: ${error.message}`);
    }
  }
  /** @internal */


  function decodeAbstractInt(value, bitLength, isNegative) {
    // This function returns a string, which will be passed in the BN
    // constructor. It would be ideal to actually return a BN, but there's a
    // bug: https://github.com/indutny/bn.js/issues/206.
    if (isHex(value, -1, true)) {
      return hexToBn(value, {
        isLe: false,
        isNegative
      }).toString();
    } else if (isU8a(value)) {
      return decodeAbstracIntU8a(value, bitLength, isNegative);
    } else if (isString(value)) {
      return new bn(value.toString(), 10).toString();
    }

    return bnToBn(value).toString();
  }
  /**
   * @name AbstractInt
   * @ignore
   * @noInheritDoc
   */
  // TODO:
  //   - Apart from encoding/decoding we don't actually keep check on the sizes, is this good enough?


  var _bitLength = _classPrivateFieldKey("bitLength");

  var _isSigned = _classPrivateFieldKey("isSigned");

  class AbstractInt extends bn {
    constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
      super(decodeAbstractInt(value, bitLength, isSigned));
      this.registry = void 0;
      Object.defineProperty(this, _bitLength, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isSigned, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _bitLength)[_bitLength] = bitLength;
      _classPrivateFieldBase(this, _isSigned)[_isSigned] = isSigned;
      const isPositive = this.gte(BN_ZERO);
      const maxBits = bitLength - (isSigned && isPositive ? 1 : 0);
      assert$a(isSigned || isPositive, `${this.toRawType()}: Negative number passed to unsigned type`);
      assert$a(super.bitLength() <= maxBits, `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return _classPrivateFieldBase(this, _bitLength)[_bitLength] / 8;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is a zero value (align elsewhere)
     */


    get isEmpty() {
      return this.isZero();
    }
    /**
     * @description Checks if the value is an unsigned type
     */


    get isUnsigned() {
      return !_classPrivateFieldBase(this, _isSigned)[_isSigned];
    }
    /**
     * @description Returns the number of bits in the value
     */


    bitLength() {
      return _classPrivateFieldBase(this, _bitLength)[_bitLength];
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any


    eq(other) {
      // Here we are actually overriding the built-in .eq to take care of both
      // number and BN inputs (no `.eqn` needed) - numbers will be converted
      return super.eq(isHex(other) ? hexToBn(other.toString(), {
        isLe: false,
        isNegative: _classPrivateFieldBase(this, _isSigned)[_isSigned]
      }) : bnToBn(other));
    }
    /**
     * @description True if this value is the max of the type
     */


    isMax() {
      const u8a = this.toU8a().filter(byte => byte === 0xff);
      return u8a.length === _classPrivateFieldBase(this, _bitLength)[_bitLength] / 8;
    }
    /**
     * @description Returns a BigInt representation of the number
     */


    toBigInt() {
      return BigInt(this.toString());
    }
    /**
     * @description Returns the BN representation of the number. (Compatibility)
     */


    toBn() {
      return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex(isLe = false) {
      // For display/JSON, this is BE, for compare, use isLe
      return bnToHex(this, {
        bitLength: this.bitLength(),
        isLe,
        isNegative: !this.isUnsigned
      });
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toHuman(isExpanded) {
      const rawType = this.toRawType();

      if (rawType === 'Balance') {
        return this.isMax() ? 'everything' // FIXME In the case of multiples we need some way of detecting which instance this belongs
        // to. as it stands we will always format (incorrectly) against the first token defined
        : formatBalance(this, {
          decimals: this.registry.chainDecimals[0],
          withSi: true,
          withUnit: this.registry.chainTokens[0]
        });
      }

      const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
      return divisor ? toPercentage(this, divisor) : formatNumber(this);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON(onlyHex = false) {
      // FIXME this return type should by string | number, however BN returns string
      // Options here are
      //   - super.bitLength() - the actual used bits
      //   - this.#bitLength - the type bits (this should be used, however contracts RPC is problematic)
      return onlyHex || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      // NOTE In the case of balances, which have a special meaning on the UI
      // and can be interpreted differently, return a specific value for it so
      // underlying it always matches (no matter which length it actually is)
      return this instanceof this.registry.createClass('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
    }
    /**
     * @description Returns the string representation of the value
     * @param base The base to use for the conversion
     */


    toString(base) {
      // only included here since we do not inherit docs
      return super.toString(base);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return bnToU8a(this, {
        bitLength: this.bitLength(),
        isLe: true,
        isNegative: !this.isUnsigned
      });
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name Int
   * @description
   * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
   * this handles the encoding and decoding of those numbers. Upon construction
   * the bitLength is provided and any additional use keeps the number to this
   * length. This extends `BN`, so all methods available on a normal `BN` object
   * is available here.
   * @noInheritDoc
   */

  class Int extends AbstractInt {
    constructor(registry, value = 0, bitLength) {
      super(registry, value, bitLength, true);
    }

    static with(bitLength, typeName) {
      return class extends Int {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }

        toRawType() {
          return typeName || super.toRawType();
        }

      };
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /** @internal */

  function decodeJson(value) {
    return Object.entries(value || {});
  }
  /**
   * @name Json
   * @description
   * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
   * implements a Codec, it is limited in that it can only be used with input objects via RPC,
   * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
   * @noInheritDoc
   */


  class Json extends Map {
    constructor(registry, value) {
      const decoded = decodeJson(value);
      super(decoded);
      this.registry = void 0;
      this.registry = registry;
      decoded.forEach(([key]) => {
        isUndefined(this[key]) && Object.defineProperty(this, key, {
          enumerable: true,
          get: () => this.get(key)
        });
      });
    }
    /**
     * @description Always 0, never encodes as a Uint8Array
     */


    get encodedLength() {
      return 0;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return [...this.keys()].length === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareMap(this, other);
    }
    /**
     * @description Unimplemented, will throw
     */


    toHex() {
      throw new Error('Unimplemented');
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = isFunction$1(value.toHuman) ? value.toHuman() : value;
        return json;
      }, {});
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = value;
        return json;
      }, {});
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Json';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return JSON.stringify(this.toJSON());
    }
    /**
     * @description Unimplemented, will throw
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      throw new Error('Unimplemented');
    }

  }

  /** @internal */

  function decodeOptionU8a(registry, Type, value) {
    return !value.length || value[0] === 0 ? new Null(registry) : new Type(registry, value.subarray(1));
  }
  /** @internal */


  function decodeOption(registry, typeName, value) {
    if (isNull(value) || isUndefined(value) || value instanceof Null) {
      return new Null(registry);
    }

    const Type = typeToConstructor(registry, typeName); // eslint-disable-next-line @typescript-eslint/no-use-before-define

    if (value instanceof Option) {
      return decodeOption(registry, Type, value.value);
    } else if (value instanceof Type) {
      // don't re-create, use as it (which also caters for derived types)
      return value;
    } else if (isU8a(value)) {
      // the isU8a check happens last in the if-tree - since the wrapped value
      // may be an instance of it, so Type and Option checks go in first
      return decodeOptionU8a(registry, Type, value);
    }

    return new Type(registry, value);
  }
  /**
   * @name Option
   * @description
   * An Option is an optional field. Basically the first byte indicates that there is
   * is value to follow. If the byte is `1` there is an actual value. So the Option
   * implements that - decodes, checks for optionality and wraps the required structure
   * with a value if/as required/found.
   */


  var _Type = _classPrivateFieldKey("Type");

  var _raw = _classPrivateFieldKey("raw");

  class Option {
    constructor(registry, typeName, value) {
      this.registry = void 0;
      Object.defineProperty(this, _Type, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _raw, {
        writable: true,
        value: void 0
      });
      this.registry = registry;
      _classPrivateFieldBase(this, _Type)[_Type] = typeToConstructor(registry, typeName);
      _classPrivateFieldBase(this, _raw)[_raw] = decodeOption(registry, typeName, value);
    }

    static with(Type) {
      return class extends Option {
        constructor(registry, value) {
          super(registry, Type, value);
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      // boolean byte (has value, doesn't have) along with wrapped length
      return 1 + _classPrivateFieldBase(this, _raw)[_raw].encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the Option has no value
     */


    get isEmpty() {
      return this.isNone;
    }
    /**
     * @description Checks if the Option has no value
     */


    get isNone() {
      return _classPrivateFieldBase(this, _raw)[_raw] instanceof Null;
    }
    /**
     * @description Checks if the Option has a value
     */


    get isSome() {
      return !this.isNone;
    }
    /**
     * @description The actual value for the Option
     */


    get value() {
      return _classPrivateFieldBase(this, _raw)[_raw];
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      if (other instanceof Option) {
        return this.isSome === other.isSome && this.value.eq(other.value);
      }

      return this.value.eq(other);
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      // This attempts to align with the JSON encoding - actually in this case
      // the isSome value is correct, however the `isNone` may be problematic
      return this.isNone ? '0x' : u8aToHex(this.toU8a().subarray(1));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return _classPrivateFieldBase(this, _raw)[_raw].toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return _classPrivateFieldBase(this, _raw)[_raw].toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType(isBare) {
      const wrapped = this.registry.getClassName(_classPrivateFieldBase(this, _Type)[_Type]) || new (_classPrivateFieldBase(this, _Type)[_Type])(this.registry).toRawType();
      return isBare ? wrapped : `Option<${wrapped}>`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return _classPrivateFieldBase(this, _raw)[_raw].toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      if (isBare) {
        return _classPrivateFieldBase(this, _raw)[_raw].toU8a(true);
      }

      const u8a = new Uint8Array(this.encodedLength);

      if (this.isSome) {
        u8a.set([1]);
        u8a.set(_classPrivateFieldBase(this, _raw)[_raw].toU8a(), 1);
      }

      return u8a;
    }
    /**
     * @description Returns the value that the Option represents (if available), throws if null
     */


    unwrap() {
      assert$a(this.isSome, 'Option: unwrapping a None value');
      return _classPrivateFieldBase(this, _raw)[_raw];
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */


    unwrapOr(defaultValue) {
      return this.isSome ? this.unwrap() : defaultValue;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */


    unwrapOrDefault() {
      return this.isSome ? this.unwrap() : new (_classPrivateFieldBase(this, _Type)[_Type])(this.registry);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name AbstractArray
   * @description
   * This manages codec arrays. It is an extension to Array, providing
   * specific encoding/decoding on top of the base type.
   * @noInheritDoc
   */

  class AbstractArray extends Array {
    constructor(registry, ...values) {
      super(...values);
      this.registry = void 0;
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.reduce((total, raw) => {
        return total + raw.encodedLength;
      }, compactToU8a(this.length).length);
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.length === 0;
    }
    /**
     * @description The length of the value
     */


    get length() {
      // only included here since we ignore inherited docs
      return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareArray(this, other);
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */


    toArray() {
      return Array.from(this);
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return this.map(entry => entry.toHuman(isExtended));
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.map(entry => entry.toJSON());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    /**
     * @description Returns the string representation of the value
     */
    toString() {
      // Overwrite the default toString representation of Array.
      const data = this.map(entry => entry.toString());
      return `[${data.join(', ')}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = this.map(entry => entry.toU8a(isBare));
      return isBare ? u8aConcat(...encoded) : u8aConcat(compactToU8a(this.length), ...encoded);
    } // Below are methods that we override. When we do a `new Vec(...).map()`,
    // we want it to return an Array. We only override the methods that return a
    // new instance.

    /**
     * @description Concatenates two arrays
     */


    concat(other) {
      return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);
    }
    /**
     * @description Filters the array with the callback
     */


    filter(callbackfn, thisArg) {
      return this.toArray().filter(callbackfn, thisArg);
    }
    /**
     * @description Maps the array with the callback
     */


    map(callbackfn, thisArg) {
      return this.toArray().map(callbackfn, thisArg);
    }
    /**
     * @description Checks if the array includes a specific value
     */


    includes(check) {
      return this.some(value => value.eq(check));
    }
    /**
     * @description Returns a slice of an array
     */


    slice(start, end) {
      return this.toArray().slice(start, end);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  /** @internal */
  function decodeTuple(registry, _Types, value) {
    if (isU8a(value) || isHex(value)) {
      return decodeU8a$3(registry, u8aToU8a(value), _Types);
    }

    const Types = Array.isArray(_Types) ? _Types : Object.values(_Types);
    return Types.map((Type, index) => {
      try {
        const entry = value === null || value === void 0 ? void 0 : value[index];

        if (entry instanceof Type) {
          return entry;
        }

        return new Type(registry, entry);
      } catch (error) {
        throw new Error(`Tuple: failed on ${index}:: ${error.message}`);
      }
    });
  }
  /**
   * @name Tuple
   * @description
   * A Tuple defines an anonymous fixed-length array, where each element has its
   * own type. It extends the base JS `Array` object.
   */


  class Tuple extends AbstractArray {
    constructor(registry, Types, value) {
      const Clazzes = Array.isArray(Types) ? Types.map(type => typeToConstructor(registry, type)) : mapToTypeMap(registry, Types);
      super(registry, ...decodeTuple(registry, Clazzes, value));
      this._Types = void 0;
      this._Types = Clazzes;
    }

    static with(Types) {
      return class extends Tuple {
        constructor(registry, value) {
          super(registry, Types, value);
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.reduce((length, entry) => {
        length += entry.encodedLength;
        return length;
      }, 0);
    }
    /**
     * @description The types definition of the tuple
     */


    get Types() {
      return Array.isArray(this._Types) ? this._Types.map(Type => new Type(this.registry).toRawType()) : Object.keys(this._Types);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      const types = (Array.isArray(this._Types) ? this._Types : Object.values(this._Types)).map(Type => this.registry.getClassName(Type) || new Type(this.registry).toRawType());
      return `(${types.join(',')})`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      // Overwrite the default toString representation of Array.
      return JSON.stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return u8aConcat(...this.map(entry => entry.toU8a(isBare)));
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  const MAX_LENGTH$2 = 64 * 1024;
  const l$9 = logger('Vec');
  /**
   * @name Vec
   * @description
   * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
   * construction with the passed `Type` in the constructor. It is an extension to Array, providing
   * specific encoding/decoding on top of the base type.
   */

  class Vec extends AbstractArray {
    constructor(registry, Type, value = []) {
      const Clazz = typeToConstructor(registry, Type);
      super(registry, ...Vec.decodeVec(registry, Clazz, value));
      this._Type = void 0;
      this._Type = Clazz;
    }
    /** @internal */


    static decodeVec(registry, Type, value) {
      if (Array.isArray(value)) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return value.map((entry, index) => {
          try {
            return entry instanceof Type ? entry : new Type(registry, entry);
          } catch (error) {
            l$9.error(`Unable to decode on index ${index}`, error.message);
            throw error;
          }
        });
      }

      const u8a = u8aToU8a(value);
      const [offset, length] = compactFromU8a(u8a);
      assert$a(length.lten(MAX_LENGTH$2), `Vec length ${length.toString()} exceeds ${MAX_LENGTH$2}`);
      return decodeU8a$3(registry, u8a.subarray(offset), new Array(length.toNumber()).fill(Type));
    }

    static with(Type) {
      return class extends Vec {
        constructor(registry, value) {
          super(registry, Type, value);
        }

      };
    }
    /**
     * @description The type for the items
     */


    get Type() {
      return this._Type.name;
    }
    /**
     * @description Finds the index of the value in the array
     */


    indexOf(_other) {
      // convert type first, this removes overhead from the eq
      const other = _other instanceof this._Type ? _other : new this._Type(this.registry, _other);

      for (let i = 0; i < this.length; i++) {
        if (other.eq(this[i])) {
          return i;
        }
      }

      return -1;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `Vec<${this.registry.getClassName(this._Type) || new this._Type(this.registry).toRawType()}>`;
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name Raw
   * @description
   * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
   * from other implementations where it will consume the full Uint8Array as passed to it.
   * As such it is meant to be subclassed where the wrapper takes care of the
   * actual lengths instead of used directly.
   * @noInheritDoc
   */

  class Raw extends Uint8Array {
    constructor(registry, value) {
      super(u8aToU8a(value));
      this.registry = void 0;
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.length;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the wrapped value contains only ASCII printable characters
     */


    get isAscii() {
      return isAscii(this);
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */


    get isEmpty() {
      return !this.length || isUndefined(this.find(value => !!value));
    }
    /**
     * @description Returns true if the wrapped value contains only utf8 characters
     */


    get isUtf8() {
      return isUtf8(this);
    }
    /**
     * @description The length of the value
     */


    get length() {
      // only included here since we ignore inherited docs
      return super.length;
    }
    /**
     * @description Returns the number of bits in the value
     */


    bitLength() {
      return this.length * 8;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      if (other instanceof Uint8Array) {
        return this.length === other.length && !this.some((value, index) => value !== other[index]);
      }

      return this.eq(u8aToU8a(other));
    }
    /**
     * @description Create a new slice from the actual buffer. (compat)
     * @param start The position to start at
     * @param end The position to end at
     */


    slice(start, end) {
      // Like subarray below, we have to follow this approach since we are extending the TypeArray.
      // This happens especially when it comes to further extensions, the length may be an override
      return Uint8Array.from(this).slice(start, end);
    }
    /**
     * @description Create a new subarray from the actual buffer. (compat)
     * @param begin The position to start at
     * @param end The position to end at
     */


    subarray(begin, end) {
      return Uint8Array.from(this).subarray(begin, end);
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.isAscii ? this.toUtf8() : this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Raw';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return Uint8Array.from(this);
    }
    /**
     * @description Returns the wrapped data as a UTF-8 string
     */


    toUtf8() {
      assert$a(this.isUtf8, 'The character sequence is not a valid Utf8 string');
      return u8aToString(this);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name Result
   * @description
   * A Result maps to the Rust Result type, that can either wrap a success or error value
   */

  class Result extends Enum {
    constructor(registry, Ok, Err, value) {
      // NOTE This is order-dependent, Ok (with index 0) needs to be first
      // eslint-disable-next-line sort-keys
      super(registry, {
        Ok,
        Err
      }, value);
    }

    static with(Types) {
      return class extends Result {
        constructor(registry, value) {
          super(registry, Types.Ok, Types.Err, value);
        }

      };
    }
    /**
     * @description Returns the wrapper Err value (if isErr)
     */


    get asErr() {
      assert$a(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');
      return this.value;
    }
    /**
     * @deprecated Use asErr
     */


    get asError() {
      return this.asErr;
    }
    /**
     * @description Returns the wrapper Ok value (if isOk)
     */


    get asOk() {
      assert$a(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');
      return this.value;
    }
    /**
     * @description Checks if the Result has no value
     */


    get isEmpty() {
      return this.isOk && this.value.isEmpty;
    }
    /**
     * @description Checks if the Result wraps an Err value
     */


    get isErr() {
      return !this.isOk;
    }
    /**
     * @deprecated Use isErr
     */


    get isError() {
      return this.isErr;
    }
    /**
     * @description Checks if the Result wraps an Ok value
     */


    get isOk() {
      return this.index === 0;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      const Types = this._toRawStruct();

      return `Result<${Types.Ok},${Types.Err}>`;
    }

  }

  function encodeSet(setValues, value) {
    return value.reduce((result, value) => {
      return result.or(bnToBn(setValues[value] || 0));
    }, new bn(0));
  }
  /** @internal */


  function decodeSetArray(setValues, value) {
    return value.reduce((result, key) => {
      assert$a(!isUndefined(setValues[key]), `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
      result.push(key);
      return result;
    }, []);
  }
  /** @internal */


  function decodeSetNumber(setValues, _value) {
    const bn = bnToBn(_value);
    const result = Object.keys(setValues).reduce((result, key) => {
      if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
        result.push(key);
      }

      return result;
    }, []);
    const computed = encodeSet(setValues, result);
    assert$a(bn.eq(computed), `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
    return result;
  }
  /** @internal */


  function decodeSet(setValues, value = 0, bitLength) {
    assert$a(bitLength % 8 === 0, `Expected valid bitLength, power of 8, found ${bitLength}`);
    const byteLength = bitLength / 8;

    if (isString(value)) {
      return decodeSet(setValues, u8aToU8a(value), byteLength);
    } else if (isU8a(value)) {
      return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), {
        isLe: true
      }));
    } else if (value instanceof Set || Array.isArray(value)) {
      const input = Array.isArray(value) ? value : [...value.values()];
      return decodeSetArray(setValues, input);
    }

    return decodeSetNumber(setValues, value);
  }
  /**
   * @name Set
   * @description
   * An Set is an array of string values, represented an an encoded type by
   * a bitwise representation of the values.
   */
  // FIXME This is a prime candidate to extend the JavaScript built-in Set


  var _allowed = _classPrivateFieldKey("allowed");

  var _byteLength = _classPrivateFieldKey("byteLength");

  class CodecSet extends Set {
    constructor(registry, setValues, value, bitLength = 8) {
      super(decodeSet(setValues, value, bitLength));
      this.registry = void 0;
      Object.defineProperty(this, _allowed, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _byteLength, {
        writable: true,
        value: void 0
      });

      this.add = key => {
        // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
        // we have the isUndefined(this._setValues) in here as well, add is used internally
        // in the Set constructor (so it is undefined at this point, and should allow)
        assert$a(isUndefined(_classPrivateFieldBase(this, _allowed)[_allowed]) || !isUndefined(_classPrivateFieldBase(this, _allowed)[_allowed][key]), `Set: Invalid key '${key}' on add`);
        super.add(key);
        return this;
      };

      this.registry = registry;
      _classPrivateFieldBase(this, _allowed)[_allowed] = setValues;
      _classPrivateFieldBase(this, _byteLength)[_byteLength] = bitLength / 8;
    }

    static with(values, bitLength) {
      return class extends CodecSet {
        constructor(registry, value) {
          super(registry, values, value, bitLength);
          Object.keys(values).forEach(_key => {
            const name = stringUpperFirst(stringCamelCase(_key));
            const iskey = `is${name}`;
            isUndefined(this[iskey]) && Object.defineProperty(this, iskey, {
              enumerable: true,
              get: () => this.strings.includes(_key)
            });
          });
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return _classPrivateFieldBase(this, _byteLength)[_byteLength];
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description true is the Set contains no values
     */


    get isEmpty() {
      return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */


    get strings() {
      return [...super.values()];
    }
    /**
     * @description The encoded value for the set members
     */


    get valueEncoded() {
      return encodeSet(_classPrivateFieldBase(this, _allowed)[_allowed], this.strings);
    }
    /**
     * @description adds a value to the Set (extended to allow for validity checking)
     */


    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
      if (Array.isArray(other)) {
        // we don't actually care about the order, sort the values
        return compareArray(this.strings.sort(), other.sort());
      } else if (other instanceof Set) {
        return this.eq([...other.values()]);
      } else if (isNumber(other) || isBn(other)) {
        return this.valueEncoded.eq(bnToBn(other));
      }

      return false;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.strings;
    }
    /**
     * @description The encoded value for the set members
     */


    toNumber() {
      return this.valueEncoded.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return JSON.stringify({
        _set: _classPrivateFieldBase(this, _allowed)[_allowed]
      });
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return `[${this.strings.join(', ')}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return bnToU8a(this.valueEncoded, {
        bitLength: _classPrivateFieldBase(this, _byteLength)[_byteLength] * 8,
        isLe: true
      });
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name UInt
   * @description
   * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
   * this handles the encoding and decoding of those numbers. Upon construction
   * the bitLength is provided and any additional use keeps the number to this
   * length. This extends `BN`, so all methods available on a normal `BN` object
   * is available here.
   * @noInheritDoc
   */

  class UInt extends AbstractInt {
    static with(bitLength, typeName) {
      return class extends UInt {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }

        toRawType() {
          return typeName || super.toRawType();
        }

      };
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /** @internal */

  function decodeU8aFixed(value, bitLength) {
    if (Array.isArray(value) || isString(value)) {
      return decodeU8aFixed(u8aToU8a(value), bitLength);
    } // ensure that we have an actual u8a with the full length as specified by
    // the bitLength input (padded with zeros as required)


    const byteLength = bitLength / 8;
    const sub = value.subarray(0, byteLength);

    if (sub.length === byteLength) {
      return sub;
    }

    const u8a = new Uint8Array(byteLength);
    u8a.set(sub, 0);
    return u8a;
  }
  /**
   * @name U8aFixed
   * @description
   * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
   * to be used directly, rather is should be subclassed with the specific lengths.
   */


  class U8aFixed extends Raw {
    constructor(registry, value = new Uint8Array(), bitLength = 256) {
      super(registry, decodeU8aFixed(value, bitLength));
    }

    static with(bitLength, typeName) {
      return class extends U8aFixed {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }

        toRawType() {
          return typeName || super.toRawType();
        }

      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `[u8;${this.length}]`;
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name VecFixed
   * @description
   * This manages codec arrays of a fixed length
   */

  class VecFixed extends AbstractArray {
    constructor(registry, Type, length, value = []) {
      const Clazz = typeToConstructor(registry, Type);
      super(registry, ...VecFixed.decodeVecFixed(registry, Clazz, length, value));
      this._Type = void 0;
      this._Type = Clazz;
    }
    /** @internal */


    static decodeVecFixed(registry, Type, allocLength, value) {
      const values = Vec.decodeVec(registry, Type, isU8a(value) ? u8aConcat(compactToU8a(allocLength), value) : value);

      while (values.length < allocLength) {
        values.push(new Type(registry));
      }

      assert$a(values.length === allocLength, `Expected a length of exactly ${allocLength} entries`);
      return values;
    }

    static with(Type, length) {
      return class extends VecFixed {
        constructor(registry, value) {
          super(registry, Type, length, value);
        }

      };
    }
    /**
     * @description The type for the items
     */


    get Type() {
      return new this._Type(this.registry).toRawType();
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }

    toU8a() {
      // we override, we don't add the length prefix for ourselves, and at the same time we
      // ignore isBare on entries, since they should be properly encoded at all times
      const encoded = this.map(entry => entry.toU8a());
      return encoded.length ? u8aConcat(...encoded) : new Uint8Array([]);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `[${this.Type};${this.length}]`;
    }

  }

  function ownKeys$J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$J(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$J(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // migrate a storage hasher type
  // see https://github.com/paritytech/substrate/pull/4462

  /** @internal */
  function createStorageHasher(registry, hasher) {
    // Blake2_128_Concat has been added at index 2, so we increment all the
    // indexes greater than 2
    if (hasher.toNumber() >= 2) {
      return registry.createType('StorageHasherV10', hasher.toNumber() + 1);
    }

    return registry.createType('StorageHasherV10', hasher);
  }
  /** @internal */


  function createStorageType(registry, entryType) {
    if (entryType.isMap) {
      return [_objectSpread$J(_objectSpread$J({}, entryType.asMap), {}, {
        hasher: createStorageHasher(registry, entryType.asMap.hasher)
      }), 1];
    }

    if (entryType.isDoubleMap) {
      return [_objectSpread$J(_objectSpread$J({}, entryType.asDoubleMap), {}, {
        hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
        key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
      }), 2];
    }

    return [entryType.asPlain, 0];
  }
  /** @internal */


  function convertModule(registry, mod) {
    const storage = mod.storage.unwrapOr(null);
    return registry.createType('ModuleMetadataV10', _objectSpread$J(_objectSpread$J({}, mod), {}, {
      storage: storage ? _objectSpread$J(_objectSpread$J({}, storage), {}, {
        items: storage.items.map(item => _objectSpread$J(_objectSpread$J({}, item), {}, {
          type: registry.createType('StorageEntryTypeV10', ...createStorageType(registry, item.type))
        }))
      }) : null
    }));
  }
  /** @internal */


  function toV10(registry, {
    modules
  }) {
    return registry.createType('MetadataV10', {
      modules: modules.map(mod => convertModule(registry, mod))
    });
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /** @internal */
  function toV11(registry, {
    modules
  }) {
    return registry.createType('MetadataV11', {
      // This is new in V11, pass V0 here - something non-existing, telling the API to use
      // the fallback for this information (on-chain detection)
      extrinsic: {
        signedExtensions: [],
        version: 0
      },
      modules
    });
  }

  function ownKeys$I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$I(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$I(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @internal
   **/
  function toV12(registry, {
    extrinsic,
    modules
  }) {
    return registry.createType('MetadataLatest', {
      extrinsic,
      modules: modules.map(mod => registry.createType('ModuleMetadataV12', _objectSpread$I(_objectSpread$I({}, mod), {}, {
        index: 255
      })))
    });
  }

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  detectPackage(packageInfo$2, typeof __dirname !== 'undefined' && __dirname, [packageInfo$3]);

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Type overrides based on specific nodes
  const typesChain = {};

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // type overrides for modules (where duplication between modules exist)
  const typesModules = {
    assets: {
      Balance: 'TAssetBalance'
    },
    babe: {
      EquivocationProof: 'BabeEquivocationProof'
    },
    balances: {
      Status: 'BalanceStatus'
    },
    contracts: {
      StorageKey: 'ContractStorageKey'
    },
    ethereum: {
      Block: 'EthBlock',
      Header: 'EthHeader',
      Receipt: 'EthReceipt',
      Transaction: 'EthTransaction',
      TransactionStatus: 'EthTransactionStatus'
    },
    evm: {
      Account: 'EvmAccount',
      Log: 'EvmLog',
      Vicinity: 'EvmVicinity'
    },
    grandpa: {
      Equivocation: 'GrandpaEquivocation',
      EquivocationProof: 'GrandpaEquivocationProof'
    },
    identity: {
      Judgement: 'IdentityJudgement'
    },
    inclusion: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    parachains: {
      Id: 'ParaId'
    },
    parasScheduler: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    proposeParachain: {
      Proposal: 'ParachainProposal'
    },
    proxy: {
      Announcement: 'ProxyAnnouncement'
    },
    scheduler: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    society: {
      Judgement: 'SocietyJudgement',
      Vote: 'SocietyVote'
    },
    staking: {
      Compact: 'CompactAssignments'
    },
    treasury: {
      Proposal: 'TreasuryProposal'
    }
  };

  function ownKeys$H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$H(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$H(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  const sharedTypes$4 = {
    // substrate
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    LookupSource: 'IndicesLookupSource',
    Multiplier: 'Fixed64',
    // Anchor
    AnchorData: {
      anchoredBlock: 'u64',
      docRoot: 'H256',
      id: 'H256'
    },
    PreCommitData: {
      expirationBlock: 'u64',
      identity: 'H256',
      signingRoot: 'H256'
    },
    // Fees
    Fee: {
      key: 'Hash',
      price: 'Balance'
    },
    // MultiAccount
    MultiAccountData: {
      deposit: 'Balance',
      depositor: 'AccountId',
      signatories: 'Vec<AccountId>',
      threshold: 'u16'
    },
    // Bridge
    ChainId: 'u8',
    DepositNonce: 'u64',
    ResourceId: '[u8; 32]',
    'chainbridge::ChainId': 'u8',
    // NFT
    RegistryId: 'H160',
    TokenId: 'U256',
    AssetId: {
      registryId: 'RegistryId',
      tokenId: 'TokenId'
    },
    AssetInfo: {
      metadata: 'Bytes'
    },
    MintInfo: {
      anchorId: 'Hash',
      proofs: 'Vec<ProofMint>',
      staticHashes: '[Hash; 3]'
    },
    Proof: {
      leafHash: 'H256',
      sortedHashes: 'H256'
    },
    ProofMint: {
      hashes: 'Vec<Hash>',
      property: 'Bytes',
      salt: '[u8; 32]',
      value: 'Bytes'
    },
    RegistryInfo: {
      fields: 'Vec<Bytes>',
      ownerCanBurn: 'bool'
    }
  };
  const versioned$6 = [{
    minmax: [240, undefined],
    types: _objectSpread$H(_objectSpread$H({}, sharedTypes$4), {}, {
      RefCount: 'RefCountTo259'
    })
  }];

  function ownKeys$G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$G(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$G(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  const sharedTypes$3 = {
    AccountInfo: 'AccountInfoWithProviders',
    Address: 'MultiAddress',
    Keys: 'SessionKeys6',
    LookupSource: 'MultiAddress',
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement', 'CancelProxy']
    },
    ValidatorPrefs: 'ValidatorPrefsWithBlocked'
  };
  const addrIndicesTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    Keys: 'SessionKeys5',
    LookupSource: 'IndicesLookupSource',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const addrAccountIdTypes$2 = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const versioned$5 = [{
    // 1020 is first CC3
    minmax: [1019, 1031],
    types: _objectSpread$G(_objectSpread$G({}, addrIndicesTypes), {}, {
      BalanceLock: 'BalanceLockTo212',
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchError: 'DispatchErrorTo198',
      DispatchInfo: 'DispatchInfoTo244',
      Keys: 'SessionKeys5',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      RewardDestination: 'RewardDestinationTo257',
      SlashingSpans: 'SlashingSpansTo204',
      StakingLedger: 'StakingLedgerTo223',
      Votes: 'VotesTo230',
      Weight: 'u32'
    })
  }, {
    minmax: [1032, 1042],
    types: _objectSpread$G(_objectSpread$G({}, addrIndicesTypes), {}, {
      BalanceLock: 'BalanceLockTo212',
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Keys: 'SessionKeys5',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      RewardDestination: 'RewardDestinationTo257',
      SlashingSpans: 'SlashingSpansTo204',
      StakingLedger: 'StakingLedgerTo223',
      Votes: 'VotesTo230',
      Weight: 'u32'
    })
  }, {
    // actual at 1045 (1043-1044 is dev)
    minmax: [1043, 1045],
    types: _objectSpread$G(_objectSpread$G({}, addrIndicesTypes), {}, {
      BalanceLock: 'BalanceLockTo212',
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Keys: 'SessionKeys5',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      RewardDestination: 'RewardDestinationTo257',
      StakingLedger: 'StakingLedgerTo223',
      Votes: 'VotesTo230',
      Weight: 'u32'
    })
  }, {
    minmax: [1046, 1054],
    types: _objectSpread$G(_objectSpread$G(_objectSpread$G({}, sharedTypes$3), addrAccountIdTypes$2), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      RewardDestination: 'RewardDestinationTo257',
      StakingLedger: 'StakingLedgerTo240',
      Weight: 'u32'
    })
  }, {
    minmax: [1055, 1056],
    types: _objectSpread$G(_objectSpread$G(_objectSpread$G({}, sharedTypes$3), addrAccountIdTypes$2), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      RewardDestination: 'RewardDestinationTo257',
      StakingLedger: 'StakingLedgerTo240',
      Weight: 'u32'
    })
  }, {
    minmax: [1057, 1061],
    types: _objectSpread$G(_objectSpread$G(_objectSpread$G({}, sharedTypes$3), addrAccountIdTypes$2), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      RewardDestination: 'RewardDestinationTo257'
    })
  }, {
    minmax: [1062, 2012],
    types: _objectSpread$G(_objectSpread$G(_objectSpread$G({}, sharedTypes$3), addrAccountIdTypes$2), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      RewardDestination: 'RewardDestinationTo257'
    })
  }, {
    minmax: [2013, 2022],
    types: _objectSpread$G(_objectSpread$G(_objectSpread$G({}, sharedTypes$3), addrAccountIdTypes$2), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      RefCount: 'RefCountTo259',
      RewardDestination: 'RewardDestinationTo257'
    })
  }, {
    minmax: [2023, 2024],
    types: _objectSpread$G(_objectSpread$G(_objectSpread$G({}, sharedTypes$3), addrAccountIdTypes$2), {}, {
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [2025, 2027],
    types: _objectSpread$G(_objectSpread$G({}, sharedTypes$3), addrAccountIdTypes$2)
  }, {
    minmax: [2028, undefined],
    types: _objectSpread$G({}, sharedTypes$3)
  }];

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  // these are override types for Polkadot
  const versioned$4 = [{
    minmax: [0, 260],
    types: {
      AccountInfo: 'AccountInfoWithRefCount',
      Address: 'LookupSource',
      LookupSource: 'IndicesLookupSource'
    }
  }, {
    minmax: [261, undefined],
    types: {
      AccountInfo: 'AccountInfoWithProviders',
      Address: 'MultiAddress',
      LookupSource: 'MultiAddress'
    }
  }];

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  const versioned$3 = [{
    minmax: [0, undefined],
    types: {
      Address: 'MultiAddress',
      LookupSource: 'MultiAddress'
    }
  }];

  function ownKeys$F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$F(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  const sharedTypes$2 = {
    AccountInfo: 'AccountInfoWithProviders',
    Address: 'MultiAddress',
    Keys: 'SessionKeys6',
    LookupSource: 'MultiAddress',
    ProxyType: {
      _enum: {
        Any: 0,
        NonTransfer: 1,
        Governance: 2,
        Staking: 3,
        // SudoBalances: 4,
        IdentityJudgement: 5,
        CancelProxy: 6
      }
    },
    ValidatorPrefs: 'ValidatorPrefsWithBlocked'
  };
  const addrAccountIdTypes$1 = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  }; // these are override types for Polkadot

  const versioned$2 = [{
    minmax: [0, 12],
    types: _objectSpread$F(_objectSpread$F(_objectSpread$F({}, sharedTypes$2), addrAccountIdTypes$1), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      RewardDestination: 'RewardDestinationTo257'
    })
  }, {
    minmax: [13, 22],
    types: _objectSpread$F(_objectSpread$F(_objectSpread$F({}, sharedTypes$2), addrAccountIdTypes$1), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      RefCount: 'RefCountTo259',
      RewardDestination: 'RewardDestinationTo257'
    })
  }, {
    minmax: [23, 24],
    types: _objectSpread$F(_objectSpread$F(_objectSpread$F({}, sharedTypes$2), addrAccountIdTypes$1), {}, {
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [25, 27],
    types: _objectSpread$F(_objectSpread$F({}, sharedTypes$2), addrAccountIdTypes$1)
  }, {
    minmax: [28, undefined],
    types: _objectSpread$F({}, sharedTypes$2)
  }];

  function ownKeys$E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$E(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  // structs need to be in order

  /* eslint-disable sort-keys */
  const sharedTypes$1 = {
    AccountInfo: 'AccountInfoWithProviders',
    Address: 'MultiAddress',
    FullIdentification: '()',
    // No staking, only session (as per config)
    LookupSource: 'MultiAddress',
    Keys: 'SessionKeys6'
  };
  const versioned$1 = [{
    minmax: [0, 200],
    types: _objectSpread$E(_objectSpread$E({}, sharedTypes$1), {}, {
      Address: 'AccountId',
      LookupSource: 'AccountId'
    })
  }, {
    minmax: [201, undefined],
    types: _objectSpread$E({}, sharedTypes$1)
  }];

  function ownKeys$D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$D(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  const sharedTypes = {
    AccountInfo: 'AccountInfoWithProviders',
    Address: 'MultiAddress',
    Keys: 'SessionKeys6',
    LookupSource: 'MultiAddress',
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Staking', 'SudoBalances', 'IdentityJudgement', 'CancelProxy']
    },
    ValidatorPrefs: 'ValidatorPrefsWithBlocked'
  };
  const addrAccountIdTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    LookupSource: 'AccountId',
    Keys: 'SessionKeys5',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const versioned = [{
    minmax: [1, 2],
    types: _objectSpread$D(_objectSpread$D(_objectSpread$D({}, sharedTypes), addrAccountIdTypes), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      RewardDestination: 'RewardDestinationTo257',
      Weight: 'u32'
    })
  }, {
    minmax: [3, 22],
    types: _objectSpread$D(_objectSpread$D(_objectSpread$D({}, sharedTypes), addrAccountIdTypes), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      RewardDestination: 'RewardDestinationTo257'
    })
  }, {
    minmax: [23, 42],
    types: _objectSpread$D(_objectSpread$D(_objectSpread$D({}, sharedTypes), addrAccountIdTypes), {}, {
      CompactAssignments: 'CompactAssignmentsTo257',
      RefCount: 'RefCountTo259',
      RewardDestination: 'RewardDestinationTo257'
    })
  }, {
    minmax: [43, 44],
    types: _objectSpread$D(_objectSpread$D(_objectSpread$D({}, sharedTypes), addrAccountIdTypes), {}, {
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [45, 47],
    types: _objectSpread$D(_objectSpread$D({}, sharedTypes), addrAccountIdTypes)
  }, {
    minmax: [48, undefined],
    types: _objectSpread$D({}, sharedTypes)
  }];

  // Copyright 2017-2021 @polkadot/types-known authors & contributors

  const typesSpec = {
    'centrifuge-chain': versioned$6,
    kusama: versioned$5,
    node: versioned$4,
    'node-template': versioned$3,
    polkadot: versioned$2,
    rococo: versioned$1,
    westend: versioned
  };

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const upgrades$3 = [[0, 1020], [26669, 1021], [38245, 1022], [54248, 1023], [59659, 1024], [67651, 1025], [82191, 1027], [83238, 1028], [101503, 1029], [203466, 1030], [295787, 1031], [461692, 1032], [504329, 1033], [569327, 1038], [587687, 1039], [653183, 1040], [693488, 1042], [901442, 1045], [1375086, 1050], [1445458, 1051], [1472960, 1052], [1475648, 1053], [1491596, 1054], [1574408, 1055], [2064961, 1058], [2201991, 1062], [2671528, 2005], [2704202, 2007], [2728002, 2008], [2832534, 2011], [2962294, 2012], [3240000, 2013], [3274408, 2015], [3323565, 2019], [3534175, 2022], [3860281, 2023], [4143129, 2024], [4401242, 2025], [4841367, 2026], [5961600, 2027], [6137912, 2028]];

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const upgrades$2 = [[0, 0], [29231, 1], [188836, 5], [199405, 6], [214264, 7], [244358, 8], [303079, 9], [314201, 10], [342400, 11], [443963, 12], [528470, 13], [687751, 14], [746085, 15], [787923, 16], [799302, 17], [1205128, 18], [1603423, 23], [1733218, 24], [2005673, 25], [2436698, 26], [3613564, 27], [3899547, 28]];

  // Copyright 2017-2021 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const upgrades$1 = [[214356, 4], [392764, 7], [409740, 8], [809976, 20], [877581, 24], [879238, 25], [889472, 26], [902937, 27], [932751, 28], [991142, 29], [1030162, 31], [1119657, 32], [1199282, 33], [1342534, 34], [1392263, 35], [1431703, 36], [1433369, 37], [1490972, 41], [2087397, 43], [2316688, 44], [2549864, 45], [3925782, 46], [3925843, 47], [4207800, 48]];

  // Copyright 2017-2021 @polkadot/types-known authors & contributors

  const NET_EXTRA = {
    westend: {
      genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']
    }
  };
  /** @internal */

  function checkOrder(network, versions) {
    const ooo = versions.filter((curr, index) => {
      const prev = versions[index - 1];
      return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];
    });
    assert$a(!ooo.length, `${network}: Mismatched upgrade ordering: ${JSON.stringify(ooo)}`);
    return versions;
  }
  /** @internal */


  function mapRaw([network, versions]) {
    const chain = networks.find(n => n.network === network) || NET_EXTRA[network];
    assert$a(chain, `Unable to find info for chain ${network}`);
    return {
      genesisHash: hexToU8a(chain.genesisHash[0]),
      network,
      versions: checkOrder(network, versions).map(([blockNumber, specVersion]) => ({
        blockNumber: new bn(blockNumber),
        specVersion: new bn(specVersion)
      }))
    };
  } // Type overrides for specific spec types & versions as given in runtimeVersion


  const upgrades = Object.entries({
    kusama: upgrades$3,
    polkadot: upgrades$2,
    westend: upgrades$1
  }).map(mapRaw);

  function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$C(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  /** @internal */

  function filterVersions(versions = [], specVersion) {
    return versions.filter(({
      minmax: [min, max]
    }) => (isUndefined(min) || specVersion >= min) && (isUndefined(max) || specVersion <= max)).reduce((result, {
      types
    }) => _objectSpread$C(_objectSpread$C({}, result), types), {});
  }
  /**
   * @description Get types for specific modules (metadata override)
   */


  function getModuleTypes({
    knownTypes
  }, section) {
    var _knownTypes$typesAlia;

    return _objectSpread$C(_objectSpread$C({}, typesModules[section] || {}), ((_knownTypes$typesAlia = knownTypes.typesAlias) === null || _knownTypes$typesAlia === void 0 ? void 0 : _knownTypes$typesAlia[section]) || {});
  }
  /**
   * @description Based on the chain and runtimeVersion, get the applicable signed extensions (ready for registration)
   */

  function getSpecExtensions({
    knownTypes
  }, chainName, specName) {
    var _knownTypes$typesBund, _knownTypes$typesBund2, _knownTypes$typesBund3, _knownTypes$typesBund4, _knownTypes$typesBund5, _knownTypes$typesBund6;

    const _chainName = chainName.toString();

    const _specName = specName.toString();

    return _objectSpread$C(_objectSpread$C({}, ((_knownTypes$typesBund = knownTypes.typesBundle) === null || _knownTypes$typesBund === void 0 ? void 0 : (_knownTypes$typesBund2 = _knownTypes$typesBund.spec) === null || _knownTypes$typesBund2 === void 0 ? void 0 : (_knownTypes$typesBund3 = _knownTypes$typesBund2[_specName]) === null || _knownTypes$typesBund3 === void 0 ? void 0 : _knownTypes$typesBund3.signedExtensions) || {}), ((_knownTypes$typesBund4 = knownTypes.typesBundle) === null || _knownTypes$typesBund4 === void 0 ? void 0 : (_knownTypes$typesBund5 = _knownTypes$typesBund4.chain) === null || _knownTypes$typesBund5 === void 0 ? void 0 : (_knownTypes$typesBund6 = _knownTypes$typesBund5[_chainName]) === null || _knownTypes$typesBund6 === void 0 ? void 0 : _knownTypes$typesBund6.signedExtensions) || {});
  }
  /**
   * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
   */

  function getSpecTypes({
    knownTypes
  }, chainName, specName, specVersion) {
    var _knownTypes$typesBund7, _knownTypes$typesBund8, _knownTypes$typesBund9, _knownTypes$typesBund10, _knownTypes$typesBund11, _knownTypes$typesBund12, _knownTypes$typesSpec, _knownTypes$typesChai;

    const _chainName = chainName.toString();

    const _specName = specName.toString();

    const _specVersion = bnToBn(specVersion).toNumber(); // The order here is always, based on -
    //   - spec then chain
    //   - typesBundle takes higher precedence
    //   - types is the final catch-all override


    return _objectSpread$C(_objectSpread$C(_objectSpread$C(_objectSpread$C(_objectSpread$C(_objectSpread$C(_objectSpread$C({}, filterVersions(typesSpec[_specName], _specVersion)), filterVersions(typesChain[_chainName], _specVersion)), filterVersions((_knownTypes$typesBund7 = knownTypes.typesBundle) === null || _knownTypes$typesBund7 === void 0 ? void 0 : (_knownTypes$typesBund8 = _knownTypes$typesBund7.spec) === null || _knownTypes$typesBund8 === void 0 ? void 0 : (_knownTypes$typesBund9 = _knownTypes$typesBund8[_specName]) === null || _knownTypes$typesBund9 === void 0 ? void 0 : _knownTypes$typesBund9.types, _specVersion)), filterVersions((_knownTypes$typesBund10 = knownTypes.typesBundle) === null || _knownTypes$typesBund10 === void 0 ? void 0 : (_knownTypes$typesBund11 = _knownTypes$typesBund10.chain) === null || _knownTypes$typesBund11 === void 0 ? void 0 : (_knownTypes$typesBund12 = _knownTypes$typesBund11[_chainName]) === null || _knownTypes$typesBund12 === void 0 ? void 0 : _knownTypes$typesBund12.types, _specVersion)), ((_knownTypes$typesSpec = knownTypes.typesSpec) === null || _knownTypes$typesSpec === void 0 ? void 0 : _knownTypes$typesSpec[_specName]) || {}), ((_knownTypes$typesChai = knownTypes.typesChain) === null || _knownTypes$typesChai === void 0 ? void 0 : _knownTypes$typesChai[_chainName]) || {}), knownTypes.types || {});
  }
  function getSpecHasher({
    knownTypes
  }, chainName, specName) {
    var _knownTypes$typesBund13, _knownTypes$typesBund14, _knownTypes$typesBund15, _knownTypes$typesBund16, _knownTypes$typesBund17, _knownTypes$typesBund18;

    const _chainName = chainName.toString();

    const _specName = specName.toString();

    return knownTypes.hasher || ((_knownTypes$typesBund13 = knownTypes.typesBundle) === null || _knownTypes$typesBund13 === void 0 ? void 0 : (_knownTypes$typesBund14 = _knownTypes$typesBund13.chain) === null || _knownTypes$typesBund14 === void 0 ? void 0 : (_knownTypes$typesBund15 = _knownTypes$typesBund14[_chainName]) === null || _knownTypes$typesBund15 === void 0 ? void 0 : _knownTypes$typesBund15.hasher) || ((_knownTypes$typesBund16 = knownTypes.typesBundle) === null || _knownTypes$typesBund16 === void 0 ? void 0 : (_knownTypes$typesBund17 = _knownTypes$typesBund16.spec) === null || _knownTypes$typesBund17 === void 0 ? void 0 : (_knownTypes$typesBund18 = _knownTypes$typesBund17[_specName]) === null || _knownTypes$typesBund18 === void 0 ? void 0 : _knownTypes$typesBund18.hasher) || null;
  }
  /**
   * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
   */

  function getSpecRpc({
    knownTypes
  }, chainName, specName) {
    var _knownTypes$typesBund19, _knownTypes$typesBund20, _knownTypes$typesBund21, _knownTypes$typesBund22, _knownTypes$typesBund23, _knownTypes$typesBund24;

    const _chainName = chainName.toString();

    const _specName = specName.toString();

    return _objectSpread$C(_objectSpread$C({}, ((_knownTypes$typesBund19 = knownTypes.typesBundle) === null || _knownTypes$typesBund19 === void 0 ? void 0 : (_knownTypes$typesBund20 = _knownTypes$typesBund19.spec) === null || _knownTypes$typesBund20 === void 0 ? void 0 : (_knownTypes$typesBund21 = _knownTypes$typesBund20[_specName]) === null || _knownTypes$typesBund21 === void 0 ? void 0 : _knownTypes$typesBund21.rpc) || {}), ((_knownTypes$typesBund22 = knownTypes.typesBundle) === null || _knownTypes$typesBund22 === void 0 ? void 0 : (_knownTypes$typesBund23 = _knownTypes$typesBund22.chain) === null || _knownTypes$typesBund23 === void 0 ? void 0 : (_knownTypes$typesBund24 = _knownTypes$typesBund23[_chainName]) === null || _knownTypes$typesBund24 === void 0 ? void 0 : _knownTypes$typesBund24.rpc) || {});
  }
  /**
   * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
   */

  function getSpecAlias({
    knownTypes
  }, chainName, specName) {
    var _knownTypes$typesBund25, _knownTypes$typesBund26, _knownTypes$typesBund27, _knownTypes$typesBund28, _knownTypes$typesBund29, _knownTypes$typesBund30;

    const _chainName = chainName.toString();

    const _specName = specName.toString(); // as per versions, first spec, then chain then finally non-versioned


    return _objectSpread$C(_objectSpread$C(_objectSpread$C({}, ((_knownTypes$typesBund25 = knownTypes.typesBundle) === null || _knownTypes$typesBund25 === void 0 ? void 0 : (_knownTypes$typesBund26 = _knownTypes$typesBund25.spec) === null || _knownTypes$typesBund26 === void 0 ? void 0 : (_knownTypes$typesBund27 = _knownTypes$typesBund26[_specName]) === null || _knownTypes$typesBund27 === void 0 ? void 0 : _knownTypes$typesBund27.alias) || {}), ((_knownTypes$typesBund28 = knownTypes.typesBundle) === null || _knownTypes$typesBund28 === void 0 ? void 0 : (_knownTypes$typesBund29 = _knownTypes$typesBund28.chain) === null || _knownTypes$typesBund29 === void 0 ? void 0 : (_knownTypes$typesBund30 = _knownTypes$typesBund29[_chainName]) === null || _knownTypes$typesBund30 === void 0 ? void 0 : _knownTypes$typesBund30.alias) || {}), knownTypes.typesAlias || {});
  }
  /**
   * @description Returns a version record for known chains where upgrades are being tracked
   */

  function getUpgradeVersion(genesisHash, blockNumber) {
    const known = upgrades.find(u => genesisHash.eq(u.genesisHash));
    return known ? [known.versions.reduce((last, version) => {
      return blockNumber.gt(version.blockNumber) ? version : last;
    }, undefined), known.versions.find(version => blockNumber.lte(version.blockNumber))] : [undefined, undefined];
  }

  function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$B(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  // in a pure Substrate/Polkadot implementation, any other custom origins won't be handled at all

  const KNOWN_ORIGINS = {
    Council: 'CollectiveOrigin',
    System: 'SystemOrigin',
    TechnicalCommittee: 'CollectiveOrigin'
  };
  /**
   * Find and apply the correct type override
   * @internal
   **/

  function setTypeOverride(sectionTypes, type) {
    const override = Object.keys(sectionTypes).find(aliased => type.eq(aliased));

    if (override) {
      type.setOverride(sectionTypes[override]);
    } else {
      // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
      const orig = type.toString();
      const alias = Object.entries(sectionTypes).reduce((result, [from, to]) => [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']].reduce((result, [one, two]) => result.replace(`${one}${from}${two}`, `${one}${to}${two}`), result), orig);

      if (orig !== alias) {
        type.setOverride(alias);
      }
    }
  }
  /**
   * Apply module-specific type overrides (always be done as part of toLatest)
   * @internal
   **/


  function convertCalls(registry, calls, sectionTypes) {
    return calls.map(c => {
      c.args.forEach(({
        type
      }) => setTypeOverride(sectionTypes, type));
      return registry.createType('FunctionMetadataLatest', c);
    });
  }
  /**
   * Apply module-specific type overrides (always be done as part of toLatest)
   * @internal
   */


  function convertConstants(registry, constants, sectionTypes) {
    return constants.map(c => {
      setTypeOverride(sectionTypes, c.type);
      return registry.createType('ModuleConstantMetadataLatest', c);
    });
  }
  /**
   * Apply module-specific type overrides (always be done as part of toLatest)
   * @internal
   **/


  function convertEvents(registry, events, sectionTypes) {
    return events.map(e => {
      e.args.forEach(type => setTypeOverride(sectionTypes, type));
      return registry.createType('EventMetadataLatest', e);
    });
  }
  /**
   * Apply module-specific storage type overrides (always part of toLatest)
   * @internal
   **/


  function convertStorage(registry, {
    items,
    prefix
  }, sectionTypes) {
    return registry.createType('StorageMetadataLatest', {
      items: items.map(s => {
        let resultType;

        if (s.type.isMap) {
          resultType = s.type.asMap.value;
        } else if (s.type.isDoubleMap) {
          resultType = s.type.asDoubleMap.value;
        } else {
          resultType = s.type.asPlain;
        }

        setTypeOverride(sectionTypes, resultType);
        return registry.createType('StorageEntryMetadataLatest', s);
      }),
      prefix
    });
  } // generate & register the OriginCaller type


  function registerOriginCaller(registry, modules, metaVersion) {
    registry.register({
      OriginCaller: {
        _enum: modules.map((mod, index) => [mod.name.toString(), metaVersion >= 12 ? mod.index.toNumber() : index]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
          for (let i = Object.keys(result).length; i < index; i++) {
            result[`Empty${i}`] = 'Null';
          }

          result[name] = KNOWN_ORIGINS[name] || 'Null';
          return result;
        }, {})
      }
    });
  }
  /** @internal */


  function createModule(registry, mod, {
    calls,
    constants,
    events,
    storage
  }) {
    const sectionTypes = getModuleTypes(registry, stringCamelCase(mod.name));
    return registry.createType('ModuleMetadataLatest', _objectSpread$B(_objectSpread$B({}, mod), {}, {
      calls: calls && convertCalls(registry, calls, sectionTypes),
      constants: convertConstants(registry, constants, sectionTypes),
      events: events && convertEvents(registry, events, sectionTypes),
      storage: storage && convertStorage(registry, storage, sectionTypes)
    }));
  }
  /**
   * Convert the Metadata (which is an alias) to latest - effectively this _always_ get applied to the top-level &
   * most-recent metadata, since it allows us a chance to actually apply call and storage specific type aliasses
   * @internal
   **/


  function toLatest(registry, {
    extrinsic,
    modules
  }, metaVersion) {
    registerOriginCaller(registry, modules, metaVersion);
    return registry.createType('MetadataLatest', {
      extrinsic,
      modules: modules.map(mod => createModule(registry, mod, {
        calls: mod.calls.unwrapOr(null),
        constants: mod.constants,
        events: mod.events.unwrapOr(null),
        storage: mod.storage.unwrapOr(null)
      }))
    });
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /** @internal */

  function decodeBitVecU8a(value) {
    if (!value || !value.length) {
      return new Uint8Array();
    } // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded


    const [offset, length] = compactFromU8a(value);
    const total = offset + Math.ceil(length.toNumber() / 8);
    assert$a(total <= value.length, `BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
    return value.subarray(offset, total);
  }
  /** @internal */


  function decodeBitVec(value) {
    if (Array.isArray(value) || isString(value)) {
      return u8aToU8a(value);
    }

    return decodeBitVecU8a(value);
  }
  /**
   * @name BitVec
   * @description
   * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
   * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
   */


  class BitVec extends Raw {
    constructor(registry, value) {
      super(registry, decodeBitVec(value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.length + compactToU8a(this.bitLength()).length;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'BitVec';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const bitVec = super.toU8a();
      return isBare ? bitVec : u8aConcat(compactToU8a(this.bitLength()), bitVec);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /** @internal */

  function decodeBool(value) {
    if (value instanceof Boolean) {
      return value.valueOf();
    } else if (isU8a(value)) {
      return value[0] === 1;
    }

    return !!value;
  }
  /**
   * @name bool
   * @description
   * Representation for a boolean value in the system. It extends the base JS `Boolean` class
   * @noInheritDoc
   */


  class bool extends Boolean {
    // eslint-disable-next-line @typescript-eslint/ban-types
    constructor(registry, value = false) {
      super(decodeBool(value));
      this.registry = void 0;
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return 1;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value (true when it wraps false/default)
     */


    get isEmpty() {
      return this.isFalse;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */


    get isFalse() {
      return !this.isTrue;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */


    get isTrue() {
      return this.valueOf();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.valueOf();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'bool';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.toJSON().toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return new Uint8Array([this.valueOf() ? 1 : 0]);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  const MAX_LENGTH$1 = 10 * 1024 * 1024;
  /** @internal */

  function decodeBytesU8a(value) {
    if (!value.length) {
      return new Uint8Array();
    } // handle all other Uint8Array inputs, these do have a length prefix


    const [offset, length] = compactFromU8a(value);
    const total = offset + length.toNumber();
    assert$a(length.lten(MAX_LENGTH$1), `Bytes length ${length.toString()} exceeds ${MAX_LENGTH$1}`);
    assert$a(total <= value.length, `Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
    return value.subarray(offset, total);
  }
  /** @internal */


  function decodeBytes(value) {
    if (Array.isArray(value) || isString(value)) {
      return u8aToU8a(value);
    } else if (!(value instanceof Raw) && isU8a(value)) {
      // We are ensuring we are not a Raw instance. In the case of a Raw we already have gotten
      // rid of the length, i.e. new Bytes(new Bytes(...)) will work as expected
      return decodeBytesU8a(value);
    }

    return value;
  }
  /**
   * @name Bytes
   * @description
   * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
   * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
   * as what is found in [[Text]] and [[Vec]])
   */


  class Bytes extends Raw {
    constructor(registry, value) {
      super(registry, decodeBytes(value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.length + compactToU8a(this.length).length;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Bytes';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return isBare ? super.toU8a(isBare) : compactAddLength(this);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  /** @internal */
  function decodeDataU8a(registry, value) {
    const indicator = value[0];

    if (!indicator) {
      return [undefined, undefined];
    } else if (indicator >= 1 && indicator <= 33) {
      const length = indicator - 1;
      const data = value.subarray(1, length + 1); // in this case, we are passing a Raw back (since we have no length)

      return [registry.createType('Raw', data), 1];
    } else if (indicator >= 34 && indicator <= 37) {
      return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2
    }

    throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
  }
  /** @internal */


  function decodeData(registry, value) {
    if (!value) {
      return [undefined, undefined];
    } else if (isU8a(value) || isString(value)) {
      return decodeDataU8a(registry, u8aToU8a(value));
    } // assume we have an Enum or an  object input, handle this via the normal Enum decoding


    return [value, undefined];
  }
  /**
   * @name Data
   * @description
   * A [[Data]] container with node, raw or hashed data
   */


  class Data extends Enum {
    constructor(registry, value) {
      super(registry, {
        None: 'Null',
        // 0
        Raw: 'Bytes',
        // 1
        // eslint-disable-next-line sort-keys
        BlakeTwo256: 'H256',
        // 2
        Sha256: 'H256',
        // 3
        // eslint-disable-next-line sort-keys
        Keccak256: 'H256',
        // 4
        ShaThree256: 'H256' // 5

      }, ...decodeData(registry, value));
    }

    get asRaw() {
      return this.value;
    }

    get asSha256() {
      return this.value;
    }

    get isRaw() {
      return this.index === 1;
    }

    get isSha256() {
      return this.index === 3;
    }
    /**
     * @description The encoded length
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */


    toU8a() {
      if (this.index === 0) {
        return new Uint8Array(1);
      } else if (this.index === 1) {
        // don't add the length, just the data
        const data = this.value.toU8a(true);
        const length = Math.min(data.length, 32);
        const u8a = new Uint8Array(length + 1);
        u8a.set([data.length + 1], 0);
        u8a.set(data.subarray(0, length), 1);
        return u8a;
      } // otherwise we simply have a hash


      const u8a = new Uint8Array(33);
      u8a.set([this.index + 32], 0);
      u8a.set(this.value.toU8a(), 1);
      return u8a;
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name DoNotConstruct
   * @description
   * An unknown type that fails on construction with the type info
   */

  class DoNotConstruct extends Null {
    constructor(registry, typeName = 'DoNotConstruct') {
      super(registry);
      throw new Error(`Cannot construct unknown type ${typeName}`);
    }

    static with(typeName) {
      return class extends DoNotConstruct {
        constructor(registry) {
          super(registry, typeName);
        }

      };
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name i8
   * @description
   * An 8-bit signed integer
   */

  class i8 extends Int.with(8) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name i16
   * @description
   * A 16-bit signed integer
   */

  class i16 extends Int.with(16) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name i32
   * @description
   * A 32-bit signed integer
   */

  class i32 extends Int.with(32) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name i64
   * @description
   * A 64-bit signed integer
   */

  class i64 extends Int.with(64) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name i128
   * @description
   * A 128-bit signed integer
   */

  class i128 extends Int.with(128) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name i256
   * @description
   * A 256-bit signed integer
   */

  class i256 extends Int.with(256) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  const HASHER_MAP = {
    // opaque
    Blake2_128: [16, false],
    // eslint-disable-line camelcase
    Blake2_128Concat: [16, true],
    // eslint-disable-line camelcase
    Blake2_256: [32, false],
    // eslint-disable-line camelcase
    Identity: [0, true],
    Twox128: [16, false],
    Twox256: [32, false],
    Twox64Concat: [8, true]
  };

  function getStorageType(type) {
    if (type.isPlain) {
      return [false, type.asPlain.toString()];
    } else if (type.isDoubleMap) {
      return [false, type.asDoubleMap.value.toString()];
    }

    return [false, type.asMap.value.toString()];
  } // we unwrap the type here, turning into an output usable for createType

  /** @internal */


  function unwrapStorageType(type, isOptional) {
    const [hasWrapper, outputType] = getStorageType(type);
    return isOptional && !hasWrapper ? `Option<${outputType}>` : outputType;
  }
  /** @internal */

  function decodeStorageKey(value) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    if (value instanceof StorageKey) {
      return {
        key: value,
        method: value.method,
        section: value.section
      };
    } else if (!value || isString(value) || isU8a(value)) {
      // let Bytes handle these inputs
      return {
        key: value
      };
    } else if (isFunction$1(value)) {
      return {
        key: value(),
        method: value.method,
        section: value.section
      };
    } else if (Array.isArray(value)) {
      const [fn, ...arg] = value;
      assert$a(isFunction$1(fn), 'Expected function input for key construction');
      return {
        key: fn(...arg),
        method: fn.method,
        section: fn.section
      };
    }

    throw new Error(`Unable to convert input ${value} to StorageKey`);
  }

  function decodeHashers(registry, value, hashers) {
    // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
    let offset = 32;
    return hashers.reduce((result, [hasher, type]) => {
      const [hashLen, canDecode] = HASHER_MAP[hasher.type];
      const decoded = canDecode ? registry.createType(type, value.subarray(offset + hashLen)) : registry.createType('Raw', value.subarray(offset, offset + hashLen));
      offset += hashLen + (canDecode ? decoded.encodedLength : 0);
      result.push(decoded);
      return result;
    }, []);
  }
  /** @internal */


  function decodeArgsFromMeta(registry, value, meta) {
    if (!meta || !(meta.type.isDoubleMap || meta.type.isMap)) {
      return [];
    }

    if (meta.type.isMap) {
      const mapInfo = meta.type.asMap;
      return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key.toString()]]);
    }

    const mapInfo = meta.type.asDoubleMap;
    return decodeHashers(registry, value, [[mapInfo.hasher, mapInfo.key1.toString()], [mapInfo.key2Hasher, mapInfo.key2.toString()]]);
  }
  /**
   * @name StorageKey
   * @description
   * A representation of a storage key (typically hashed) in the system. It can be
   * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
   */


  class StorageKey extends Bytes {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore This is assigned via this.decodeArgsFromMeta()
    constructor(registry, value, override = {}) {
      const {
        key,
        method,
        section
      } = decodeStorageKey(value);
      super(registry, key);
      this._args = void 0;
      this._meta = void 0;
      this._outputType = void 0;
      this._method = void 0;
      this._section = void 0;
      this._outputType = StorageKey.getType(value); // decode the args (as applicable based on the key and the hashers, after all init)

      this.setMeta(StorageKey.getMeta(value), override.section || section, override.method || method);
    }

    static getMeta(value) {
      if (value instanceof StorageKey) {
        return value.meta;
      } else if (isFunction$1(value)) {
        return value.meta;
      } else if (Array.isArray(value)) {
        const [fn] = value;
        return fn.meta;
      }

      return undefined;
    }

    static getType(value) {
      if (value instanceof StorageKey) {
        return value.outputType;
      } else if (isFunction$1(value)) {
        return unwrapStorageType(value.meta.type);
      } else if (Array.isArray(value)) {
        const [fn] = value;

        if (fn.meta) {
          return unwrapStorageType(fn.meta.type);
        }
      } // If we have no type set, default to Raw


      return 'Raw';
    }
    /**
     * @description Return the decoded arguments (applicable to map/doublemap with decodable values)
     */


    get args() {
      return this._args;
    }
    /**
     * @description The metadata or `undefined` when not available
     */


    get meta() {
      return this._meta;
    }
    /**
     * @description The key method or `undefined` when not specified
     */


    get method() {
      return this._method;
    }
    /**
     * @description The output type
     */


    get outputType() {
      return this._outputType;
    }
    /**
     * @description The key section or `undefined` when not specified
     */


    get section() {
      return this._section;
    }

    is(key) {
      return key.section === this.section && key.method === this.method;
    }
    /**
     * @description Sets the meta for this key
     */


    setMeta(meta, section, method) {
      this._meta = meta;
      this._method = method || this._method;
      this._section = section || this._section;

      if (meta) {
        this._outputType = unwrapStorageType(meta.type);
      }

      try {
        this._args = decodeArgsFromMeta(this.registry, this.toU8a(true), this.meta);
      } catch (error) {// ignore...
      }

      return this;
    }
    /**
     * @description Returns the Human representation for this type
     */


    toHuman() {
      return this._args.length ? this._args.map(arg => arg.toHuman()) : super.toHuman();
    }
    /**
     * @description Returns the raw type for this
     */


    toRawType() {
      return 'StorageKey';
    }

  }

  const MAX_LENGTH = 128 * 1024;
  /** @internal */

  function decodeText(value) {
    if (isHex(value)) {
      return u8aToString(hexToU8a(value.toString()));
    } else if (value instanceof Uint8Array) {
      if (!value.length) {
        return '';
      } // for Raw, the internal buffer does not have an internal length
      // (the same applies in e.g. Bytes, where length is added at encoding-time)


      if (value instanceof Raw) {
        return u8aToString(value);
      }

      const [offset, length] = compactFromU8a(value);
      const total = offset + length.toNumber();
      assert$a(length.lten(MAX_LENGTH), `Text length ${length.toString()} exceeds ${MAX_LENGTH}`);
      assert$a(total <= value.length, `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
      return u8aToString(value.subarray(offset, total));
    }

    return value ? value.toString() : '';
  }
  /**
   * @name Text
   * @description
   * This is a string wrapper, along with the length. It is used both for strings as well
   * as items such as documentation. It simply extends the standard JS `String` built-in
   * object, inheriting all methods exposed from `String`.
   * @noInheritDoc
   */
  // TODO
  //   - Strings should probably be trimmed (docs do come through with extra padding)


  var _override = _classPrivateFieldKey("override");

  class Text extends String {
    constructor(registry, value) {
      super(decodeText(value));
      this.registry = void 0;
      Object.defineProperty(this, _override, {
        writable: true,
        value: null
      });
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.length === 0;
    }
    /**
     * @description The length of the value
     */


    get length() {
      // only included here since we ignore inherited docs
      return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return isString(other) ? this.toString() === other.toString() : false;
    }
    /**
     * @description Set an override value for this
     */


    setOverride(override) {
      _classPrivateFieldBase(this, _override)[_override] = override;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      // like  with Vec<u8>, when we are encoding to hex, we don't actually add
      // the length prefix (it is already implied by the actual string length)
      return u8aToHex(this.toU8a(true));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toString();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Text';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return _classPrivateFieldBase(this, _override)[_override] || super.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      // NOTE Here we use the super toString (we are not taking overrides into account,
      // rather encoding the original value the string was constructed with)
      const encoded = stringToU8a(super.toString());
      return isBare ? encoded : compactAddLength(encoded);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const ALLOWED_BOXES = ['BTreeMap', 'BTreeSet', 'Compact', 'DoNotConstruct', 'HashMap', 'Int', 'Linkage', 'Result', 'Option', 'UInt', 'Vec'];
  const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple

  const mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
  alias(['<T::InherentOfflineReport as InherentOfflineReport>::Inherent'], 'InherentOfflineReport', false), alias(['VecDeque<'], 'Vec<', false), // <T::Balance as HasCompact>
  cleanupCompact(), // Remove all the trait prefixes
  removeTraits(), // remove PairOf<T> -> (T, T)
  removePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`
  removeWrap('Box'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
  removeGenerics(), // alias String -> Text (compat with jsonrpc methods)
  alias(['String'], 'Text'), // alias Vec<u8> -> Bytes
  alias(['Vec<u8>', '&\\[u8\\]'], 'Bytes'), // alias RawAddress -> Address
  alias(['RawAddress'], 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime
  alias(['Lookup::Source'], 'LookupSource'), alias(['Lookup::Target'], 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec
  alias(['exec::StorageKey'], 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`
  flattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
  removeColons()]; // given a starting index, find the closing >

  function findClosing(value, start) {
    let depth = 0;

    for (let index = start; index < value.length; index++) {
      if (value[index] === '>') {
        if (!depth) {
          return index;
        }

        depth--;
      } else if (value[index] === '<') {
        depth++;
      }
    }

    throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
  }
  function alias(src, dest, withChecks = true) {
    return value => {
      return src.reduce((value, src) => {
        return value.replace(new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\${box}${src}`).join('|')})`, 'g'), src => withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest);
      }, value);
    };
  }
  function cleanupCompact() {
    return value => {
      for (let index = 0; index < value.length; index++) {
        if (value[index] !== '<') {
          continue;
        }

        const end = findClosing(value, index + 1) - 14;

        if (value.substr(end, 14) === ' as HasCompact') {
          value = `Compact<${value.substr(index + 1, end - index - 1)}>`;
        }
      }

      return value;
    };
  }
  function flattenSingleTuple() {
    return value => {
      return value.replace(/\(([^,]+)\)/, '$1');
    };
  }
  function removeColons() {
    return (value, {
      allowNamespaces
    } = {}) => {
      let index = 0;

      while (index !== -1) {
        index = value.indexOf('::');

        if (index === 0) {
          value = value.substr(2);
        } else if (index !== -1) {
          if (allowNamespaces) {
            return value;
          }

          let start = index;

          while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
            start--;
          }

          value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;
        }
      }

      return value;
    };
  }
  function removeGenerics() {
    return value => {
      for (let index = 0; index < value.length; index++) {
        if (value[index] === '<') {
          // check against the allowed wrappers, be it Vec<..>, Option<...> ...
          const box = ALLOWED_BOXES.find(box => {
            const start = index - box.length;
            return start >= 0 && value.substr(start, box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
            start === 0 || BOX_PRECEDING.includes(value[start - 1]));
          }); // we have not found anything, unwrap generic innards

          if (!box) {
            const end = findClosing(value, index + 1);
            value = `${value.substr(0, index)}${value.substr(end + 1)}`;
          }
        }
      }

      return value;
    };
  } // remove the PairOf wrappers

  function removePairOf() {
    return value => {
      for (let index = 0; index < value.length; index++) {
        if (value.substr(index, 7) === 'PairOf<') {
          const start = index + 7;
          const end = findClosing(value, start);
          const type = value.substr(start, end - start);
          value = `${value.substr(0, index)}(${type},${type})${value.substr(end + 1)}`;
        }
      }

      return value;
    };
  } // remove the type traits

  function removeTraits() {
    return value => {
      return value // remove all whitespaces
      .replace(/\s/g, '') // anything `T::<type>` to end up as `<type>`
      .replace(/(T|Self)::/g, '') // replace `<T as Trait>::` (whitespaces were removed above)
      .replace(/<(T|Self)asTrait>::/g, '') // replace `<T as something::Trait>::` (whitespaces were removed above)
      .replace(/<Tas[a-z]+::Trait>::/g, '') // replace <Lookup as StaticLookup>
      .replace(/<LookupasStaticLookup>/g, 'Lookup') // replace `<...>::Type`
      .replace(/::Type/g, '');
    };
  } // remove wrapping values, i.e. Box<Proposal> -> Proposal

  function removeWrap(_check) {
    const check = `${_check}<`;
    return value => {
      let index = 0;

      while (index !== -1) {
        index = value.indexOf(check);

        if (index !== -1) {
          const start = index + check.length;
          const end = findClosing(value, start);
          value = `${value.substr(0, index)}${value.substr(start, end - start)}${value.substr(end + 1)}`;
        }
      }

      return value;
    };
  } // eslint-disable-next-line @typescript-eslint/ban-types

  function sanitize(value, options) {
    return mappings.reduce((result, fn) => {
      return fn(result, options);
    }, value.toString()).trim();
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name Type
   * @description
   * This is a extended version of String, specifically to handle types. Here we rely fully
   * on what string provides us, however we also adjust the types received from the runtime,
   * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
   */

  class Type extends Text {
    constructor(registry, value = '') {
      super(registry, value);
      this.setOverride(sanitize(this.toString()));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Type';
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name u8
   * @description
   * An 8-bit unsigned integer
   */

  class u8 extends UInt.with(8) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name u16
   * @description
   * A 16-bit unsigned integer
   */

  class u16 extends UInt.with(16) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name u32
   * @description
   * A 32-bit unsigned integer
   */

  class u32 extends UInt.with(32) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name u64
   * @description
   * A 64-bit unsigned integer
   */

  class u64 extends UInt.with(64) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name u128
   * @description
   * A 128-bit unsigned integer
   */

  class u128 extends UInt.with(128) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name u256
   * @description
   * A 256-bit unsigned integer
   */

  class u256 extends UInt.with(256) {}

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name USize
   * @description
   * A System default unsigned number, typically used in RPC to report non-consensus
   * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
   * It is not to be used, since it created consensus mismatches.
   */

  class usize extends u32 {
    constructor(registry, value) {
      super(registry, value);
      throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
    }

  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  const MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding

  class MagicNumber extends u32 {
    constructor(registry, value) {
      super(registry, value);

      if (!this.isEmpty) {
        const magic = registry.createType('u32', MAGIC_NUMBER);
        assert$a(this.eq(magic), `MagicNumber mismatch: expected ${magic.toHex()}, found ${this.toHex()}`);
      }
    }

  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /** @internal */
  function flattenUniq(list) {
    const flat = list.reduce((result, entry) => {
      return result.concat(Array.isArray(entry) ? flattenUniq(entry) : entry);
    }, []);
    return [...new Set(flat)].filter(value => value).sort();
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Type which says: if `K` is in the InterfaceTypes, then return InterfaceTypes[K], else fallback to T
  let TypeDefInfo;

  (function (TypeDefInfo) {
    TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
    TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
    TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
    TypeDefInfo[TypeDefInfo["Enum"] = 3] = "Enum";
    TypeDefInfo[TypeDefInfo["Linkage"] = 4] = "Linkage";
    TypeDefInfo[TypeDefInfo["Option"] = 5] = "Option";
    TypeDefInfo[TypeDefInfo["Plain"] = 6] = "Plain";
    TypeDefInfo[TypeDefInfo["Result"] = 7] = "Result";
    TypeDefInfo[TypeDefInfo["Set"] = 8] = "Set";
    TypeDefInfo[TypeDefInfo["Struct"] = 9] = "Struct";
    TypeDefInfo[TypeDefInfo["Tuple"] = 10] = "Tuple";
    TypeDefInfo[TypeDefInfo["Vec"] = 11] = "Vec";
    TypeDefInfo[TypeDefInfo["VecFixed"] = 12] = "VecFixed";
    TypeDefInfo[TypeDefInfo["HashMap"] = 13] = "HashMap";
    TypeDefInfo[TypeDefInfo["Int"] = 14] = "Int";
    TypeDefInfo[TypeDefInfo["UInt"] = 15] = "UInt";
    TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 16] = "DoNotConstruct";
    TypeDefInfo[TypeDefInfo["Null"] = 17] = "Null";
  })(TypeDefInfo || (TypeDefInfo = {}));

  // Copyright 2017-2021 @polkadot/types authors & contributors

  function isNotNested(...counters) {
    return !counters.some(counter => counter !== 0);
  } // safely split a string on ', ' while taking care of any nested occurences


  function typeSplit(type) {
    let [cDepth, fDepth, sDepth, tDepth, start] = [0, 0, 0, 0, 0];
    const result = [];

    const extract = index => {
      if (isNotNested(cDepth, fDepth, sDepth, tDepth)) {
        result.push(type.substr(start, index - start).trim());
        start = index + 1;
      }
    };

    for (let index = 0; index < type.length; index++) {
      switch (type[index]) {
        // if we are not nested, add the type
        case ',':
          extract(index);
          break;
        // adjust compact/vec (and friends) depth

        case '<':
          cDepth++;
          break;

        case '>':
          cDepth--;
          break;
        // adjust fixed vec depths

        case '[':
          fDepth++;
          break;

        case ']':
          fDepth--;
          break;
        // adjust struct depth

        case '{':
          sDepth++;
          break;

        case '}':
          sDepth--;
          break;
        // adjust tuple depth

        case '(':
          tDepth++;
          break;

        case ')':
          tDepth--;
          break;
      }
    }

    assert$a(isNotNested(cDepth, fDepth, sDepth, tDepth), `Invalid definition (missing terminators) found in ${type}`); // the final leg of the journey

    result.push(type.substr(start, type.length - start).trim());
    return result;
  }

  function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$A(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const MAX_NESTED = 64;

  function isRustEnum(details) {
    const values = Object.values(details);

    if (values.some(v => isNumber(v))) {
      assert$a(values.every(v => isNumber(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
      return false;
    }

    return true;
  } // decode an enum of either of the following forms
  //  { _enum: ['A', 'B', 'C'] }
  //  { _enum: { A: AccountId, B: Balance, C: u32 } }
  //  { _enum: { A: 1, B: 2 } }


  function _decodeEnum(value, details, count) {
    value.info = TypeDefInfo.Enum; // not as pretty, but remain compatible with oo7 for both struct and Array types

    if (Array.isArray(details)) {
      value.sub = details.map((name, index) => ({
        index,
        info: TypeDefInfo.Plain,
        name,
        type: 'Null'
      }));
    } else if (isRustEnum(details)) {
      value.sub = Object.entries(details).map(([name, type], index) => _objectSpread$A(_objectSpread$A({}, getTypeDef(type || 'Null', {
        name
      }, count)), {}, {
        index
      }));
    } else {
      value.sub = Object.entries(details).map(([name, index]) => ({
        index,
        info: TypeDefInfo.Plain,
        name,
        type: 'Null'
      }));
    }

    return value;
  } // decode a set of the form
  //   { _set: { A: 0b0001, B: 0b0010, C: 0b0100 } }


  function _decodeSet(value, details) {
    value.info = TypeDefInfo.Set;
    value.length = details._bitLength;
    value.sub = Object.entries(details).filter(([name]) => !name.startsWith('_')).map(([name, index]) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: name
    }));
    return value;
  } // decode a struct, set or enum
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function _decodeStruct(value, type, _, count) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const parsed = JSON.parse(type);
    const keys = Object.keys(parsed);

    if (keys.length === 1 && keys[0] === '_enum') {
      return _decodeEnum(value, parsed[keys[0]], count);
    } else if (keys.length === 1 && keys[0] === '_set') {
      return _decodeSet(value, parsed[keys[0]]);
    }

    value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : undefined;
    value.sub = keys.filter(name => !['_alias'].includes(name)).map(name => // eslint-disable-next-line @typescript-eslint/no-use-before-define
    getTypeDef(parsed[name], {
      name
    }, count));
    return value;
  } // decode a fixed vector, e.g. [u8;32]
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function _decodeFixedVec(value, type, _, count) {
    const [vecType, strLength, displayName] = type.substr(1, type.length - 2).split(';');
    const length = parseInt(strLength.trim(), 10); // as a first round, only u8 via u8aFixed, we can add more support

    assert$a(length <= 256, `${type}: Only support for [Type; <length>], where length <= 256`);
    value.displayName = displayName;
    value.length = length; // eslint-disable-next-line @typescript-eslint/no-use-before-define

    value.sub = getTypeDef(vecType, {}, count);
    return value;
  } // decode a tuple


  function _decodeTuple(value, _, subType, count) {
    value.sub = subType.length === 0 ? [] // eslint-disable-next-line @typescript-eslint/no-use-before-define
    : typeSplit(subType).map(inner => getTypeDef(inner, {}, count));
    return value;
  } // decode a Int/UInt<bitLength[, name]>
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function _decodeAnyInt(value, type, _, clazz) {
    const [strLength, displayName] = type.substr(clazz.length + 1, type.length - clazz.length - 1 - 1).split(',');
    const length = parseInt(strLength.trim(), 10); // as a first round, only u8 via u8aFixed, we can add more support

    assert$a(length <= 8192 && length % 8 === 0, `${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
    value.displayName = displayName;
    value.length = length;
    return value;
  }

  function _decodeInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'Int');
  }

  function _decodeUInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'UInt');
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function _decodeDoNotConstruct(value, type, _) {
    const NAME_LENGTH = 'DoNotConstruct'.length;
    value.displayName = type.substr(NAME_LENGTH + 1, type.length - NAME_LENGTH - 1 - 1);
    return value;
  }

  function hasWrapper(type, [start, end]) {
    return type.substr(0, start.length) === start && type.substr(-1 * end.length) === end;
  }

  const nestedExtraction = [['[', ']', TypeDefInfo.VecFixed, _decodeFixedVec], ['{', '}', TypeDefInfo.Struct, _decodeStruct], ['(', ')', TypeDefInfo.Tuple, _decodeTuple], // the inner for these are the same as tuple, multiple values
  ['BTreeMap<', '>', TypeDefInfo.BTreeMap, _decodeTuple], ['HashMap<', '>', TypeDefInfo.HashMap, _decodeTuple], ['Int<', '>', TypeDefInfo.Int, _decodeInt], ['Result<', '>', TypeDefInfo.Result, _decodeTuple], ['UInt<', '>', TypeDefInfo.UInt, _decodeUInt], ['DoNotConstruct<', '>', TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]];
  const wrappedExtraction = [['BTreeSet<', '>', TypeDefInfo.BTreeSet], ['Compact<', '>', TypeDefInfo.Compact], ['Linkage<', '>', TypeDefInfo.Linkage], ['Option<', '>', TypeDefInfo.Option], ['Vec<', '>', TypeDefInfo.Vec]];

  function extractSubType(type, [start, end]) {
    return type.substr(start.length, type.length - start.length - end.length);
  } // eslint-disable-next-line @typescript-eslint/ban-types


  function getTypeDef(_type, {
    displayName,
    name
  } = {}, count = 0) {
    // create the type via Type, allowing types to be sanitized
    const type = sanitize(_type);
    const value = {
      displayName,
      info: TypeDefInfo.Plain,
      name,
      type
    };
    assert$a(++count !== MAX_NESTED, 'getTypeDef: Maximum nested limit reached');
    const nested = nestedExtraction.find(nested => hasWrapper(type, nested));

    if (nested) {
      value.info = nested[2];
      return nested[3](value, type, extractSubType(type, nested), count);
    }

    const wrapped = wrappedExtraction.find(wrapped => hasWrapper(type, wrapped));

    if (wrapped) {
      value.info = wrapped[2];
      value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
    }

    return value;
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors

  /** @internal */
  function extractTypes(types) {
    return types.map(type => {
      const decoded = getTypeDef(type);

      switch (decoded.info) {
        case TypeDefInfo.Plain:
          return decoded.type;

        case TypeDefInfo.BTreeSet:
        case TypeDefInfo.Compact:
        case TypeDefInfo.Option:
        case TypeDefInfo.Vec:
        case TypeDefInfo.VecFixed:
          return extractTypes([decoded.sub.type]);

        case TypeDefInfo.BTreeMap:
        case TypeDefInfo.HashMap:
        case TypeDefInfo.Result:
        case TypeDefInfo.Tuple:
          return extractTypes(decoded.sub.map(({
            type
          }) => type));

        default:
          throw new Error(`Unhandled: Unable to create and validate type from ${type}`);
      }
    });
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  const l$8 = logger('metadata');
  /** @internal */

  function validateTypes(registry, types, throwError) {
    const missing = flattenUniq(extractTypes(types)).filter(type => !registry.hasType(type));

    if (missing.length !== 0) {
      const message = `Unknown types found, no types for ${missing.join(', ')}`;

      if (throwError) {
        throw new Error(message);
      } else {
        l$8.warn(message);
      }
    }
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors

  /** @internal */
  function unwrapCalls(mod) {
    return mod.calls ? mod.calls.unwrapOr([]) // V0
    : mod.module ? mod.module.call.functions : [];
  }
  /** @internal */


  function getCallNames({
    modules
  }) {
    return modules.map(mod => unwrapCalls(mod).map(({
      args
    }) => args.map(arg => arg.type.toString())));
  }
  /** @internal */


  function getConstantNames({
    modules
  }) {
    return modules.map(({
      constants
    }) => constants ? constants.map(constant => constant.type.toString()) : []);
  }
  /** @internal */


  function unwrapEvents(events) {
    if (!events) {
      return [];
    }

    return events.unwrapOr([]);
  }
  /** @internal */


  function getEventNames({
    modules,
    outerEvent
  }) {
    const mapArg = ({
      args
    }) => args.map(arg => arg.toString()); // V0


    if (outerEvent) {
      return outerEvent.events.map(([, events]) => events.map(mapArg));
    } // V1+


    return modules.map(({
      events
    }) => unwrapEvents(events).map(mapArg));
  }
  /** @internal */


  function unwrapStorage(storage) {
    if (!storage) {
      return [];
    }

    const data = storage.unwrapOr([]);
    return Array.isArray(data) ? data : data.items || data.functions;
  }
  /** @internal */


  function getStorageNames({
    modules
  }) {
    return modules.map(({
      storage
    }) => unwrapStorage(storage).map(({
      type
    }) => {
      if (type.isDoubleMap && type.asDoubleMap) {
        return [type.asDoubleMap.key1.toString(), type.asDoubleMap.key2.toString(), type.asDoubleMap.value.toString()];
      } else if (type.isMap) {
        return [type.asMap.key.toString(), type.asMap.value.toString()];
      } else {
        return [type.asPlain.toString()];
      }
    }));
  }
  /** @internal */


  function getUniqTypes(registry, meta, throwError) {
    const types = flattenUniq([getCallNames(meta), getConstantNames(meta), getEventNames(meta), getStorageNames(meta)]);
    validateTypes(registry, types, throwError);
    return types;
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function trimDocs(documentation) {
    const strings = documentation.map(doc => doc.toString().trim());
    const firstEmpty = strings.findIndex(doc => !doc.length);
    return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
  }

  function mapCalls(registry, _calls) {
    const calls = _calls.unwrapOr(null);

    return registry.createType('Option<Vec<FunctionMetadataLatest>>', calls ? calls.map(({
      args,
      documentation,
      name
    }) => registry.createType('FunctionMetadataLatest', {
      args,
      documentation: trimDocs(documentation),
      name
    })) : null);
  }
  /** @internal */


  function toCallsOnly(registry, {
    extrinsic,
    modules
  }) {
    return registry.createType('MetadataLatest', {
      extrinsic,
      modules: modules.map(({
        calls,
        index,
        name
      }) => ({
        calls: mapCalls(registry, calls),
        index,
        name
      }))
    }).toJSON();
  }

  var _converted = _classPrivateFieldKey("converted");

  /**
   * @name MetadataVersioned
   * @description
   * The versioned runtime metadata as a decoded structure
   */
  class MetadataVersioned extends Struct {
    constructor(registry, value) {
      super(registry, {
        magicNumber: MagicNumber,
        metadata: 'MetadataAll'
      }, value);
      Object.defineProperty(this, _converted, {
        writable: true,
        value: new Map()
      });
    }

    _assertVersion(version) {
      assert$a(this.version <= version, `Cannot convert metadata from v${this.version} to v${version}`);
      return this.version === version;
    }

    _getVersion(version, fromPrev) {
      const asCurr = `asV${version}`;
      const asPrev = `asV${version - 1}`;

      if (this._assertVersion(version)) {
        return this._metadata[asCurr];
      }

      if (!_classPrivateFieldBase(this, _converted)[_converted].has(version)) {
        _classPrivateFieldBase(this, _converted)[_converted].set(version, fromPrev(this.registry, this[asPrev], this.version));
      }

      return _classPrivateFieldBase(this, _converted)[_converted].get(version);
    }
    /**
     * @description Returns the wrapped metadata as a limited calls-only (latest) version
     */


    get asCallsOnly() {
      return new MetadataVersioned(this.registry, {
        magicNumber: this.magicNumber,
        metadata: this.registry.createType('MetadataAll', toCallsOnly(this.registry, this.asLatest), this.version)
      });
    }
    /**
     * @description Returns the wrapped metadata as a V9 object
     */


    get asV9() {
      this._assertVersion(9);

      return this._metadata.asV9;
    }
    /**
     * @description Returns the wrapped values as a V10 object
     */


    get asV10() {
      return this._getVersion(10, toV10);
    }
    /**
     * @description Returns the wrapped values as a V11 object
     */


    get asV11() {
      return this._getVersion(11, toV11);
    }
    /**
     * @description Returns the wrapped values as a V12 object
     */


    get asV12() {
      return this._getVersion(12, toV12);
    }
    /**
     * @description Returns the wrapped values as a latest version object
     */


    get asLatest() {
      // This is non-existent & latest - applied here to do the module-specific type conversions
      return this._getVersion(13, toLatest);
    }
    /**
     * @description
     */


    get magicNumber() {
      return this.get('magicNumber');
    }
    /**
     * @description the metadata wrapped
     */


    get _metadata() {
      return this.get('metadata');
    }
    /**
     * @description the metadata version this structure represents
     */


    get version() {
      return this._metadata.index;
    }

    getUniqTypes(throwError) {
      return getUniqTypes(this.registry, this.asLatest, throwError);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      // HACK(y): ensure that we apply the aliasses if we have not done so already, this is
      // needed to ensure we have the overrides as intended (only applied in toLatest)
      // eslint-disable-next-line no-unused-expressions
      this.asLatest;
      return super.toJSON();
    }

  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors

  const VERSION_IDX = 4; // magic + lowest supported version

  const EMPTY_METADATA = u8aConcat(new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]));
  const EMPTY_U8A$2 = new Uint8Array();

  function sanitizeInput(_value = EMPTY_U8A$2) {
    if (isString(_value)) {
      return sanitizeInput(u8aToU8a(_value));
    }

    return _value.length === 0 ? EMPTY_METADATA : _value;
  }

  function decodeMetadata(registry, _value) {
    const value = sanitizeInput(_value);
    const version = value[VERSION_IDX];

    try {
      return new MetadataVersioned(registry, value);
    } catch (error) {
      // This is an f-ing hack as a follow-up to another ugly hack
      // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
      // when we fail on V9, try to re-parse it as v10... yes... HACK
      if (version === 9) {
        value[VERSION_IDX] = 10;
        return decodeMetadata(registry, value);
      }

      throw error;
    }
  }
  /**
   * @name Metadata
   * @description
   * The versioned runtime metadata as a decoded structure
   */


  class Metadata extends MetadataVersioned {
    constructor(registry, value) {
      super(registry, decodeMetadata(registry, value));
    }

  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  /** @internal */

  function decorateConstants(registry, {
    modules
  }) {
    return modules.reduce((result, {
      constants,
      name
    }) => {
      if (constants.isEmpty) {
        return result;
      } // For access, we change the index names, i.e. Democracy.EnactmentPeriod -> democracy.enactmentPeriod


      result[stringCamelCase(name)] = constants.reduce((newModule, meta) => {
        // convert to the natural type as received
        const type = meta.type.toString();
        const codec = registry.createType(type, hexToU8a(meta.value.toHex()));
        codec.meta = meta;
        newModule[stringCamelCase(meta.name)] = codec;
        return newModule;
      }, {});
      return result;
    }, {});
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors

  function isError({
    error,
    index
  }, sectionIndex, errorIndex) {
    return index.eq(sectionIndex) && error.eq(errorIndex);
  }
  /** @internal */


  function decorateErrors(_, {
    modules
  }, metaVersion) {
    return modules.reduce((result, {
      errors,
      index,
      name
    }, _sectionIndex) => {
      if (!errors.length) {
        return result;
      }

      const sectionIndex = metaVersion >= 12 ? index.toNumber() : _sectionIndex;
      result[stringCamelCase(name)] = errors.reduce((newModule, meta, errorIndex) => {
        // we don't camelCase the error name
        newModule[meta.name.toString()] = {
          is: moduleError => isError(moduleError, sectionIndex, errorIndex),
          meta
        };
        return newModule;
      }, {});
      return result;
    }, {});
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors

  function isEvent(event, sectionIndex, eventIndex) {
    return event.index[0] === sectionIndex && event.index[1] === eventIndex;
  }
  /** @internal */


  function decorateEvents(_, {
    modules
  }, metaVersion) {
    return modules.filter(({
      events
    }) => events.isSome).reduce((result, {
      events,
      index,
      name
    }, _sectionIndex) => {
      const sectionIndex = metaVersion >= 12 ? index.toNumber() : _sectionIndex;
      result[stringCamelCase(name)] = events.unwrap().reduce((newModule, meta, eventIndex) => {
        // we don't camelCase the event name
        newModule[meta.name.toString()] = {
          is: eventRecord => isEvent(eventRecord, sectionIndex, eventIndex),
          meta
        };
        return newModule;
      }, {});
      return result;
    }, {});
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors

  function isTx(tx, callIndex) {
    return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
  }
  /** @internal */


  function createUnchecked(registry, section, callIndex, callMetadata) {
    const expectedArgs = callMetadata.args;
    const funcName = stringCamelCase(callMetadata.name);

    const extrinsicFn = (...args) => {
      assert$a(expectedArgs.length === args.length, `Extrinsic ${section}.${funcName} expects ${expectedArgs.length.valueOf()} arguments, got ${args.length}.`);
      return registry.createType('Call', {
        args,
        callIndex
      }, callMetadata);
    };

    extrinsicFn.is = tx => isTx(tx, callIndex);

    extrinsicFn.callIndex = callIndex;
    extrinsicFn.meta = callMetadata;
    extrinsicFn.method = funcName;
    extrinsicFn.section = section;

    extrinsicFn.toJSON = () => callMetadata.toJSON();

    return extrinsicFn;
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  /** @internal */

  function decorateExtrinsics(registry, {
    modules
  }, metaVersion) {
    return modules.filter(({
      calls
    }) => calls.isSome).reduce((result, {
      calls,
      index,
      name
    }, _sectionIndex) => {
      const sectionIndex = metaVersion >= 12 ? index.toNumber() : _sectionIndex;
      const section = stringCamelCase(name);
      result[section] = calls.unwrap().reduce((newModule, callMetadata, methodIndex) => {
        newModule[stringCamelCase(callMetadata.name)] = createUnchecked(registry, section, new Uint8Array([sectionIndex, methodIndex]), callMetadata);
        return newModule;
      }, {});
      return result;
    }, {});
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors

  const DEFAULT_FN = data => xxhashAsU8a(data, 128);

  const HASHERS = {
    Blake2_128: data => // eslint-disable-line camelcase
    blake2AsU8a(data, 128),
    Blake2_128Concat: data => // eslint-disable-line camelcase
    u8aConcat(blake2AsU8a(data, 128), u8aToU8a(data)),
    Blake2_256: data => // eslint-disable-line camelcase
    blake2AsU8a(data, 256),
    Identity: data => u8aToU8a(data),
    Twox128: data => xxhashAsU8a(data, 128),
    Twox256: data => xxhashAsU8a(data, 256),
    Twox64Concat: data => u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data))
  };
  /** @internal */

  function getHasher(hasher) {
    return HASHERS[hasher === null || hasher === void 0 ? void 0 : hasher.type] || DEFAULT_FN;
  }

  function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$z(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const EMPTY_U8A$1 = new Uint8Array([]);

  const NULL_HASHER = value => value; // get the hashers, the base (and  in the case of DoubleMap), the second key

  /** @internal */


  function getHashers({
    meta: {
      type
    }
  }) {
    if (type.isDoubleMap) {
      return [getHasher(type.asDoubleMap.hasher), getHasher(type.asDoubleMap.key2Hasher)];
    } else if (type.isMap) {
      return [getHasher(type.asMap.hasher)];
    } // the default


    return [getHasher()];
  } // create a base prefixed key

  /** @internal */


  function createPrefixedKey({
    method,
    prefix
  }) {
    return u8aConcat(xxhashAsU8a(prefix, 128), xxhashAsU8a(method, 128));
  } // create a key for a DoubleMap type

  /** @internal */


  function createKeyDoubleMap(registry, itemFn, args, [hasher1, hasher2]) {
    const {
      meta: {
        name,
        type
      }
    } = itemFn; // since we are passing an almost-unknown through, trust, but verify

    assert$a(Array.isArray(args) && !isUndefined(args[0]) && !isNull(args[0]) && !isUndefined(args[1]) && !isNull(args[1]), `${(name || 'unknown').toString()} is a DoubleMap and requires two arguments`); // if this fails, we have bigger issues

    assert$a(!isUndefined(hasher2), '2 hashing functions should be defined for DoubleMaps');
    const [key1, key2] = args;
    const map = type.asDoubleMap;
    const val1 = registry.createType(map.key1.toString(), key1).toU8a();
    const val2 = registry.createType(map.key2.toString(), key2).toU8a(); // as per createKey, always add the length prefix (underlying it is Bytes)

    return compactAddLength(u8aConcat(createPrefixedKey(itemFn), hasher1(val1), hasher2(val2)));
  } // create a key for either a map or a plain value

  /** @internal */


  function createKey(registry, itemFn, arg, hasher) {
    const {
      meta: {
        name,
        type
      }
    } = itemFn;
    let param = EMPTY_U8A$1;

    if (type.isMap) {
      const map = type.asMap;
      assert$a(!isUndefined(arg) && !isNull(arg), `${name.toString()} is a Map and requires one argument`);
      param = registry.createType(map.key.toString(), arg).toU8a();
    } // StorageKey is a Bytes, so is length-prefixed


    return compactAddLength(u8aConcat(createPrefixedKey(itemFn), param.length ? hasher(param) : EMPTY_U8A$1));
  } // attach the metadata to expand to a StorageFunction

  /** @internal */


  function expandWithMeta({
    meta,
    method,
    prefix,
    section
  }, _storageFn) {
    const storageFn = _storageFn;
    storageFn.meta = meta;
    storageFn.method = stringLowerFirst(method);
    storageFn.prefix = prefix;
    storageFn.section = section; // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
    // instances (e.g. collective) will not work since it is only matched on param meta

    storageFn.toJSON = () => _objectSpread$z(_objectSpread$z({}, meta.toJSON()), {}, {
      storage: {
        method,
        prefix,
        section
      }
    });

    return storageFn;
  }
  /** @internal */


  function extendHeadMeta(registry, {
    meta: {
      documentation,
      name,
      type
    },
    section
  }, {
    method
  }, iterFn) {
    const outputType = type.isMap ? type.asMap.key.toString() : type.asDoubleMap.key1.toString(); // metadata with a fallback value using the type of the key, the normal
    // meta fallback only applies to actual entry values, create one for head

    iterFn.meta = registry.createType('StorageEntryMetadataLatest', {
      documentation,
      fallback: registry.createType('Bytes', registry.createType(outputType).toHex()),
      modifier: registry.createType('StorageEntryModifierLatest', 1),
      // required
      name,
      type: registry.createType('StorageEntryTypeLatest', registry.createType('Type', type.isMap ? type.asMap.key : type.asDoubleMap.key1), 0)
    });
    const prefixKey = registry.createType('StorageKey', iterFn, {
      method,
      section
    });
    return arg => !isUndefined(arg) && !isNull(arg) ? registry.createType('StorageKey', iterFn(arg), {
      method,
      section
    }) : prefixKey;
  } // attach the full list hashing for prefixed maps

  /** @internal */


  function extendPrefixedMap(registry, itemFn, storageFn) {
    const {
      meta: {
        type
      }
    } = itemFn;
    storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, arg => {
      assert$a(type.isDoubleMap || isUndefined(arg), 'Filtering arguments for keys/entries are only valid on double maps');
      return new Raw(registry, type.isDoubleMap && !isUndefined(arg) && !isNull(arg) ? u8aConcat(createPrefixedKey(itemFn), getHasher(type.asDoubleMap.hasher)(registry.createType(type.asDoubleMap.key1.toString(), arg).toU8a())) : createPrefixedKey(itemFn));
    });
    return storageFn;
  }
  /** @internal */


  function createFunction(registry, itemFn, options) {
    const {
      meta: {
        type
      }
    } = itemFn;
    const [hasher, key2Hasher] = getHashers(itemFn); // Can only have zero or one argument:
    //   - storage.system.account(address)
    //   - storage.timestamp.blockPeriod()
    // For doublemap queries the params is passed in as an tuple, [key1, key2]

    const storageFn = expandWithMeta(itemFn, arg => type.isDoubleMap ? createKeyDoubleMap(registry, itemFn, arg, [hasher, key2Hasher]) : createKey(registry, itemFn, arg, options.skipHashing ? NULL_HASHER : hasher));

    if (type.isMap || type.isDoubleMap) {
      extendPrefixedMap(registry, itemFn, storageFn);
    }

    storageFn.keyPrefix = arg => storageFn.iterKey && storageFn.iterKey(arg) || compactStripLength(storageFn())[1];

    return storageFn;
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors

  // Small helper function to factorize code on this page.

  /** @internal */
  function createRuntimeFunction(method, key, {
    documentation,
    type
  }) {
    return (registry, metaVersion) => createFunction(registry, {
      meta: {
        documentation: registry.createType('Vec<Text>', [documentation]),
        modifier: registry.createType('StorageEntryModifierLatest', 1),
        // required
        toJSON: () => key,
        type: registry.createType('StorageEntryTypeLatest', type, 0)
      },
      method,
      prefix: 'Substrate',
      section: 'substrate'
    }, {
      key,
      metaVersion,
      skipHashing: true
    });
  }

  const code = createRuntimeFunction('code', ':code', {
    documentation: 'Wasm code of the runtime.',
    type: 'Bytes'
  });
  const heapPages = createRuntimeFunction('heapPages', ':heappages', {
    documentation: 'Number of wasm linear memory pages required for execution of the runtime.',
    type: 'u64'
  });
  const extrinsicIndex = createRuntimeFunction('extrinsicIndex', ':extrinsic_index', {
    documentation: 'Current extrinsic index (u32) is stored under this key.',
    type: 'u32'
  });
  const changesTrieConfig = createRuntimeFunction('changesTrieConfig', ':changes_trie', {
    documentation: 'Changes trie configuration is stored under this key.',
    type: 'u32'
  });
  const childStorageKeyPrefix = createRuntimeFunction('childStorageKeyPrefix', ':child_storage:', {
    documentation: 'Prefix of child storage keys.',
    type: 'u32'
  });

  var substrate$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    code: code,
    heapPages: heapPages,
    extrinsicIndex: extrinsicIndex,
    changesTrieConfig: changesTrieConfig,
    childStorageKeyPrefix: childStorageKeyPrefix
  });

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  /** @internal */

  function getStorage(registry, metaVersion) {
    return {
      substrate: Object.entries(substrate$1).reduce((storage, [key, fn]) => {
        storage[key] = fn(registry, metaVersion);
        return storage;
      }, {})
    };
  }

  function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$y(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  /** @internal */

  function decorateStorage(registry, {
    modules
  }, metaVersion) {
    return modules.reduce((result, moduleMetadata) => {
      if (moduleMetadata.storage.isNone) {
        return result;
      }

      const {
        name
      } = moduleMetadata;
      const section = stringCamelCase(name);
      const unwrapped = moduleMetadata.storage.unwrap();
      const prefix = unwrapped.prefix.toString(); // For access, we change the index names, i.e. System.Account -> system.account

      result[section] = unwrapped.items.reduce((newModule, meta) => {
        const method = meta.name.toString();
        newModule[stringLowerFirst(method)] = createFunction(registry, {
          meta,
          method,
          prefix,
          section
        }, {
          metaVersion
        });
        return newModule;
      }, {});
      return result;
    }, _objectSpread$y({}, getStorage(registry, metaVersion)));
  }

  // Copyright 2017-2021 @polkadot/metadata authors & contributors
  /**
   * Expands the metadata by decoration into consts, query and tx sections
   */

  function expandMetadata(registry, metadata) {
    assert$a(metadata instanceof Metadata, 'You need to pass a valid Metadata instance to Decorated');
    const latest = metadata.asLatest;
    return {
      consts: decorateConstants(registry, latest),
      errors: decorateErrors(registry, latest, metadata.version),
      events: decorateEvents(registry, latest, metadata.version),
      query: decorateStorage(registry, latest, metadata.version),
      tx: decorateExtrinsics(registry, latest, metadata.version)
    };
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  function createClass$1(registry, type) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    return getTypeClass(registry, getTypeDef(type));
  } // An unsafe version of the `createType` below. It's unsafe because the `type`

  function getSubDefArray(value) {
    assert$a(value.sub && Array.isArray(value.sub), `Expected subtype as TypeDef[] in ${JSON.stringify(value)}`);
    return value.sub;
  }

  function getSubDef(value) {
    assert$a(value.sub && !Array.isArray(value.sub), `Expected subtype as TypeDef in ${JSON.stringify(value)}`);
    return value.sub;
  }

  function getSubType(value) {
    return getSubDef(value).type;
  } // create a maps of type string constructors from the input


  function getTypeClassMap(value) {
    const result = {};
    return getSubDefArray(value).reduce((result, sub) => {
      result[sub.name] = sub.type;
      return result;
    }, result);
  } // create an array of type string constructors from the input


  function getTypeClassArray(value) {
    return getSubDefArray(value).map(({
      type
    }) => type);
  }

  function createInt({
    displayName,
    length
  }, Clazz) {
    assert$a(isNumber(length), `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
    return Clazz.with(length, displayName);
  }

  function createHashMap(value, Clazz) {
    const [keyType, valueType] = getTypeClassArray(value);
    return Clazz.with(keyType, valueType);
  }

  const infoMapping = {
    [TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(value, BTreeMap),
    [TypeDefInfo.BTreeSet]: (registry, value) => BTreeSet.with(getSubType(value)),
    [TypeDefInfo.Compact]: (registry, value) => Compact.with(getSubType(value)),
    [TypeDefInfo.DoNotConstruct]: (registry, value) => DoNotConstruct.with(value.displayName),
    [TypeDefInfo.Enum]: (registry, value) => {
      const subs = getSubDefArray(value);
      return Enum.with(subs.every(({
        type
      }) => type === 'Null') ? subs.reduce((out, {
        index,
        name
      }, count) => {
        out[name] = index || count;
        return out;
      }, {}) : getTypeClassMap(value));
    },
    [TypeDefInfo.HashMap]: (registry, value) => createHashMap(value, HashMap),
    [TypeDefInfo.Int]: (registry, value) => createInt(value, Int),
    // We have circular deps between Linkage & Struct
    [TypeDefInfo.Linkage]: (registry, value) => {
      const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys

      const Clazz = Struct.with({
        previous: type,
        next: type
      }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

      Clazz.prototype.toRawType = function () {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
        return `Linkage<${this.next.toRawType(true)}>`;
      };

      return Clazz;
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Null]: (registry, _) => createClass$1(registry, 'Null'),
    [TypeDefInfo.Option]: (registry, value) => Option.with(getSubType(value)),
    [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
    [TypeDefInfo.Result]: (registry, value) => {
      const [Ok, Err] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define

      return Result.with({
        Err,
        Ok
      });
    },
    [TypeDefInfo.Set]: (registry, value) => {
      const result = {};
      return CodecSet.with(getSubDefArray(value).reduce((result, {
        index,
        name
      }) => {
        result[name] = index;
        return result;
      }, result), value.length);
    },
    [TypeDefInfo.Struct]: (registry, value) => Struct.with(getTypeClassMap(value), value.alias),
    [TypeDefInfo.Tuple]: (registry, value) => Tuple.with(getTypeClassArray(value)),
    [TypeDefInfo.UInt]: (registry, value) => createInt(value, UInt),
    [TypeDefInfo.Vec]: (registry, value) => {
      const subType = getSubType(value);
      return subType === 'u8' ? createClass$1(registry, 'Bytes') : Vec.with(subType);
    },
    [TypeDefInfo.VecFixed]: (registry, {
      displayName,
      length,
      sub
    }) => {
      assert$a(isNumber(length) && !isUndefined(sub), 'Expected length & type information for fixed vector');
      return sub.type === 'u8' ? U8aFixed.with(length * 8, displayName) : VecFixed.with(sub.type, length);
    }
  }; // Returns the type Class for construction

  function getTypeClass(registry, value) {
    const Type = registry.get(value.type);

    if (Type) {
      return Type;
    }

    const getFn = infoMapping[value.info];
    assert$a(getFn, `Unable to construct class from ${JSON.stringify(value)}`);
    return getFn(registry, value);
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  const l$7 = logger('registry');

  function u8aHasValue(value) {
    return value.some(v => !!v);
  } // With isPedantic, actually check that the encoding matches that supplied. This
  // is much slower, but verifies that we have the correct types defined


  function checkInstance(value, created) {
    // the underlying type created.toRawType()
    const rawType = created.toRawType(); // ignore bytes completely - this is probably a FIXME, since these are somewhat
    // breaking for at least online queries - not quite sure wtf is going wrong here

    if (rawType === 'Bytes') {
      return;
    } // the hex values for what we have


    const inHex = u8aToHex(value);
    const crHex = created.toHex(); // Check equality, based on some different approaches (as decoded)

    const isEqual = inHex === crHex || // raw hex values, quick path
    inHex === created.toHex(true) || // wrapped options
    u8aToHex(value.reverse()) === crHex; // reverse (for numbers, which are BE)
    // if the hex doesn't match and the value for both is non-empty, complain... bitterly

    if (!isEqual && (u8aHasValue(value) || u8aHasValue(created.toU8a(true)))) {
      l$7.warn(`${rawType}:: Input doesn't match output, received ${u8aToHex(value)}, created ${crHex}`);
    }
  } // Initializes a type with a value. This also checks for fallbacks and in the cases
  // where isPedantic is specified (storage decoding), also check the format/structure


  function initType(registry, Type, params = [], isPedantic) {
    const created = new Type(registry, ...params); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

    const [value] = params;

    if (isPedantic && isU8a(value)) {
      checkInstance(value, created);
    }

    return created;
  } // An unsafe version of the `createType` below. It's unsafe because the `type`
  // argument here can be any string, which, when it cannot parse, will yield a
  // runtime error.


  function createTypeUnsafe(registry, type, params = [], {
    withoutLog
  } = {}) {
    try {
      // Circle back to isPedantic when it handles all cases 100% - as of now,
      // it provides false warning which is more hinderance than help
      return initType(registry, createClass$1(registry, type), params); // , isPedantic);
    } catch (error) {
      !withoutLog && l$7.error(error);
      throw new Error(`createType(${type}):: ${error.message}`);
    }
  }
  /**
   * Create an instance of a `type` with a given `params`.
   * @param type - A recognizable string representing the type to create an
   * instance from
   * @param params - The value to instantiate the type with
   */

  function createType(registry, type, ...params) {
    return createTypeUnsafe(registry, type, params);
  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const emptyCheck = {
    extrinsic: {},
    payload: {}
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  const polkadot = {
    LimitParathreadCommits: emptyCheck,
    OnlyStakingAndClaims: emptyCheck,
    PrevalidateAttests: emptyCheck,
    RestrictFunctionality: emptyCheck,
    TransactionCallFilter: emptyCheck,
    ValidateDoubleVoteReports: emptyCheck
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  const CheckMortality = {
    extrinsic: {
      era: 'ExtrinsicEra'
    },
    payload: {
      blockHash: 'Hash'
    }
  };
  const substrate = {
    ChargeTransactionPayment: {
      extrinsic: {
        tip: 'Compact<Balance>'
      },
      payload: {}
    },
    CheckBlockGasLimit: emptyCheck,
    CheckEra: CheckMortality,
    CheckGenesis: {
      extrinsic: {},
      payload: {
        genesisHash: 'Hash'
      }
    },
    CheckMortality,
    CheckNonce: {
      extrinsic: {
        nonce: 'Compact<Index>'
      },
      payload: {}
    },
    CheckSpecVersion: {
      extrinsic: {},
      payload: {
        specVersion: 'u32'
      }
    },
    CheckTxVersion: {
      extrinsic: {},
      payload: {
        transactionVersion: 'u32'
      }
    },
    CheckVersion: {
      extrinsic: {},
      payload: {
        specVersion: 'u32'
      }
    },
    CheckWeight: emptyCheck,
    LockStakingStatus: emptyCheck,
    ValidateEquivocationReport: emptyCheck
  };

  function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$x(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  // we define the extra fields not as a Tuple, but rather as a struct so they can be named. These will be expanded
  // into the various fields when added to the payload (we only support V4 onwards with these, V3 and earlier are
  // deemed fixed and non-changeable)

  const allExtensions = _objectSpread$x(_objectSpread$x({}, substrate), polkadot); // the v4 signed extensions (the order is important here, as applied by default)


  const defaultExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];

  function findUnknownExtensions(extensions, userExtensions = {}) {
    const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
    return extensions.filter(key => !names.includes(key));
  }

  function expandExtensionTypes(extensions, type, userExtensions = {}) {
    return extensions // Always allow user extensions first - these should provide overrides
    .map(key => userExtensions[key] || allExtensions[key]).filter(info => !!info).reduce((result, info) => _objectSpread$x(_objectSpread$x({}, result), info[type]), {});
  }

  function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$w(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  /**
   * @name GenericEventData
   * @description
   * Wrapper for the actual data that forms part of an [[Event]]
   */

  var _meta = _classPrivateFieldKey("meta");

  var _method = _classPrivateFieldKey("method");

  var _section = _classPrivateFieldKey("section");

  var _typeDef = _classPrivateFieldKey("typeDef");

  class GenericEventData extends Tuple {
    constructor(registry, value, Types = [], typeDef = [], meta, section = '<unknown>', method = '<unknown>') {
      super(registry, Types, value);
      Object.defineProperty(this, _meta, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _method, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _section, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _typeDef, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _meta)[_meta] = meta;
      _classPrivateFieldBase(this, _method)[_method] = method;
      _classPrivateFieldBase(this, _section)[_section] = section;
      _classPrivateFieldBase(this, _typeDef)[_typeDef] = typeDef;
    }
    /**
     * @description The wrapped [[EventMetadata]]
     */


    get meta() {
      return _classPrivateFieldBase(this, _meta)[_meta];
    }
    /**
     * @description The method as a string
     */


    get method() {
      return _classPrivateFieldBase(this, _method)[_method];
    }
    /**
     * @description The section as a string
     */


    get section() {
      return _classPrivateFieldBase(this, _section)[_section];
    }
    /**
     * @description The [[TypeDef]] for this event
     */


    get typeDef() {
      return _classPrivateFieldBase(this, _typeDef)[_typeDef];
    }

  }
  /**
   * @name GenericEvent
   * @description
   * A representation of a system event. These are generated via the [[Metadata]] interfaces and
   * specific to a specific Substrate runtime
   */

  class GenericEvent extends Struct {
    // Currently we _only_ decode from Uint8Array, since we expect it to
    // be used via EventRecord
    constructor(registry, _value) {
      const {
        DataType,
        value
      } = GenericEvent.decodeEvent(registry, _value);
      super(registry, {
        index: 'EventId',
        // eslint-disable-next-line sort-keys
        data: DataType
      }, value);
    }
    /** @internal */


    static decodeEvent(registry, value = new Uint8Array()) {
      if (!value.length) {
        return {
          DataType: Null
        };
      }

      const index = value.subarray(0, 2);
      return {
        DataType: registry.findMetaEvent(index),
        value: {
          data: value.subarray(2),
          index
        }
      };
    }
    /**
     * @description The wrapped [[EventData]]
     */


    get data() {
      return this.get('data');
    }
    /**
     * @description The [[EventId]], identifying the raw event
     */


    get index() {
      return this.get('index');
    }
    /**
     * @description The [[EventMetadata]] with the documentation
     */


    get meta() {
      return this.data.meta;
    }
    /**
     * @description The method string identifying the event
     */


    get method() {
      return this.data.method;
    }
    /**
     * @description The section string identifying the event
     */


    get section() {
      return this.data.section;
    }
    /**
     * @description The [[TypeDef]] for the event
     */


    get typeDef() {
      return this.data.typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExpanded) {
      return _objectSpread$w(_objectSpread$w({
        method: this.method,
        section: this.section
      }, isExpanded ? {
        documentation: this.meta.documentation.map(d => d.toString())
      } : {}), super.toHuman(isExpanded));
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name Base
   * @description A type extends the Base class, when it holds a value
   */
  class Base {
    constructor(registry, value) {
      this.registry = void 0;
      this._raw = void 0;
      this.registry = registry;
      this._raw = value;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this._raw.isEmpty;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return this._raw.eq(other);
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */


    toHex(isLe) {
      return this._raw.toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return this._raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this._raw.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this._raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return this._raw.toU8a(isBare);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Base';
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const BIT_SIGNED = 0b10000000;
  const BIT_UNSIGNED = 0;
  const EMPTY_U8A = new Uint8Array();
  const DEFAULT_VERSION = 4;
  const IMMORTAL_ERA = new Uint8Array([0]);
  const UNMASK_VERSION = 0b01111111;

  // Copyright 2017-2021 @polkadot/types authors & contributors
  const EXTRINSIC_VERSION = 4;

  /**
   * @name GenericExtrinsicV4
   * @description
   * The third generation of compact extrinsics
   */
  class GenericExtrinsicV4 extends Struct {
    constructor(registry, value, {
      isSigned
    } = {}) {
      super(registry, {
        signature: 'ExtrinsicSignatureV4',
        // eslint-disable-next-line sort-keys
        method: 'Call'
      }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
    }
    /** @internal */


    static decodeExtrinsic(registry, value, isSigned = false) {
      if (value instanceof GenericExtrinsicV4) {
        return value;
      } else if (value instanceof registry.createClass('Call')) {
        return {
          method: value
        };
      } else if (isU8a(value)) {
        // here we decode manually since we need to pull through the version information
        const signature = registry.createType('ExtrinsicSignatureV4', value, {
          isSigned
        });
        const method = registry.createType('Call', value.subarray(signature.encodedLength));
        return {
          method,
          signature
        };
      }

      return value || {};
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */


    get method() {
      return this.get('method');
    }
    /**
     * @description The [[ExtrinsicSignatureV4]]
     */


    get signature() {
      return this.get('signature');
    }
    /**
     * @description The version for the signature
     */


    get version() {
      return EXTRINSIC_VERSION;
    }
    /**
     * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
     */


    addSignature(signer, signature, payload) {
      this.signature.addSignature(signer, signature, payload);
      return this;
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */


    sign(account, options) {
      this.signature.sign(this.method, account, options);
      return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */


    signFake(signer, options) {
      this.signature.signFake(this.method, signer, options);
      return this;
    }

  }

  function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$v(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const VERSIONS$1 = ['ExtrinsicUnknown', // v0 is unknown
  'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];

  class ExtrinsicBase extends Base {
    /**
     * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
     */
    get args() {
      return this.method.args;
    }
    /**
     * @description The argument definitions, compatible with [[Call]]
     */


    get argsDef() {
      return this.method.argsDef;
    }
    /**
     * @description The actual `[sectionIndex, methodIndex]` as used in the Call
     */


    get callIndex() {
      return this.method.callIndex;
    }
    /**
     * @description The actual data for the Call
     */


    get data() {
      return this.method.data;
    }
    /**
     * @description The era for this extrinsic
     */


    get era() {
      return this._raw.signature.era;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description `true` id the extrinsic is signed
     */


    get isSigned() {
      return this._raw.signature.isSigned;
    }
    /**
     * @description The length of the actual data, excluding prefix
     */


    get length() {
      return this.toU8a(true).length;
    }
    /**
     * @description The [[FunctionMetadataLatest]] that describes the extrinsic
     */


    get meta() {
      return this.method.meta;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */


    get method() {
      return this._raw.method;
    }
    /**
     * @description The nonce for this extrinsic
     */


    get nonce() {
      return this._raw.signature.nonce;
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */


    get signature() {
      return this._raw.signature.signature;
    }
    /**
     * @description The [[Address]] that signed
     */


    get signer() {
      return this._raw.signature.signer;
    }
    /**
     * @description Forwards compat
     */


    get tip() {
      return this._raw.signature.tip;
    }
    /**
     * @description Returns the raw transaction version (not flagged with signing information)
    */


    get type() {
      return this._raw.version;
    }
    /**
     * @description Returns the encoded version flag
    */


    get version() {
      return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
    }
    /**
     * @description Checks if the source matches this in type
     */


    is(other) {
      return this.method.is(other);
    }

  }
  /**
   * @name GenericExtrinsic
   * @description
   * Representation of an Extrinsic in the system. It contains the actual call,
   * (optional) signature and encodes with an actual length prefix
   *
   * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
   *
   * Can be:
   * - signed, to create a transaction
   * - left as is, to create an inherent
   */


  class GenericExtrinsic extends ExtrinsicBase {
    constructor(registry, value, {
      version
    } = {}) {
      super(registry, GenericExtrinsic._decodeExtrinsic(registry, value, version));
    }
    /** @internal */


    static _newFromValue(registry, value, version) {
      if (value instanceof GenericExtrinsic) {
        return value._raw;
      }

      const isSigned = (version & BIT_SIGNED) === BIT_SIGNED;
      const type = VERSIONS$1[version & UNMASK_VERSION] || VERSIONS$1[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a
      // slice for "only add extrinsic types", and more string definitions become unwieldy

      return registry.createType(type, value, {
        isSigned,
        version
      });
    }
    /** @internal */


    static _decodeExtrinsic(registry, value, version = DEFAULT_VERSION) {
      if (isU8a(value) || Array.isArray(value) || isHex(value)) {
        return GenericExtrinsic._decodeU8a(registry, u8aToU8a(value), version);
      } else if (value instanceof registry.createClass('Call')) {
        return GenericExtrinsic._newFromValue(registry, {
          method: value
        }, version);
      }

      return GenericExtrinsic._newFromValue(registry, value, version);
    }
    /** @internal */


    static _decodeU8a(registry, value, version) {
      if (!value.length) {
        return GenericExtrinsic._newFromValue(registry, new Uint8Array(), version);
      }

      const [offset, length] = compactFromU8a(value);
      const total = offset + length.toNumber();
      assert$a(total <= value.length, `Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
      const data = value.subarray(offset, total);
      return GenericExtrinsic._newFromValue(registry, data.subarray(1), data[0]);
    }
    /**
     * @description Injects an already-generated signature into the extrinsic
     */


    addSignature(signer, signature, payload) {
      this._raw.addSignature(signer, signature, payload);

      return this;
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */


    sign(account, options) {
      this._raw.sign(account, options);

      return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */


    signFake(signer, options) {
      this._raw.signFake(signer, options);

      return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex(isBare) {
      return u8aToHex(this.toU8a(isBare));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExpanded) {
      return _objectSpread$v({
        isSigned: this.isSigned,
        method: this.method.toHuman(isExpanded)
      }, this.isSigned ? {
        era: this.era.toHuman(isExpanded),
        nonce: this.nonce.toHuman(isExpanded),
        signature: this.signature.toHex(),
        signer: this.signer.toHuman(isExpanded),
        tip: this.tip.toHuman(isExpanded)
      } : {});
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Extrinsic';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value is not length-prefixed
     */


    toU8a(isBare) {
      // we do not apply bare to the internal values, rather this only determines out length addition,
      // where we strip all lengths this creates an extrinsic that cannot be decoded
      const encoded = u8aConcat(new Uint8Array([this.version]), this._raw.toU8a());
      return isBare ? encoded : compactAddLength(encoded);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  function getTrailingZeros(period) {
    const binary = period.toString(2);
    let index = 0;

    while (binary[binary.length - 1 - index] === '0') {
      index++;
    }

    return index;
  }
  /**
   * @name ImmortalEra
   * @description
   * The ImmortalEra for an extrinsic
   */


  class ImmortalEra extends Raw {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    constructor(registry, value) {
      // For immortals, we always provide the known value (i.e. treated as a
      // constant no matter how it is constructed - it is a fixed structure)
      super(registry, IMMORTAL_ERA);
    }

  }
  /**
   * @name MortalEra
   * @description
   * The MortalEra for an extrinsic, indicating period and phase
   */

  class MortalEra extends Tuple {
    constructor(registry, value) {
      super(registry, {
        period: u64,
        phase: u64
      }, MortalEra._decodeMortalEra(registry, value));
    }
    /** @internal */


    static _decodeMortalEra(registry, value) {
      if (!value) {
        return [new u64(registry), new u64(registry)];
      } else if (isU8a(value) || isHex(value) || Array.isArray(value)) {
        return MortalEra._decodeMortalU8a(registry, u8aToU8a(value));
      } else if (isObject$1(value)) {
        return MortalEra._decodeMortalObject(registry, value);
      }

      throw new Error('Invalid data passed to Mortal era');
    }
    /** @internal */


    static _decodeMortalObject(registry, value) {
      const {
        current,
        period
      } = value;
      let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
      calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
      const phase = current % calPeriod;
      const quantizeFactor = Math.max(calPeriod >> 12, 1);
      const quantizedPhase = phase / quantizeFactor * quantizeFactor;
      return [new u64(registry, calPeriod), new u64(registry, quantizedPhase)];
    }
    /** @internal */


    static _decodeMortalU8a(registry, value) {
      if (value.length === 0) {
        return [new u64(registry), new u64(registry)];
      }

      const first = u8aToBn(value.subarray(0, 1)).toNumber();
      const second = u8aToBn(value.subarray(1, 2)).toNumber();
      const encoded = first + (second << 8);
      const period = 2 << encoded % (1 << 4);
      const quantizeFactor = Math.max(period >> 12, 1);
      const phase = (encoded >> 4) * quantizeFactor;
      assert$a(period >= 4 && phase < period, 'Invalid data passed to Mortal era');
      return [new u64(registry, period), new u64(registry, phase)];
    }
    /**
     * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
     */


    get encodedLength() {
      return 2;
    }
    /**
     * @description The period of this Mortal wraps as a [[U64]]
     */


    get period() {
      return this[0];
    }
    /**
     * @description The phase of this Mortal wraps as a [[U64]]
     */


    get phase() {
      return this[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return {
        period: formatNumber(this.period),
        phase: formatNumber(this.phase)
      };
    }
    /**
     * @description Returns a JSON representation of the actual value
     */


    toJSON() {
      return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     * Period and phase are encoded:
     *   - The period of validity from the block hash found in the signing material.
     *   - The phase in the period that this transaction's lifetime begins (and, importantly,
     *     implies which block hash is included in the signature material). If the `period` is
     *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
     *     `period` is.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      const period = this.period.toNumber();
      const phase = this.phase.toNumber();
      const quantizeFactor = Math.max(period >> 12, 1);
      const trailingZeros = getTrailingZeros(period);
      const encoded = Math.min(15, Math.max(1, trailingZeros - 1)) + (phase / quantizeFactor << 4);
      const first = encoded >> 8;
      const second = encoded & 0xff;
      return new Uint8Array([second, first]);
    }
    /**
     * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
     */


    birth(current) {
      // FIXME No toNumber() here
      return Math.floor((Math.max(bnToBn(current).toNumber(), this.phase.toNumber()) - this.phase.toNumber()) / this.period.toNumber()) * this.period.toNumber() + this.phase.toNumber();
    }
    /**
     * @description Get the block number of the first block at which the era has ended.
     */


    death(current) {
      // FIXME No toNumber() here
      return this.birth(current) + this.period.toNumber();
    }

  }
  /**
   * @name GenericExtrinsicEra
   * @description
   * The era for an extrinsic, indicating either a mortal or immortal extrinsic
   */

  class GenericExtrinsicEra extends Enum {
    constructor(registry, value) {
      super(registry, {
        ImmortalEra,
        MortalEra
      }, GenericExtrinsicEra._decodeExtrinsicEra(value));
    }
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/ban-types


    static _decodeExtrinsicEra(value = new Uint8Array()) {
      if (value instanceof GenericExtrinsicEra) {
        return GenericExtrinsicEra._decodeExtrinsicEra(value.toU8a());
      } else if (isHex(value)) {
        return GenericExtrinsicEra._decodeExtrinsicEra(hexToU8a(value));
      } else if (!value || isU8a(value)) {
        return !(value !== null && value !== void 0 && value.length) || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
      } else if (isObject$1(value)) {
        // this is to de-serialize from JSON
        return value.MortalEra ? {
          MortalEra: value.MortalEra
        } : value.ImmortalEra ? {
          ImmortalEra: value.ImmortalEra
        } : {
          MortalEra: value
        };
      }

      throw new Error('Invalid data passed to Era');
    }
    /**
     * @description Override the encoded length method
     */


    get encodedLength() {
      return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
    }
    /**
     * @description Returns the item as a [[ImmortalEra]]
     */


    get asImmortalEra() {
      assert$a(this.isImmortalEra, `Cannot convert '${this.type}' via asImmortalEra`);
      return this.value;
    }
    /**
     * @description Returns the item as a [[MortalEra]]
     */


    get asMortalEra() {
      assert$a(this.isMortalEra, `Cannot convert '${this.type}' via asMortalEra`);
      return this.value;
    }
    /**
     * @description `true` if Immortal
     */


    get isImmortalEra() {
      return this.index === 0;
    }
    /**
     * @description `true` if Mortal
     */


    get isMortalEra() {
      return this.index > 0;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  const VERSIONS = ['ExtrinsicPayloadUnknown', // v0 is unknown
  'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadV4'];
  /**
   * @name GenericExtrinsicPayload
   * @description
   * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
   * on the contents included
   */

  class GenericExtrinsicPayload extends Base {
    constructor(registry, value, {
      version
    } = {}) {
      super(registry, GenericExtrinsicPayload.decodeExtrinsicPayload(registry, value, version));
    }
    /** @internal */


    static decodeExtrinsicPayload(registry, value, version = DEFAULT_VERSION) {
      if (value instanceof GenericExtrinsicPayload) {
        return value._raw;
      }

      return registry.createType(VERSIONS[version] || VERSIONS[0], value, {
        version
      });
    }
    /**
     * @description The block [[Hash]] the signature applies to (mortal/immortal)
     */


    get blockHash() {
      return this._raw.blockHash;
    }
    /**
     * @description The [[ExtrinsicEra]]
     */


    get era() {
      return this._raw.era;
    }
    /**
     * @description The genesis block [[Hash]] the signature applies to
     */


    get genesisHash() {
      // NOTE only v3+
      return this._raw.genesisHash || this.registry.createType('Hash');
    }
    /**
     * @description The [[Raw]] contained in the payload
     */


    get method() {
      return this._raw.method;
    }
    /**
     * @description The [[Index]]
     */


    get nonce() {
      return this._raw.nonce;
    }
    /**
     * @description The specVersion as a [[u32]] for this payload
     */


    get specVersion() {
      // NOTE only v3+
      return this._raw.specVersion || this.registry.createType('u32');
    }
    /**
     * @description The [[Balance]]
     */


    get tip() {
      // NOTE from v2+
      return this._raw.tip || this.registry.createType('Compact<Balance>');
    }
    /**
     * @description The transaction version as a [[u32]] for this payload
     */


    get transactionVersion() {
      // NOTE only v4+
      return this._raw.transactionVersion || this.registry.createType('u32');
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return this._raw.eq(other);
    }
    /**
     * @description Sign the payload with the keypair
     */


    sign(signerPair) {
      const signature = this._raw.sign(signerPair); // This is extensible, so we could quite readily extend to send back extra
      // information, such as for instance the payload, i.e. `payload: this.toHex()`
      // For the case here we sign via the extrinsic, we ignore the return, so generally
      // this is applicable for external signing


      return {
        signature: u8aToHex(signature)
      };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return this._raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toHex();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.toHex();
    }
    /**
     * @description Returns a serialized u8a form
     */


    toU8a(isBare) {
      // call our parent, with only the method stripped
      return super.toU8a(isBare ? {
        method: true
      } : false);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name GenericExtrinsicPayloadUnknown
   * @description
   * A default handler for payloads where the version is not known (default throw)
   */

  class GenericExtrinsicPayloadUnknown extends Struct {
    constructor(registry, value, {
      version = 0
    } = {}) {
      super(registry, {});
      throw new Error(`Unsupported extrinsic payload version ${version}`);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /**
   * @name GenericExtrinsicUnknown
   * @description
   * A default handler for extrinsics where the version is not known (default throw)
   */

  class GenericExtrinsicUnknown extends Struct {
    constructor(registry, value, {
      isSigned = false,
      version = 0
    } = {}) {
      super(registry, {});
      throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & UNMASK_VERSION}`);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  // We explicitly cast the type here to get the actual TypeScript exports right
  // We can ignore the properties, added via Struct.with
  const _Payload = Struct.with({
    address: 'Address',
    blockHash: 'Hash',
    blockNumber: 'BlockNumber',
    era: 'ExtrinsicEra',
    genesisHash: 'Hash',
    method: 'Call',
    nonce: 'Compact<Index>',
    runtimeVersion: 'RuntimeVersion',
    signedExtensions: 'Vec<Text>',
    tip: 'Compact<Balance>',
    version: 'u8'
  });
  /**
   * @name GenericSignerPayload
   * @description
   * A generic signer payload that can be used for serialization between API and signer
   */


  class GenericSignerPayload extends _Payload {
    /**
     * @description Creates an representation of the structure as an ISignerPayload JSON
     */
    toPayload() {
      const {
        address,
        blockHash,
        blockNumber,
        era,
        genesisHash,
        method,
        nonce,
        runtimeVersion: {
          specVersion,
          transactionVersion
        },
        signedExtensions,
        tip,
        version
      } = this;
      return {
        address: address.toString(),
        blockHash: blockHash.toHex(),
        blockNumber: blockNumber.toHex(),
        era: era.toHex(),
        genesisHash: genesisHash.toHex(),
        method: method.toHex(),
        nonce: nonce.toHex(),
        signedExtensions: signedExtensions.map(e => e.toString()),
        specVersion: specVersion.toHex(),
        tip: tip.toHex(),
        transactionVersion: transactionVersion.toHex(),
        version: version.toNumber()
      };
    }
    /**
     * @description Creates a representation of the payload in raw Exrinsic form
     */


    toRaw() {
      const payload = this.toPayload(); // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)

      const data = u8aToHex(this.registry.createType('ExtrinsicPayload', payload, {
        version: payload.version
      }).toU8a({
        method: true
      }));
      return {
        address: payload.address,
        data,
        type: 'payload'
      };
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // a helper function for both types of payloads, Raw and metadata-known
  function sign(registry, signerPair, u8a, options) {
    const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
    return signerPair.sign(encoded, options);
  }

  function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$u(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  /**
   * @name GenericExtrinsicPayloadV4
   * @description
   * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
   * on the contents included
   */

  var _signOptions = _classPrivateFieldKey("signOptions");

  class GenericExtrinsicPayloadV4 extends Struct {
    constructor(registry, value) {
      super(registry, _objectSpread$u(_objectSpread$u({
        method: 'Bytes'
      }, registry.getSignedExtensionTypes()), registry.getSignedExtensionExtra()), value); // Do detection for the type of extrinsic, in the case of MultiSignature this is an
      // enum, in the case of AnySignature, this is a Hash only (may be 64 or 65 bytes)

      Object.defineProperty(this, _signOptions, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _signOptions)[_signOptions] = {
        withType: registry.createType('ExtrinsicSignature') instanceof Enum
      };
    }
    /**
     * @description The block [[Hash]] the signature applies to (mortal/immortal)
     */


    get blockHash() {
      return this.get('blockHash');
    }
    /**
     * @description The [[ExtrinsicEra]]
     */


    get era() {
      return this.get('era');
    }
    /**
     * @description The genesis [[Hash]] the signature applies to (mortal/immortal)
     */


    get genesisHash() {
      return this.get('genesisHash');
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */


    get method() {
      return this.get('method');
    }
    /**
     * @description The [[Index]]
     */


    get nonce() {
      return this.get('nonce');
    }
    /**
     * @description The specVersion for this signature
     */


    get specVersion() {
      return this.get('specVersion');
    }
    /**
     * @description The tip [[Balance]]
     */


    get tip() {
      return this.get('tip');
    }
    /**
     * @description The transactionVersion for this signature
     */


    get transactionVersion() {
      return this.get('transactionVersion');
    }
    /**
     * @description Sign the payload with the keypair
     */


    sign(signerPair) {
      // NOTE The `toU8a({ method: true })` argument is absolutely critical - we don't want the method (Bytes)
      // to have the length prefix included. This means that the data-as-signed is un-decodable,
      // but is also doesn't need the extra information, only the pure data (and is not decoded)
      // ... The same applies to V1..V3, if we have a V5, carry move this comment to latest
      return sign(this.registry, signerPair, this.toU8a({
        method: true
      }), _classPrivateFieldBase(this, _signOptions)[_signOptions]);
    }

  }

  function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$t(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const FAKE_NONE = new Uint8Array();
  const FAKE_SOME = new Uint8Array([1]);

  function toAddress(registry, address) {
    return registry.createType('Address', isU8a(address) ? u8aToHex(address) : address);
  }
  /**
   * @name GenericExtrinsicSignatureV4
   * @description
   * A container for the [[Signature]] associated with a specific [[Extrinsic]]
   */


  var _fakePrefix = _classPrivateFieldKey("fakePrefix");

  class GenericExtrinsicSignatureV4 extends Struct {
    constructor(registry, value, {
      isSigned
    } = {}) {
      super(registry, _objectSpread$t({
        signer: 'Address',
        // eslint-disable-next-line sort-keys
        signature: 'ExtrinsicSignature'
      }, registry.getSignedExtensionTypes()), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
      Object.defineProperty(this, _fakePrefix, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _fakePrefix)[_fakePrefix] = registry.createType('ExtrinsicSignature') instanceof Enum ? FAKE_SOME : FAKE_NONE;
    }
    /** @internal */


    static decodeExtrinsicSignature(value, isSigned = false) {
      if (!value) {
        return EMPTY_U8A;
      } else if (value instanceof GenericExtrinsicSignatureV4) {
        return value;
      }

      return isSigned ? value : EMPTY_U8A;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.isSigned ? super.encodedLength : 0;
    }
    /**
     * @description `true` if the signature is valid
     */


    get isSigned() {
      return !this.signature.isEmpty;
    }
    /**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */


    get era() {
      return this.get('era');
    }
    /**
     * @description The [[Index]] for the signature
     */


    get nonce() {
      return this.get('nonce');
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */


    get signature() {
      // the second case here is when we don't have an enum signature, treat as raw
      return this.multiSignature.value || this.multiSignature;
    }
    /**
     * @description The raw [[ExtrinsicSignature]]
     */


    get multiSignature() {
      return this.get('signature');
    }
    /**
     * @description The [[Address]] that signed
     */


    get signer() {
      return this.get('signer');
    }
    /**
     * @description The [[Balance]] tip
     */


    get tip() {
      return this.get('tip');
    }

    _injectSignature(signer, signature, {
      era,
      nonce,
      tip
    }) {
      this.set('era', era);
      this.set('nonce', nonce);
      this.set('signer', signer);
      this.set('signature', signature);
      this.set('tip', tip);
      return this;
    }
    /**
     * @description Adds a raw signature
     */


    addSignature(signer, signature, payload) {
      return this._injectSignature(toAddress(this.registry, signer), this.registry.createType('ExtrinsicSignature', signature), new GenericExtrinsicPayloadV4(this.registry, payload));
    }
    /**
     * @description Creates a payload from the supplied options
     */


    createPayload(method, {
      blockHash,
      era,
      genesisHash,
      nonce,
      runtimeVersion: {
        specVersion,
        transactionVersion
      },
      tip
    }) {
      return new GenericExtrinsicPayloadV4(this.registry, {
        blockHash,
        era: era || IMMORTAL_ERA,
        genesisHash,
        method: method.toHex(),
        nonce,
        specVersion,
        tip: tip || 0,
        transactionVersion: transactionVersion || 0
      });
    }
    /**
     * @description Generate a payload and applies the signature from a keypair
     */


    sign(method, account, options) {
      const signer = toAddress(this.registry, account.addressRaw);
      const payload = this.createPayload(method, options);
      const signature = this.registry.createType('ExtrinsicSignature', payload.sign(account));
      return this._injectSignature(signer, signature, payload);
    }
    /**
     * @description Generate a payload and applies a fake signature
     */


    signFake(method, address, options) {
      const signer = toAddress(this.registry, address);
      const payload = this.createPayload(method, options);
      const signature = this.registry.createType('ExtrinsicSignature', u8aConcat(_classPrivateFieldBase(this, _fakePrefix)[_fakePrefix], new Uint8Array(64).fill(0x42)));
      return this._injectSignature(signer, signature, payload);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /** @internal */

  function decodeAccountId$1(value) {
    if (isU8a(value) || Array.isArray(value)) {
      return u8aToU8a(value);
    } else if (isHex(value) || isEthereumAddress(value)) {
      return hexToU8a(value.toString());
    } else if (isString(value)) {
      return u8aToU8a(value.toString());
    }

    return value;
  }
  /**
   * @name GenericEthereumAccountId
   * @description
   * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
   * underlying addresses (20 bytes in length), we extend from U8aFixed which is
   * just a Uint8Array wrapper with a fixed length.
   */


  class GenericEthereumAccountId extends U8aFixed {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAccountId$1(value), 160);
    }

    static encode(value) {
      return ethereumEncode(value);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return super.eq(decodeAccountId$1(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toString();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return GenericEthereumAccountId.encode(this);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'AccountId';
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  const PREFIX_1BYTE = 0xef;
  const PREFIX_2BYTE = 0xfc;
  const PREFIX_4BYTE = 0xfd;
  const PREFIX_8BYTE = 0xfe;
  const MAX_1BYTE = new bn(PREFIX_1BYTE);
  const MAX_2BYTE = new bn(1).shln(16);
  const MAX_4BYTE = new bn(1).shln(32);
  /** @internal */

  function decodeAccountIndex(value) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    if (value instanceof GenericAccountIndex) {
      // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
      // AccountIndex), which has the initial `toString()` implementation.
      return value.toBn();
    } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {
      return value;
    }

    return decodeAccountIndex(decodeAddress(value));
  }
  /**
   * @name GenericAccountIndex
   * @description
   * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
   * for an Account. We extends from [[U32]] to provide the number-like properties.
   */


  class GenericAccountIndex extends u32 {
    constructor(registry, value = new bn(0)) {
      super(registry, decodeAccountIndex(value));
    }

    static calcLength(_value) {
      const value = bnToBn(_value);

      if (value.lte(MAX_1BYTE)) {
        return 1;
      } else if (value.lt(MAX_2BYTE)) {
        return 2;
      } else if (value.lt(MAX_4BYTE)) {
        return 4;
      }

      return 8;
    }

    static readLength(input) {
      const first = input[0];

      if (first === PREFIX_2BYTE) {
        return [1, 2];
      } else if (first === PREFIX_4BYTE) {
        return [1, 4];
      } else if (first === PREFIX_8BYTE) {
        return [1, 8];
      }

      return [0, 1];
    }

    static writeLength(input) {
      switch (input.length) {
        case 2:
          return new Uint8Array([PREFIX_2BYTE]);

        case 4:
          return new Uint8Array([PREFIX_4BYTE]);

        case 8:
          return new Uint8Array([PREFIX_8BYTE]);

        default:
          return new Uint8Array([]);
      }
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      // shortcut for BN or Number, don't create an object
      if (isBn(other) || isNumber(other)) {
        return super.eq(other);
      } // convert and compare


      return super.eq(this.registry.createType('AccountIndex', other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toString();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      const length = GenericAccountIndex.calcLength(this);
      return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'AccountIndex';
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  const ACCOUNT_ID_PREFIX$1 = new Uint8Array([0xff]);
  /** @internal */

  function decodeString$1(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 20 ? registry.createType('EthereumAccountId', decoded) : registry.createType('AccountIndex', u8aToBn(decoded, true));
  }
  /** @internal */


  function decodeU8a$2(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 20) {
      return registry.createType('EthereumAccountId', value);
    } else if (value[0] === 0xff) {
      return registry.createType('EthereumAccountId', value.subarray(1));
    }

    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createType('AccountIndex', u8aToBn(value.subarray(offset, offset + length), true));
  }
  /**
   * @name GenericEthereumLookupSource
   * @description
   * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
   * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
   * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
   * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
   */


  class GenericEthereumLookupSource extends Base {
    constructor(registry, value = new Uint8Array()) {
      super(registry, GenericEthereumLookupSource._decodeAddress(registry, value));
    }
    /** @internal */


    static _decodeAddress(registry, value) {
      return value instanceof GenericEthereumLookupSource ? value._raw : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createType('AccountIndex', value) : Array.isArray(value) || isHex(value) || isU8a(value) ? decodeU8a$2(registry, u8aToU8a(value)) : decodeString$1(registry, value);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
      rawLength > 1 ? 1 : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */


    get _rawLength() {
      return this._raw instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this._raw) : this._raw.encodedLength;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Address';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = this._raw.toU8a().subarray(0, this._rawLength);

      return isBare ? encoded : u8aConcat(this._raw instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX$1, encoded);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  /** @internal */

  function decodeAccountId(value) {
    if (!value) {
      return new Uint8Array();
    } else if (isU8a(value) || Array.isArray(value)) {
      return u8aToU8a(value);
    } else if (isHex(value)) {
      return hexToU8a(value.toString());
    } else if (isString(value)) {
      return decodeAddress(value.toString());
    }

    throw new Error('Unknown type passed to AccountId constructor');
  }
  /**
   * @name GenericAccountId
   * @description
   * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
   * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
   * just a Uint8Array wrapper with a fixed length.
   */


  class GenericAccountId extends U8aFixed {
    constructor(registry, value) {
      const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)

      assert$a(decoded.length >= 32 || !decoded.some(b => b), `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);
      super(registry, decoded, 256);
    }

    static encode(value, ss58Format) {
      return encodeAddress(value, ss58Format);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return super.eq(decodeAccountId(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toString();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return GenericAccountId.encode(this, this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'AccountId';
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  /**
   * @name GenericBlock
   * @description
   * A block encoded with header and extrinsics
   */
  class GenericBlock extends Struct {
    constructor(registry, value) {
      super(registry, {
        header: 'Header',
        // eslint-disable-next-line sort-keys
        extrinsics: 'Vec<Extrinsic>'
      }, value);
    }
    /**
     * @description Encodes a content [[Hash]] for the block
     */


    get contentHash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description The [[Extrinsic]] contained in the block
     */


    get extrinsics() {
      return this.get('extrinsics');
    }
    /**
     * @description Block/header [[Hash]]
     */


    get hash() {
      return this.header.hash;
    }
    /**
     * @description The [[Header]] of the block
     */


    get header() {
      return this.get('header');
    }

  }

  function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$s(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  /**
   * Get a mapping of `argument name -> argument type` for the function, from
   * its metadata.
   *
   * @param meta - The function metadata used to get the definition.
   * @internal
   */
  function getArgsDef(registry, meta) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    return GenericCall.filterOrigin(meta).reduce((result, {
      name,
      type
    }) => {
      const Type = getTypeClass(registry, getTypeDef(type));
      result[name.toString()] = Type;
      return result;
    }, {});
  }
  /** @internal */


  function decodeCallViaObject(registry, value, _meta) {
    // we only pass args/methodsIndex out
    const {
      args,
      callIndex
    } = value; // Get the correct lookupIndex
    // eslint-disable-next-line @typescript-eslint/no-use-before-define

    const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex; // Find metadata with callIndex

    const meta = _meta || registry.findMetaCall(lookupIndex).meta;

    return {
      args,
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  /** @internal */


  function decodeCallViaU8a(registry, value, _meta) {
    // We need 2 bytes for the callIndex
    const callIndex = new Uint8Array(2);
    callIndex.set(value.subarray(0, 2), 0); // Find metadata with callIndex

    const meta = _meta || registry.findMetaCall(callIndex).meta;

    return {
      args: value.subarray(2),
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  /**
   * Decode input to pass into constructor.
   *
   * @param value - Value to decode, one of:
   * - hex
   * - Uint8Array
   * - {@see DecodeMethodInput}
   * @param _meta - Metadata to use, so that `injectMethods` lookup is not
   * necessary.
   * @internal
   */


  function decodeCall(registry, value = new Uint8Array(), _meta) {
    if (isHex(value) || isU8a(value)) {
      return decodeCallViaU8a(registry, u8aToU8a(value), _meta);
    } else if (isObject$1(value) && value.callIndex && value.args) {
      return decodeCallViaObject(registry, value, _meta);
    }

    throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
  }
  /**
   * @name GenericCallIndex
   * @description
   * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
   */


  class GenericCallIndex extends U8aFixed {
    constructor(registry, value) {
      super(registry, value, 16);
    }

  }
  /**
   * @name GenericCall
   * @description
   * Extrinsic function descriptor
   */

  class GenericCall extends Struct {
    constructor(registry, value, meta) {
      const decoded = decodeCall(registry, value, meta);

      try {
        super(registry, {
          callIndex: GenericCallIndex,
          // eslint-disable-next-line sort-keys
          args: Struct.with(decoded.argsDef)
        }, decoded);
        this._meta = void 0;
      } catch (error) {
        let method = 'unknown.unknown';

        try {
          const c = registry.findMetaCall(decoded.callIndex);
          method = `${c.section}.${c.method}`;
        } catch (error) {// ignore
        }

        throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
      }

      this._meta = decoded.meta;
    } // If the extrinsic function has an argument of type `Origin`, we ignore it


    static filterOrigin(meta) {
      // FIXME should be `arg.type !== Origin`, but doesn't work...
      return meta ? meta.args.filter(({
        type
      }) => type.toString() !== 'Origin') : [];
    }
    /**
     * @description The arguments for the function call
     */


    get args() {
      // FIXME This should return a Struct instead of an Array
      return [...this.get('args').values()];
    }
    /**
     * @description The argument definitions
     */


    get argsDef() {
      return getArgsDef(this.registry, this.meta);
    }
    /**
     * @description The encoded `[sectionIndex, methodIndex]` identifier
     */


    get callIndex() {
      return this.get('callIndex').toU8a();
    }
    /**
     * @description The encoded data
     */


    get data() {
      return this.get('args').toU8a();
    }
    /**
     * @description The [[FunctionMetadata]]
     */


    get meta() {
      return this._meta;
    }
    /**
     * @description Returns the name of the method
     */


    get method() {
      return this.registry.findMetaCall(this.callIndex).method;
    }
    /**
     * @description Returns the module containing the method
     */


    get section() {
      return this.registry.findMetaCall(this.callIndex).section;
    }
    /**
     * @description Checks if the source matches this in type
     */


    is(other) {
      return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExpanded) {
      var _call, _call2;

      let call;

      try {
        call = this.registry.findMetaCall(this.callIndex);
      } catch (error) {// swallow
      }

      return _objectSpread$s({
        args: this.args.map(arg => arg.toHuman(isExpanded)),
        // args: this.args.map((arg, index) => call
        //   ? { [call.meta.args[index].name.toString()]: arg.toHuman(isExpanded) }
        //   : arg.toHuman(isExpanded)
        // ),
        // callIndex: u8aToHex(this.callIndex),
        method: (_call = call) === null || _call === void 0 ? void 0 : _call.method,
        section: (_call2 = call) === null || _call2 === void 0 ? void 0 : _call2.section
      }, isExpanded && call ? {
        documentation: call.meta.documentation.map(d => d.toString())
      } : {});
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Call';
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  function createValue(registry, type, value, asArray = true) {
    // We detect codec here as well - when found, generally this is constructed from itself
    if (value && isFunction$1(value.unwrapOrDefault)) {
      return value;
    }

    return registry.createType(type, asArray ? isNull(value) || isUndefined(value) ? null : Array.isArray(value) ? value : [value] : value);
  }

  function decodeValue(registry, key, value) {
    return key === 'ss58Format' ? createValue(registry, 'Option<u32>', value, false) : key === 'tokenDecimals' ? createValue(registry, 'Option<Vec<u32>>', value) : key === 'tokenSymbol' ? createValue(registry, 'Option<Vec<Text>>', value) : value;
  }

  function decode(registry, value) {
    return ( // allow decoding from a map as well (ourselves)
    value && isFunction$1(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all, [key, value]) => {
      all[key] = decodeValue(registry, key, value);
      return all;
    }, {
      ss58Format: registry.createType('Option<u32>'),
      tokenDecimals: registry.createType('Option<Vec<u32>>'),
      tokenSymbol: registry.createType('Option<Vec<Text>>')
    });
  }

  class GenericChainProperties extends Json {
    constructor(registry, value) {
      super(registry, decode(registry, value));
    }
    /**
     * @description The chain ss58Format
     */


    get ss58Format() {
      return this.get('ss58Format');
    }
    /**
     * @description The decimals for each of the tokens
     */


    get tokenDecimals() {
      return this.get('tokenDecimals');
    }
    /**
     * @description The symbols for the tokens
     */


    get tokenSymbol() {
      return this.get('tokenSymbol');
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // this means that FRNK has the bytes as KNRF

  const CID_AURA = 0x61727561; // 'aura'

  const CID_BABE = 0x45424142; // 'BABE'

  const CID_GRPA = 0x4b4e5246; // 'FRNK' (don't ask, used to be afg1)

  const CID_POW = 0x5f776f70; // 'pow_'

  /**
   * @name GenericConsensusEngineId
   * @description
   * A 4-byte identifier (actually a [u8; 4]) identifying the engine, e.g. for Aura it would be [b'a', b'u', b'r', b'a']
   */

  class GenericConsensusEngineId extends u32 {
    static idToString(input) {
      return bnToBn(input).toArray('le').map(code => String.fromCharCode(code)).join('');
    }

    static stringToId(input) {
      return input.split('').reverse().reduce((result, char) => result * 256 + char.charCodeAt(0), 0);
    }
    /**
     * @description `true` if the engine matches aura
     */


    get isAura() {
      return this.eq(CID_AURA);
    }
    /**
     * @description `true` is the engine matches babe
     */


    get isBabe() {
      return this.eq(CID_BABE);
    }
    /**
     * @description `true` is the engine matches grandpa
     */


    get isGrandpa() {
      return this.eq(CID_GRPA);
    }
    /**
     * @description `true` is the engine matches pow
     */


    get isPow() {
      return this.eq(CID_POW);
    }

    _getAuraAuthor(bytes, sessionValidators) {
      return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new bn(sessionValidators.length)).toNumber()];
    }

    _getBabeAuthor(bytes, sessionValidators) {
      const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));
      return sessionValidators[digest.value.toNumber()];
    }

    _getPowAuthor(bytes) {
      return this.registry.createType('AccountId', bytes);
    }

    _getH160Author(bytes) {
      return this.registry.createType('AccountId', bytes);
    }
    /**
     * @description From the input bytes, decode into an author
     */


    extractAuthor(bytes, sessionValidators) {
      if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {
        if (this.isAura) {
          return this._getAuraAuthor(bytes, sessionValidators);
        } else if (this.isBabe) {
          return this._getBabeAuthor(bytes, sessionValidators);
        }
      }

      if (this.isPow) {
        return this._getPowAuthor(bytes);
      } // Moonbeam is neither Aura nor Babe nor Pow and uses h160 addresses


      if (bytes.length === 20) {
        return this._getH160Author(bytes);
      }

      return undefined;
    }
    /**
     * @description Override the default toString to return a 4-byte string
     */


    toString() {
      return GenericConsensusEngineId.idToString(this);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
  /** @internal */

  function decodeString(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 32 ? registry.createType('AccountId', decoded) : registry.createType('AccountIndex', u8aToBn(decoded, true));
  }
  /** @internal */


  function decodeU8a$1(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 32) {
      return registry.createType('AccountId', value);
    } else if (value[0] === 0xff) {
      return registry.createType('AccountId', value.subarray(1));
    }

    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createType('AccountIndex', u8aToBn(value.subarray(offset, offset + length), true));
  }
  /**
   * @name LookupSource
   * @description
   * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
   * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
   * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
   * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
   */


  class GenericLookupSource extends Base {
    constructor(registry, value = new Uint8Array()) {
      super(registry, GenericLookupSource._decodeAddress(registry, value));
    }
    /** @internal */


    static _decodeAddress(registry, value) {
      return value instanceof GenericLookupSource ? value._raw : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createType('AccountIndex', value) : Array.isArray(value) || isHex(value) || isU8a(value) ? decodeU8a$1(registry, u8aToU8a(value)) : decodeString(registry, value);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
      rawLength > 1 ? 1 : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */


    get _rawLength() {
      return this._raw instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this._raw) : this._raw.encodedLength;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Address';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = this._raw.toU8a().subarray(0, this._rawLength);

      return isBare ? encoded : u8aConcat(this._raw instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  function decodeU8a(registry, u8a) {
    if ([0, 32].includes(u8a.length)) {
      return {
        Id: u8a
      };
    } else if (u8a.length === 20) {
      return {
        Address20: u8a
      };
    } else if (u8a.length <= 8) {
      return {
        Index: registry.createType('AccountIndex', u8a).toNumber()
      };
    }

    return u8a;
  }

  function decodeMultiAny(registry, value) {
    if (value instanceof GenericMultiAddress) {
      return value;
    } else if (value instanceof GenericAccountId) {
      return {
        Id: value
      };
    } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {
      return {
        Index: isNumber(value) ? value : value.toNumber()
      };
    } else if (isString(value)) {
      return decodeU8a(registry, decodeAddress(value.toString()));
    } else if (isU8a(value)) {
      return decodeU8a(registry, value);
    }

    return value;
  }

  class GenericMultiAddress extends Enum {
    constructor(registry, value) {
      super(registry, {
        Id: 'AccountId',
        Index: 'Compact<AccountIndex>',
        Raw: 'Bytes',
        // eslint-disable-next-line sort-keys
        Address32: 'H256',
        // eslint-disable-next-line sort-keys
        Address20: 'H160'
      }, decodeMultiAny(registry, value));
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.value.toString();
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // For votes, the topmost bit indicated aye/nay, the lower bits indicate the conviction
  const AYE_BITS = 0b10000000;
  const NAY_BITS = 0b00000000;
  const CON_MASK = 0b01111111;
  const DEF_CONV = 0b00000000; // the default conviction, None

  /** @internal */

  function decodeVoteBool(value) {
    return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
  }
  /** @internal */


  function decodeVoteU8a(value) {
    return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
  }
  /** @internal */


  function decodeVoteType(registry, value) {
    const vote = new bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS;
    const conviction = registry.createType('Conviction', value.conviction || DEF_CONV);
    return new Uint8Array([vote | conviction.index]);
  }
  /** @internal */


  function decodeVote(registry, value) {
    if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {
      return decodeVoteBool(new bool(registry, value).isTrue);
    } else if (isNumber(value)) {
      return decodeVoteBool(value < 0);
    } else if (isU8a(value)) {
      return decodeVoteU8a(value);
    }

    return decodeVoteType(registry, value);
  }
  /**
   * @name GenericVote
   * @description
   * A number of lock periods, plus a vote, one way or the other.
   */


  class GenericVote extends U8aFixed {
    constructor(registry, value) {
      // decoded is just 1 byte
      // Aye: Most Significant Bit
      // Conviction: 0000 - 0101
      const decoded = decodeVote(registry, value);
      super(registry, decoded, 8);
      this._aye = void 0;
      this._conviction = void 0;
      this._aye = (decoded[0] & AYE_BITS) === AYE_BITS;
      this._conviction = this.registry.createType('Conviction', decoded[0] & CON_MASK);
    }
    /**
     * @description returns a V2 conviction
     */


    get conviction() {
      return this._conviction;
    }
    /**
     * @description true if the wrapped value is a positive vote
     */


    get isAye() {
      return this._aye;
    }
    /**
     * @description true if the wrapped value is a negative vote
     */


    get isNay() {
      return !this.isAye;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExpanded) {
      return {
        conviction: this.conviction.toHuman(isExpanded),
        vote: this.isAye ? 'Aye' : 'Nay'
      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Vote';
    }

  }

  // Copyright 2017-2021 @polkadot/types authors & contributors

  var baseTypes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GenericExtrinsic: GenericExtrinsic,
    GenericExtrinsicEra: GenericExtrinsicEra,
    GenericMortalEra: MortalEra,
    GenericImmortalEra: ImmortalEra,
    GenericExtrinsicPayload: GenericExtrinsicPayload,
    GenericExtrinsicPayloadUnknown: GenericExtrinsicPayloadUnknown,
    GenericExtrinsicUnknown: GenericExtrinsicUnknown,
    GenericSignerPayload: GenericSignerPayload,
    GenericExtrinsicV4: GenericExtrinsicV4,
    GenericExtrinsicPayloadV4: GenericExtrinsicPayloadV4,
    GenericExtrinsicSignatureV4: GenericExtrinsicSignatureV4,
    GenericAccountId: GenericAccountId,
    GenericAccountIndex: GenericAccountIndex,
    GenericBlock: GenericBlock,
    GenericCall: GenericCall,
    GenericChainProperties: GenericChainProperties,
    GenericConsensusEngineId: GenericConsensusEngineId,
    GenericEvent: GenericEvent,
    GenericEventData: GenericEventData,
    GenericLookupSource: GenericLookupSource,
    GenericMultiAddress: GenericMultiAddress,
    GenericVote: GenericVote,
    GenericEthereumAccountId: GenericEthereumAccountId,
    GenericEthereumLookupSource: GenericEthereumLookupSource,
    BitVec: BitVec,
    bool: bool,
    Bool: bool,
    Bytes: Bytes,
    Data: Data,
    DoNotConstruct: DoNotConstruct,
    i8: i8,
    I8: i8,
    i16: i16,
    I16: i16,
    i32: i32,
    I32: i32,
    i64: i64,
    I64: i64,
    i128: i128,
    I128: i128,
    i256: i256,
    I256: i256,
    Null: Null,
    StorageKey: StorageKey,
    Text: Text,
    Type: Type,
    u8: u8,
    U8: u8,
    u16: u16,
    U16: u16,
    u32: u32,
    U32: u32,
    u64: u64,
    U64: u64,
    u128: u128,
    U128: u128,
    u256: u256,
    U256: u256,
    usize: usize,
    USize: usize
  });

  function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$r(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const numberTypes = {
    Fixed64: 'Int<64, Fixed64>',
    FixedI64: 'Int<64, FixedI64>',
    FixedU64: 'UInt<64, FixedU64>',
    Fixed128: 'Int<128, Fixed128>',
    FixedI128: 'Int<128, FixedI128>',
    FixedU128: 'UInt<128, FixedU128>',
    I32F32: 'Int<64, I32F32>',
    U32F32: 'UInt<64, U32F32>',
    PerU16: 'UInt<16, PerU16>',
    Perbill: 'UInt<32, Perbill>',
    Percent: 'UInt<8, Percent>',
    Permill: 'UInt<32, Permill>',
    Perquintill: 'UInt<64, Perquintill>'
  };
  var runtimeTypes = {
    rpc: {},
    types: _objectSpread$r(_objectSpread$r({}, numberTypes), {}, {
      AccountId: 'GenericAccountId',
      AccountIdOf: 'AccountId',
      AccountIndex: 'GenericAccountIndex',
      Address: 'MultiAddress',
      AssetId: 'u32',
      Balance: 'UInt<128, Balance>',
      BalanceOf: 'Balance',
      Block: 'GenericBlock',
      BlockNumber: 'u32',
      Call: 'GenericCall',
      CallHash: 'Hash',
      CallHashOf: 'CallHash',
      ChangesTrieConfiguration: {
        digestInterval: 'u32',
        digestLevels: 'u32'
      },
      ConsensusEngineId: 'GenericConsensusEngineId',
      CodecHash: 'Hash',
      Digest: {
        logs: 'Vec<DigestItem>'
      },
      DigestItem: {
        _enum: {
          Other: 'Bytes',
          // 0
          AuthoritiesChange: 'Vec<AuthorityId>',
          // 1
          ChangesTrieRoot: 'Hash',
          // 2
          SealV0: 'SealV0',
          // 3
          Consensus: 'Consensus',
          // 4
          Seal: 'Seal',
          // 5
          PreRuntime: 'PreRuntime' // 6

        }
      },
      ExtrinsicsWeight: {
        normal: 'Weight',
        operational: 'Weight'
      },
      H64: '[u8; 8; H64]',
      H128: '[u8; 16; H64]',
      H160: '[u8; 20; H160]',
      H256: '[u8; 32; H256]',
      H512: '[u8; 64; H512]',
      H1024: '[u8; 128; H1024]',
      H2048: '[u8; 256; H2048]',
      Hash: 'H256',
      Header: {
        parentHash: 'Hash',
        number: 'Compact<BlockNumber>',
        stateRoot: 'Hash',
        extrinsicsRoot: 'Hash',
        digest: 'Digest'
      },
      IndicesLookupSource: 'GenericLookupSource',
      Index: 'u32',
      Justification: 'Bytes',
      KeyValue: '(StorageKey, StorageData)',
      KeyTypeId: 'u32',
      LockIdentifier: '[u8; 8]',
      LookupSource: 'MultiAddress',
      LookupTarget: 'AccountId',
      ModuleId: 'LockIdentifier',
      MultiAddress: 'GenericMultiAddress',
      Moment: 'UInt<64, Moment>',
      OpaqueCall: 'Bytes',
      Origin: 'DoNotConstruct<Origin>',
      OriginCaller: {
        _enum: {
          // this should be dynamically built from the actual modules, based on index
          System: 'SystemOrigin'
        }
      },
      PalletsOrigin: 'OriginCaller',
      PalletVersion: {
        major: 'u16',
        minor: 'u8',
        patch: 'u8'
      },
      Pays: {
        _enum: ['Yes', 'No']
      },
      Phantom: 'Null',
      PhantomData: 'Null',
      Releases: {
        _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
      },
      RuntimeDbWeight: {
        read: 'Weight',
        write: 'Weight'
      },
      SignedBlock: {
        block: 'Block',
        justification: 'Justification'
      },
      Slot: 'u64',
      StorageData: 'Bytes',
      StorageProof: {
        trieNodes: 'Vec<Bytes>'
      },
      TransactionPriority: 'u64',
      ValidatorId: 'AccountId',
      ValidatorIdOf: 'ValidatorId',
      Weight: 'u64',
      WeightMultiplier: 'Fixed64',
      // digest
      PreRuntime: '(ConsensusEngineId, Bytes)',
      SealV0: '(u64, Signature)',
      Seal: '(ConsensusEngineId, Bytes)',
      Consensus: '(ConsensusEngineId, Bytes)'
    })
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$O = {
    rpc: {},
    types: {
      AssetBalance: {
        balance: 'TAssetBalance',
        isFrozen: 'bool',
        isZombie: 'bool'
      },
      AssetDetails: {
        owner: 'AccountId',
        issuer: 'AccountId',
        admin: 'AccountId',
        freezer: 'AccountId',
        supply: 'TAssetBalance',
        deposit: 'TAssetDepositBalance',
        maxZombies: 'u32',
        minBalance: 'TAssetBalance',
        zombies: 'u32',
        accounts: 'u32'
      },
      AssetMetadata: {
        deposit: 'TAssetDepositBalance',
        name: 'Vec<u8>',
        symbol: 'Vec<u8>',
        decimals: 'u8'
      },
      TAssetBalance: 'u64',
      TAssetDepositBalance: 'BalanceOf'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$N = {
    rpc: {},
    types: {
      UncleEntryItem: {
        _enum: {
          InclusionHeight: 'BlockNumber',
          Uncle: '(Hash, Option<AccountId>)'
        }
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$M = {
    rpc: {},
    types: {
      RawAuraPreDigest: {
        slotNumber: 'u64'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$L = {
    rpc: {
      epochAuthorship: {
        description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
        params: [],
        type: 'HashMap<AuthorityId, EpochAuthorship>'
      }
    },
    types: {
      AllowedSlots: {
        _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
      },
      BabeAuthorityWeight: 'u64',
      BabeBlockWeight: 'u32',
      BabeEquivocationProof: {
        offender: 'AuthorityId',
        slotNumber: 'SlotNumber',
        firstHeader: 'Header',
        secondHeader: 'Header'
      },
      BabeWeight: 'u64',
      MaybeRandomness: 'Option<Randomness>',
      MaybeVrf: 'Option<VrfData>',
      EpochAuthorship: {
        primary: 'Vec<u64>',
        secondary: 'Vec<u64>',
        secondary_vrf: 'Vec<u64>'
      },
      NextConfigDescriptor: {
        _enum: {
          V0: 'Null',
          V1: 'NextConfigDescriptorV1'
        }
      },
      NextConfigDescriptorV1: {
        c: '(u64, u64)',
        allowedSlots: 'AllowedSlots'
      },
      Randomness: 'Hash',
      RawBabePreDigest: {
        _enum: {
          Phantom: 'Null',
          // index starts at 1... empty slot at 0
          Primary: 'RawBabePreDigestPrimary',
          SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
          SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
        }
      },
      RawBabePreDigestPrimary: {
        authorityIndex: 'u32',
        // AuthorityIndex (also in aura)
        slotNumber: 'SlotNumber',
        vrfOutput: 'VrfOutput',
        vrfProof: 'VrfProof'
      },
      RawBabePreDigestSecondaryPlain: {
        authorityIndex: 'u32',
        // AuthorityIndex (also in aura)
        slotNumber: 'SlotNumber'
      },
      RawBabePreDigestSecondaryVRF: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        vrfOutput: 'VrfOutput',
        vrfProof: 'VrfProof'
      },
      RawBabePreDigestTo159: {
        _enum: {
          Primary: 'RawBabePreDigestPrimaryTo159',
          Secondary: 'RawBabePreDigestSecondaryTo159'
        }
      },
      RawBabePreDigestPrimaryTo159: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        weight: 'BabeBlockWeight',
        vrfOutput: 'VrfOutput',
        vrfProof: 'VrfProof'
      },
      RawBabePreDigestSecondaryTo159: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        weight: 'BabeBlockWeight'
      },
      // a cross old/new compatible version of the digest, that is _only_ useful
      // for partial parsing and extraction of the author. This assumes that all
      // entries has the authorityIndex in the first position - and that it is all
      // we are interested in
      RawBabePreDigestCompat: {
        _enum: {
          Zero: 'u32',
          One: 'u32',
          Two: 'u32',
          Three: 'u32'
        }
      },
      SlotNumber: 'u64',
      VrfData: '[u8; 32]',
      VrfOutput: '[u8; 32]',
      VrfProof: '[u8; 64]'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$K = {
    rpc: {},
    types: {
      AccountData: {
        free: 'Balance',
        reserved: 'Balance',
        miscFrozen: 'Balance',
        feeFrozen: 'Balance'
      },
      BalanceLockTo212: {
        id: 'LockIdentifier',
        amount: 'Balance',
        until: 'BlockNumber',
        reasons: 'WithdrawReasons'
      },
      BalanceLock: {
        id: 'LockIdentifier',
        amount: 'Balance',
        reasons: 'Reasons'
      },
      BalanceStatus: {
        _enum: ['Free', 'Reserved']
      },
      Reasons: {
        _enum: ['Fee', 'Misc', 'All']
      },
      VestingSchedule: {
        offset: 'Balance',
        perBlock: 'Balance',
        startingBlock: 'BlockNumber'
      },
      WithdrawReasons: {
        _set: {
          TransactionPayment: 0b00000001,
          Transfer: 0b00000010,
          Reserve: 0b00000100,
          Fee: 0b00001000,
          Tip: 0b00010000
        }
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$J = {
    rpc: {},
    types: {
      CollectiveOrigin: {
        _enum: {
          Members: '(MemberCount, MemberCount)',
          Member: 'AccountId'
        }
      },
      MemberCount: 'u32',
      ProposalIndex: 'u32',
      VotesTo230: {
        index: 'ProposalIndex',
        threshold: 'MemberCount',
        ayes: 'Vec<AccountId>',
        nays: 'Vec<AccountId>'
      },
      Votes: {
        index: 'ProposalIndex',
        threshold: 'MemberCount',
        ayes: 'Vec<AccountId>',
        nays: 'Vec<AccountId>',
        end: 'BlockNumber'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$I = {
    rpc: {},
    types: {
      AuthorityId: 'AccountId',
      RawVRFOutput: '[u8; 32]'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$H = {
    rpc: {
      call: {
        description: 'Executes a call to a contract',
        params: [{
          name: 'callRequest',
          type: 'ContractCallRequest'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'ContractExecResult'
      },
      getStorage: {
        description: 'Returns the value under a specified storage key in a contract',
        params: [{
          name: 'address',
          type: 'AccountId'
        }, {
          name: 'key',
          type: 'H256'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<Bytes>'
      },
      rentProjection: {
        description: 'Returns the projected time a given contract will be able to sustain paying its rent',
        params: [{
          name: 'address',
          type: 'AccountId'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<BlockNumber>'
      }
    },
    types: {
      AliveContractInfo: {
        trieId: 'TrieId',
        storageSize: 'u32',
        emptyPairCount: 'u32',
        totalPairCount: 'u32',
        codeHash: 'CodeHash',
        rentAllowance: 'Balance',
        deductBlock: 'BlockNumber',
        lastWrite: 'Option<BlockNumber>'
      },
      CodeHash: 'Hash',
      ContractCallRequest: {
        origin: 'AccountId',
        dest: 'AccountId',
        value: 'Balance',
        gasLimit: 'u64',
        inputData: 'Bytes'
      },
      ContractExecResultSuccessTo255: {
        status: 'u8',
        data: 'Raw'
      },
      ContractExecResultTo255: {
        _enum: {
          Success: 'ContractExecResultSuccessTo255',
          Error: 'Null'
        }
      },
      ContractExecResultSuccessTo260: {
        flags: 'u32',
        data: 'Bytes',
        gasConsumed: 'u64'
      },
      ContractExecResultTo260: {
        _enum: {
          Success: 'ContractExecResultSuccessTo260',
          Error: 'Null'
        }
      },
      ContractExecResultErrModule: {
        index: 'u8',
        error: 'u8',
        message: 'Option<Text>'
      },
      ContractExecResultErr: {
        _enum: {
          Other: 'Text',
          CannotLookup: 'Null',
          BadOrigin: 'Null',
          Module: 'ContractExecResultErrModule'
        }
      },
      ContractExecResultOk: {
        flags: 'u32',
        data: 'Bytes'
      },
      ContractExecResultResult: {
        _enum: {
          Ok: 'ContractExecResultOk',
          Err: 'ContractExecResultErr'
        }
      },
      ContractExecResult: {
        gasConsumed: 'u64',
        debugMessage: 'Text',
        result: 'ContractExecResultResult'
      },
      ContractInfo: {
        _enum: {
          Alive: 'AliveContractInfo',
          Tombstone: 'TombstoneContractInfo'
        }
      },
      ContractStorageKey: '[u8; 32]',
      DeletedContract: {
        pairCount: 'u32',
        trieId: 'TrieId'
      },
      Gas: 'u64',
      HostFnWeightsTo264: {
        caller: 'Weight',
        address: 'Weight',
        gasLeft: 'Weight',
        balance: 'Weight',
        valueTransferred: 'Weight',
        minimumBalance: 'Weight',
        tombstoneDeposit: 'Weight',
        rentAllowance: 'Weight',
        blockNumber: 'Weight',
        now: 'Weight',
        weightToFee: 'Weight',
        gas: 'Weight',
        input: 'Weight',
        inputPerByte: 'Weight',
        return: 'Weight',
        returnPerByte: 'Weight',
        terminate: 'Weight',
        restoreTo: 'Weight',
        restoreToPerDelta: 'Weight',
        random: 'Weight',
        depositEvent: 'Weight',
        depositEventPerTopic: 'Weight',
        depositEventPerByte: 'Weight',
        setRentAllowance: 'Weight',
        setStorage: 'Weight',
        setStoragePerByte: 'Weight',
        clearStorage: 'Weight',
        getStorage: 'Weight',
        getStoragePerByte: 'Weight',
        transfer: 'Weight',
        call: 'Weight',
        callTransferSurcharge: 'Weight',
        callPerInputByte: 'Weight',
        callPerOutputByte: 'Weight',
        instantiate: 'Weight',
        instantiatePerInputByte: 'Weight',
        instantiatePerOutputByte: 'Weight',
        hashSha2256: 'Weight',
        hashSha2256PerByte: 'Weight',
        hashKeccak256: 'Weight',
        hashKeccak256PerByte: 'Weight',
        hashBlake2256: 'Weight',
        hashBlake2256PerByte: 'Weight',
        hashBlake2128: 'Weight',
        hashBlake2128PerByte: 'Weight'
      },
      HostFnWeights: {
        caller: 'Weight',
        address: 'Weight',
        gasLeft: 'Weight',
        balance: 'Weight',
        valueTransferred: 'Weight',
        minimumBalance: 'Weight',
        tombstoneDeposit: 'Weight',
        rentAllowance: 'Weight',
        blockNumber: 'Weight',
        now: 'Weight',
        weightToFee: 'Weight',
        gas: 'Weight',
        input: 'Weight',
        inputPerByte: 'Weight',
        return: 'Weight',
        returnPerByte: 'Weight',
        terminate: 'Weight',
        terminatePerCodeByte: 'Weight',
        restoreTo: 'Weight',
        restoreToPerCallerCodeByte: 'Weight',
        restoreToPerTombstoneCodeByte: 'Weight',
        restoreToPerDelta: 'Weight',
        random: 'Weight',
        depositEvent: 'Weight',
        depositEventPerTopic: 'Weight',
        depositEventPerByte: 'Weight',
        setRentAllowance: 'Weight',
        setStorage: 'Weight',
        setStoragePerByte: 'Weight',
        clearStorage: 'Weight',
        getStorage: 'Weight',
        getStoragePerByte: 'Weight',
        transfer: 'Weight',
        call: 'Weight',
        callPerCodeByte: 'Weight',
        callTransferSurcharge: 'Weight',
        callPerInputByte: 'Weight',
        callPerOutputByte: 'Weight',
        instantiate: 'Weight',
        instantiatePerCodeByte: 'Weight',
        instantiatePerInputByte: 'Weight',
        instantiatePerOutputByte: 'Weight',
        hashSha2256: 'Weight',
        hashSha2256PerByte: 'Weight',
        hashKeccak256: 'Weight',
        hashKeccak256PerByte: 'Weight',
        hashBlake2256: 'Weight',
        hashBlake2256PerByte: 'Weight',
        hashBlake2128: 'Weight',
        hashBlake2128PerByte: 'Weight'
      },
      InstructionWeights: {
        i64const: 'u32',
        i64load: 'u32',
        i64store: 'u32',
        select: 'u32',
        rIf: 'u32',
        br: 'u32',
        brIf: 'u32',
        brIable: 'u32',
        brIablePerEntry: 'u32',
        call: 'u32',
        callIndirect: 'u32',
        callIndirectPerParam: 'u32',
        localGet: 'u32',
        localSet: 'u32',
        local_tee: 'u32',
        globalGet: 'u32',
        globalSet: 'u32',
        memoryCurrent: 'u32',
        memoryGrow: 'u32',
        i64clz: 'u32',
        i64ctz: 'u32',
        i64popcnt: 'u32',
        i64eqz: 'u32',
        i64extendsi32: 'u32',
        i64extendui32: 'u32',
        i32wrapi64: 'u32',
        i64eq: 'u32',
        i64ne: 'u32',
        i64lts: 'u32',
        i64ltu: 'u32',
        i64gts: 'u32',
        i64gtu: 'u32',
        i64les: 'u32',
        i64leu: 'u32',
        i64ges: 'u32',
        i64geu: 'u32',
        i64add: 'u32',
        i64sub: 'u32',
        i64mul: 'u32',
        i64divs: 'u32',
        i64divu: 'u32',
        i64rems: 'u32',
        i64remu: 'u32',
        i64and: 'u32',
        i64or: 'u32',
        i64xor: 'u32',
        i64shl: 'u32',
        i64shrs: 'u32',
        i64shru: 'u32',
        i64rotl: 'u32',
        i64rotr: 'u32'
      },
      LimitsTo264: {
        eventTopics: 'u32',
        stackHeight: 'u32',
        globals: 'u32',
        parameters: 'u32',
        memoryPages: 'u32',
        tableSize: 'u32',
        brTableSize: 'u32',
        subjectLen: 'u32',
        codeSize: 'u32'
      },
      Limits: {
        eventTopics: 'u32',
        stackHeight: 'u32',
        globals: 'u32',
        parameters: 'u32',
        memoryPages: 'u32',
        tableSize: 'u32',
        brTableSize: 'u32',
        subjectLen: 'u32'
      },
      PrefabWasmModule: {
        scheduleVersion: 'Compact<u32>',
        initial: 'Compact<u32>',
        maximum: 'Compact<u32>',
        _reserved: 'PrefabWasmModuleReserved',
        code: 'Bytes'
      },
      PrefabWasmModuleReserved: 'Option<Null>',
      ScheduleTo212: {
        version: 'u32',
        putCodePerByteCost: 'Gas',
        growMemCost: 'Gas',
        regularOpCost: 'Gas',
        returnDataPerByteCost: 'Gas',
        eventDataPerByteCost: 'Gas',
        eventPerTopicCost: 'Gas',
        eventBaseCost: 'Gas',
        sandboxDataReadCost: 'Gas',
        sandboxDataWriteCost: 'Gas',
        maxEventTopics: 'u32',
        maxStackHeight: 'u32',
        maxMemoryPages: 'u32',
        enablePrintln: 'bool',
        maxSubjectLen: 'u32'
      },
      ScheduleTo258: {
        version: 'u32',
        putCodePerByteCost: 'Gas',
        growMemCost: 'Gas',
        regularOpCost: 'Gas',
        returnDataPerByteCost: 'Gas',
        eventDataPerByteCost: 'Gas',
        eventPerTopicCost: 'Gas',
        eventBaseCost: 'Gas',
        sandboxDataReadCost: 'Gas',
        sandboxDataWriteCost: 'Gas',
        transferCost: 'Gas',
        maxEventTopics: 'u32',
        maxStackHeight: 'u32',
        maxMemoryPages: 'u32',
        enablePrintln: 'bool',
        maxSubjectLen: 'u32'
      },
      ScheduleTo264: {
        version: 'u32',
        enablePrintln: 'bool',
        limits: 'LimitsTo264',
        instructionWeights: 'InstructionWeights',
        hostFnWeights: 'HostFnWeightsTo264'
      },
      Schedule: {
        version: 'u32',
        enablePrintln: 'bool',
        limits: 'Limits',
        instructionWeights: 'InstructionWeights',
        hostFnWeights: 'HostFnWeights'
      },
      SeedOf: 'Hash',
      TombstoneContractInfo: 'Hash',
      TrieId: 'Bytes'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const AllConvictions = [// 0.1x votes, unlocked.
  'None', // 1x votes, locked for an enactment period following a successful vote.
  'Locked1x', // 2x votes, locked for 2x enactment periods following a successful vote.
  'Locked2x', // 3x votes, locked for 4x...
  'Locked3x', // 4x votes, locked for 8x...
  'Locked4x', // 5x votes, locked for 16x...
  'Locked5x', /// 6x votes, locked for 32x...
  'Locked6x'];
  var definitions$G = {
    rpc: {},
    types: {
      AccountVote: {
        _enum: {
          Standard: 'AccountVoteStandard',
          Split: 'AccountVoteSplit'
        }
      },
      AccountVoteSplit: {
        aye: 'Balance',
        nay: 'Balance'
      },
      AccountVoteStandard: {
        vote: 'Vote',
        balance: 'Balance'
      },
      Conviction: {
        _enum: AllConvictions
      },
      Delegations: {
        votes: 'Balance',
        capital: 'Balance'
      },
      PreimageStatus: {
        _enum: {
          Missing: 'BlockNumber',
          Available: 'PreimageStatusAvailable'
        }
      },
      PreimageStatusAvailable: {
        data: 'Bytes',
        provider: 'AccountId',
        deposit: 'Balance',
        since: 'BlockNumber',
        expiry: 'Option<BlockNumber>'
      },
      PriorLock: '(BlockNumber, Balance)',
      PropIndex: 'u32',
      Proposal: 'Call',
      ProxyState: {
        _enum: {
          Open: 'AccountId',
          Active: 'AccountId'
        }
      },
      ReferendumIndex: 'u32',
      ReferendumInfoTo239: {
        end: 'BlockNumber',
        proposalHash: 'Hash',
        threshold: 'VoteThreshold',
        delay: 'BlockNumber'
      },
      ReferendumInfo: {
        _enum: {
          Ongoing: 'ReferendumStatus',
          Finished: 'ReferendumInfoFinished'
        }
      },
      ReferendumInfoFinished: {
        approved: 'bool',
        end: 'BlockNumber'
      },
      ReferendumStatus: {
        end: 'BlockNumber',
        proposalHash: 'Hash',
        threshold: 'VoteThreshold',
        delay: 'BlockNumber',
        tally: 'Tally'
      },
      Tally: {
        ayes: 'Balance',
        nays: 'Balance',
        turnout: 'Balance'
      },
      Voting: {
        _enum: {
          Direct: 'VotingDirect',
          Delegating: 'VotingDelegating'
        }
      },
      VotingDirect: {
        votes: 'Vec<VotingDirectVote>',
        delegations: 'Delegations',
        prior: 'PriorLock'
      },
      VotingDirectVote: '(ReferendumIndex, AccountVote)',
      VotingDelegating: {
        balance: 'Balance',
        target: 'AccountId',
        conviction: 'Conviction',
        delegations: 'Delegations',
        prior: 'PriorLock'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$F = {
    rpc: {},
    types: {
      ApprovalFlag: 'u32',
      DefunctVoter: {
        who: 'AccountId',
        voteCount: 'Compact<u32>',
        candidateCount: 'Compact<u32>'
      },
      Renouncing: {
        _enum: {
          Member: 'Null',
          RunnerUp: 'Null',
          Candidate: 'Compact<u32>'
        }
      },
      SetIndex: 'u32',
      Vote: 'GenericVote',
      VoteIndex: 'u32',
      VoterInfo: {
        lastActive: 'VoteIndex',
        lastWin: 'VoteIndex',
        pot: 'Balance',
        stake: 'Balance'
      },
      VoteThreshold: {
        _enum: ['Super majority approval', 'Super majority rejection', 'Simple majority']
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$E = {
    rpc: {
      createBlock: {
        description: 'Instructs the manual-seal authorship task to create a new block',
        params: [{
          name: 'createEmpty',
          type: 'bool'
        }, {
          name: 'finalize',
          type: 'bool'
        }, {
          name: 'parentHash',
          type: 'BlockHash',
          isOptional: true
        }],
        type: 'CreatedBlock'
      },
      finalizeBlock: {
        description: 'Instructs the manual-seal authorship task to finalize a block',
        params: [{
          name: 'hash',
          type: 'BlockHash'
        }, {
          name: 'justification',
          type: 'Justification',
          isOptional: true
        }],
        type: 'bool'
      }
    },
    types: {
      CreatedBlock: {
        hash: 'BlockHash',
        aux: 'ImportedAux'
      },
      ImportedAux: {
        headerOnly: 'bool',
        clearJustificationRequests: 'bool',
        needsJustification: 'bool',
        badJustification: 'bool',
        needsFinalityProof: 'bool',
        isNewBest: 'bool'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$D = {
    rpc: {},
    types: {
      EvmAccount: {
        nonce: 'u256',
        balance: 'u256'
      },
      EvmLog: {
        address: 'H160',
        topics: 'Vec<H256>',
        data: 'Bytes'
      },
      EvmVicinity: {
        gasPrice: 'u256',
        origin: 'H160'
      },
      ExitError: {
        _enum: {
          StackUnderflow: 'Null',
          StackOverflow: 'Null',
          InvalidJump: 'Null',
          InvalidRange: 'Null',
          DesignatedInvalid: 'Null',
          CallTooDeep: 'Null',
          CreateCollision: 'Null',
          CreateContractLimit: 'Null',
          OutOfOffset: 'Null',
          OutOfGas: 'Null',
          OutOfFund: 'Null',
          PCUnderflow: 'Null',
          CreateEmpty: 'Null',
          Other: 'Text'
        }
      },
      ExitFatal: {
        _enum: {
          NotSupported: 'Null',
          UnhandledInterrupt: 'Null',
          CallErrorAsFatal: 'ExitError',
          Other: 'Text'
        }
      },
      ExitReason: {
        _enum: {
          Succeed: 'ExitSucceed',
          Error: 'ExitError',
          Revert: 'ExitRevert',
          Fatal: 'ExitFatal'
        }
      },
      ExitRevert: {
        _enum: ['Reverted']
      },
      ExitSucceed: {
        _enum: ['Stopped', 'Returned', 'Suicided']
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$C = {
    rpc: {},
    types: {
      Extrinsic: 'GenericExtrinsic',
      ExtrinsicEra: 'GenericExtrinsicEra',
      ExtrinsicPayload: 'GenericExtrinsicPayload',
      ExtrinsicSignature: 'MultiSignature',
      ExtrinsicV4: 'GenericExtrinsicV4',
      ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
      ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
      ExtrinsicUnknown: 'GenericExtrinsicUnknown',
      ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
      // eras
      ImmortalEra: 'GenericImmortalEra',
      MortalEra: 'GenericMortalEra',
      // signatures & signer
      AnySignature: 'H512',
      MultiSignature: {
        _enum: {
          Ed25519: 'Ed25519Signature',
          Sr25519: 'Sr25519Signature',
          Ecdsa: 'EcdsaSignature'
        }
      },
      Signature: 'H512',
      SignerPayload: 'GenericSignerPayload',
      EcdsaSignature: '[u8; 65]',
      Ed25519Signature: 'H512',
      Sr25519Signature: 'H512'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$B = {
    rpc: {},
    types: {
      AssetOptions: {
        initalIssuance: 'Compact<Balance>',
        permissions: 'PermissionLatest'
      },
      Owner: {
        _enum: {
          None: 'Null',
          Address: 'AccountId'
        }
      },
      PermissionsV1: {
        update: 'Owner',
        mint: 'Owner',
        burn: 'Owner'
      },
      PermissionVersions: {
        _enum: {
          V1: 'PermissionsV1'
        }
      },
      PermissionLatest: 'PermissionsV1'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$A = {
    rpc: {},
    types: {
      ActiveGilt: {
        proportion: 'Perquintill',
        amount: 'Balance',
        who: 'AccountId',
        expiry: 'BlockNumber'
      },
      ActiveGiltsTotal: {
        frozen: 'Balance',
        proportion: 'Perquintill',
        index: 'ActiveIndex',
        target: 'Perquintill'
      },
      ActiveIndex: 'u32',
      GiltBid: {
        amount: 'Balance',
        who: 'AccountId'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$z = {
    rpc: {
      proveFinality: {
        description: 'Prove finality for the range (begin; end] hash.',
        params: [{
          name: 'begin',
          type: 'BlockHash'
        }, {
          name: 'end',
          type: 'BlockHash'
        }, {
          name: 'authoritiesSetId',
          type: 'u64',
          isOptional: true
        }],
        type: 'Option<EncodedFinalityProofs>'
      },
      roundState: {
        description: 'Returns the state of the current best round state as well as the ongoing background rounds',
        params: [],
        type: 'ReportedRoundStates'
      },
      subscribeJustifications: {
        description: 'Subscribes to grandpa justifications',
        params: [],
        pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
        type: 'JustificationNotification'
      }
    },
    types: {
      AuthorityIndex: 'u64',
      AuthorityList: 'Vec<NextAuthority>',
      AuthorityWeight: 'u64',
      EncodedFinalityProofs: 'Bytes',
      GrandpaEquivocation: {
        _enum: {
          Prevote: 'GrandpaEquivocationValue',
          Precommit: 'GrandpaEquivocationValue'
        }
      },
      GrandpaEquivocationProof: {
        setId: 'SetId',
        equivocation: 'GrandpaEquivocation'
      },
      GrandpaEquivocationValue: {
        roundNumber: 'u64',
        identity: 'AuthorityId',
        first: '(GrandpaPrevote, AuthoritySignature)',
        second: '(GrandpaPrevote, AuthoritySignature)'
      },
      GrandpaPrevote: {
        targetHash: 'Hash',
        targetNumber: 'BlockNumber'
      },
      JustificationNotification: 'Bytes',
      KeyOwnerProof: 'MembershipProof',
      NextAuthority: '(AuthorityId, AuthorityWeight)',
      PendingPause: {
        /// Block at which the intention to pause was scheduled.
        scheduledAt: 'BlockNumber',
        /// Number of blocks after which the change will be enacted.
        delay: 'BlockNumber'
      },
      PendingResume: {
        /// Block at which the intention to resume was scheduled.
        scheduledAt: 'BlockNumber',
        /// Number of blocks after which the change will be enacted.
        delay: 'BlockNumber'
      },
      Precommits: {
        currentWeight: 'u32',
        missing: 'BTreeSet<AuthorityId>'
      },
      Prevotes: {
        currentWeight: 'u32',
        missing: 'BTreeSet<AuthorityId>'
      },
      ReportedRoundStates: {
        setId: 'u32',
        best: 'RoundState',
        background: 'Vec<RoundState>'
      },
      RoundState: {
        round: 'u32',
        totalWeight: 'u32',
        thresholdWeight: 'u32',
        prevotes: 'Prevotes',
        precommits: 'Precommits'
      },
      SetId: 'u64',
      StoredPendingChange: {
        scheduledAt: 'BlockNumber',
        delay: 'BlockNumber',
        nextAuthorities: 'AuthorityList'
      },
      StoredState: {
        _enum: {
          /// The current authority set is live, and GRANDPA is enabled.
          Live: 'Null',
          /// There is a pending pause event which will be enacted at the given block height.
          PendingPause: 'PendingPause',
          /// The current GRANDPA authority set is paused.
          Paused: 'Null',
          /// There is a pending resume event which will be enacted at the given block height.
          PendingResume: 'PendingResume'
        }
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$y = {
    rpc: {},
    types: {
      IdentityFields: {
        _set: {
          _bitLength: 64,
          // Mapped here to 32 bits, in Rust these are 64-bit values
          Display: 0b00000000000000000000000000000001,
          Legal: 0b00000000000000000000000000000010,
          Web: 0b00000000000000000000000000000100,
          Riot: 0b00000000000000000000000000001000,
          Email: 0b00000000000000000000000000010000,
          PgpFingerprint: 0b00000000000000000000000000100000,
          Image: 0b00000000000000000000000001000000,
          Twitter: 0b00000000000000000000000010000000
        }
      },
      IdentityInfoAdditional: '(Data, Data)',
      IdentityInfo: {
        additional: 'Vec<IdentityInfoAdditional>',
        display: 'Data',
        legal: 'Data',
        web: 'Data',
        riot: 'Data',
        email: 'Data',
        pgpFingerprint: 'Option<H160>',
        image: 'Data',
        twitter: 'Data'
      },
      IdentityJudgement: {
        _enum: {
          Unknown: 'Null',
          FeePaid: 'Balance',
          Reasonable: 'Null',
          KnownGood: 'Null',
          OutOfDate: 'Null',
          LowQuality: 'Null',
          Erroneous: 'Null'
        }
      },
      RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
      Registration: {
        judgements: 'Vec<RegistrationJudgement>',
        deposit: 'Balance',
        info: 'IdentityInfo'
      },
      RegistrarIndex: 'u32',
      RegistrarInfo: {
        account: 'AccountId',
        fee: 'Balance',
        fields: 'IdentityFields'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$x = {
    rpc: {},
    types: {
      AuthIndex: 'u32',
      AuthoritySignature: 'Signature',
      Heartbeat: {
        blockNumber: 'BlockNumber',
        networkState: 'OpaqueNetworkState',
        sessionIndex: 'SessionIndex',
        authorityIndex: 'AuthIndex',
        validatorsLen: 'u32'
      },
      HeartbeatTo244: {
        blockNumber: 'BlockNumber',
        networkState: 'OpaqueNetworkState',
        sessionIndex: 'SessionIndex',
        authorityIndex: 'AuthIndex'
      },
      OpaqueMultiaddr: 'Bytes',
      OpaquePeerId: 'Bytes',
      OpaqueNetworkState: {
        peerId: 'OpaquePeerId',
        externalAddresses: 'Vec<OpaqueMultiaddr>'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$w = {
    rpc: {},
    types: {
      CallIndex: '(u8, u8)',
      LotteryConfig: {
        price: 'Balance',
        start: 'BlockNumber',
        length: 'BlockNumber',
        delay: 'BlockNumber',
        repeat: 'bool'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$v = {
    rpc: {},
    types: {
      DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
      Kind: '[u8; 16]',
      OffenceDetails: {
        offender: 'Offender',
        reporters: 'Vec<Reporter>'
      },
      Offender: 'IdentificationTuple',
      OpaqueTimeSlot: 'Bytes',
      ReportIdOf: 'Hash',
      Reporter: 'AccountId'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$u = {
    rpc: {},
    types: {
      ProxyDefinition: {
        delegate: 'AccountId',
        proxyType: 'ProxyType',
        delay: 'BlockNumber'
      },
      ProxyType: {
        _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
      },
      ProxyAnnouncement: {
        real: 'AccountId',
        callHash: 'Hash',
        height: 'BlockNumber'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$t = {
    rpc: {},
    types: {
      ActiveRecovery: {
        created: 'BlockNumber',
        deposit: 'Balance',
        friends: 'Vec<AccountId>'
      },
      RecoveryConfig: {
        delayPeriod: 'BlockNumber',
        deposit: 'Balance',
        friends: 'Vec<AccountId>',
        threshold: 'u16'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$s = {
    rpc: {},
    types: {
      Period: '(BlockNumber, u32)',
      Priority: 'u8',
      SchedulePeriod: 'Period',
      SchedulePriority: 'Priority',
      Scheduled: {
        maybeId: 'Option<Bytes>',
        priority: 'SchedulePriority',
        call: 'Call',
        maybePeriodic: 'Option<SchedulePeriod>',
        origin: 'PalletsOrigin'
      },
      ScheduledTo254: {
        maybeId: 'Option<Bytes>',
        priority: 'SchedulePriority',
        call: 'Call',
        maybePeriodic: 'Option<SchedulePeriod>'
      },
      TaskAddress: '(BlockNumber, u32)'
    }
  };

  function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$q(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  // The runtime definition of SessionKeys are passed as a Trait to session
  // Defined in `node/runtime/src/lib.rs` as follow
  //   impl_opaque_keys! {
  //     pub struct SessionKeys {
  // Here we revert to tuples to keep the interfaces "opaque", as per the use
  const keyTypes = {
    // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
    Keys: 'SessionKeys4',
    // shortcuts for 1-9 key tuples
    SessionKeys1: '(AccountId)',
    SessionKeys2: '(AccountId, AccountId)',
    // older substrate master
    SessionKeys3: '(AccountId, AccountId, AccountId)',
    // CC2, Substrate master
    SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
    // CC3
    SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)'
  };
  var definitions$r = {
    rpc: {},
    types: _objectSpread$q(_objectSpread$q({}, keyTypes), {}, {
      FullIdentification: 'Exposure',
      IdentificationTuple: '(ValidatorId, FullIdentification)',
      MembershipProof: {
        session: 'SessionIndex',
        trieNodes: 'Vec<Vec<u8>>',
        validatorCount: 'ValidatorCount'
      },
      SessionIndex: 'u32',
      ValidatorCount: 'u32'
    })
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$q = {
    rpc: {},
    types: {
      Bid: {
        who: 'AccountId',
        kind: 'BidKind',
        value: 'Balance'
      },
      BidKind: {
        _enum: {
          Deposit: 'Balance',
          Vouch: '(AccountId, Balance)'
        }
      },
      // a society-specific Judgement (not the same as identity Judgement)
      SocietyJudgement: {
        _enum: ['Rebid', 'Reject', 'Approve']
      },
      // a society-specific Vote
      SocietyVote: {
        _enum: ['Skeptic', 'Reject', 'Approve']
      },
      StrikeCount: 'u32',
      VouchingStatus: {
        _enum: ['Vouching', 'Banned']
      }
    }
  };

  function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$p(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const deprecated = {
    Points: 'u32',
    EraPoints: {
      total: 'Points',
      individual: 'Vec<Points>'
    }
  };
  const phragmen = {
    CompactAssignments: {
      votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
      votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
      votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
      votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
      votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
      votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
      votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
      votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
      votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
      votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
      votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
      votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
      votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
      votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
      votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
      votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
    },
    CompactAssignmentsTo257: {
      votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
      votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
      votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
      votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
      votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
      votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
      votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
      votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
      votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
      votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
      votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
      votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
      votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
      votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
      votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
      votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
    },
    CompactScore: '(ValidatorIndex, OffchainAccuracy)',
    CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
    ElectionCompute: {
      _enum: ['OnChain', 'Signed', 'Authority']
    },
    ElectionResult: {
      compute: 'ElectionCompute',
      slotStake: 'Balance',
      electedStashes: 'Vec<AccountId>',
      exposures: 'Vec<(AccountId, Exposure)>'
    },
    ElectionScore: '[u128; 3]',
    ElectionSize: {
      validators: 'Compact<ValidatorIndex>',
      nominators: 'Compact<NominatorIndex>'
    },
    ElectionStatus: {
      _enum: {
        Close: 'Null',
        Open: 'BlockNumber'
      }
    },
    ExtendedBalance: 'u128',
    RawSolution: {
      compact: 'CompactAssignments',
      score: 'ElectionScore',
      round: 'u32'
    },
    ReadySolution: {
      supports: 'SolutionSupports',
      score: 'ElectionScore',
      compute: 'ElectionCompute'
    },
    RoundSnapshot: {
      voters: 'Vec<(AccountId, VoteWeight, Vec<AccountId>)>',
      targets: 'Vec<AccountId>'
    },
    SeatHolder: {
      who: 'AccountId',
      stake: 'Balance',
      deposit: 'Balance'
    },
    SolutionOrSnapshotSize: {
      voters: 'Compact<u32>',
      targets: 'Compact<u32>'
    },
    SolutionSupport: {
      total: 'ExtendedBalance',
      voters: 'Vec<(AccountId, ExtendedBalance)>'
    },
    SolutionSupports: 'Vec<(AccountId, SolutionSupport)>',
    Voter: {
      votes: 'Vec<AccountId>',
      stake: 'Balance',
      deposit: 'Balance'
    },
    VoteWeight: 'u64'
  };
  var definitions$p = {
    rpc: {},
    types: _objectSpread$p(_objectSpread$p(_objectSpread$p({}, deprecated), phragmen), {}, {
      ActiveEraInfo: {
        index: 'EraIndex',
        start: 'Option<Moment>'
      },
      EraIndex: 'u32',
      EraRewardPoints: {
        total: 'RewardPoint',
        individual: 'BTreeMap<AccountId, RewardPoint>'
      },
      EraRewards: {
        total: 'u32',
        rewards: 'Vec<u32>'
      },
      Exposure: {
        total: 'Compact<Balance>',
        own: 'Compact<Balance>',
        others: 'Vec<IndividualExposure>'
      },
      Forcing: {
        _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
      },
      IndividualExposure: {
        who: 'AccountId',
        value: 'Compact<Balance>'
      },
      KeyType: 'AccountId',
      MomentOf: 'Moment',
      Nominations: {
        targets: 'Vec<AccountId>',
        submittedIn: 'EraIndex',
        suppressed: 'bool'
      },
      NominatorIndex: 'u32',
      NominatorIndexCompact: 'Compact<NominatorIndex>',
      OffchainAccuracy: 'PerU16',
      OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
      PhragmenScore: '[u128; 3]',
      Points: 'u32',
      RewardDestination: {
        _enum: {
          Staked: 'Null',
          Stash: 'Null',
          Controller: 'Null',
          Account: 'AccountId'
        }
      },
      RewardDestinationTo257: {
        _enum: ['Staked', 'Stash', 'Controller']
      },
      RewardPoint: 'u32',
      SlashJournalEntry: {
        who: 'AccountId',
        amount: 'Balance',
        ownSlash: 'Balance'
      },
      SlashingSpansTo204: {
        spanIndex: 'SpanIndex',
        lastStart: 'EraIndex',
        prior: 'Vec<EraIndex>'
      },
      SlashingSpans: {
        spanIndex: 'SpanIndex',
        lastStart: 'EraIndex',
        lastNonzeroSlash: 'EraIndex',
        prior: 'Vec<EraIndex>'
      },
      SpanIndex: 'u32',
      SpanRecord: {
        slashed: 'Balance',
        paidOut: 'Balance'
      },
      StakingLedgerTo223: {
        stash: 'AccountId',
        total: 'Compact<Balance>',
        active: 'Compact<Balance>',
        unlocking: 'Vec<UnlockChunk>'
      },
      StakingLedgerTo240: {
        stash: 'AccountId',
        total: 'Compact<Balance>',
        active: 'Compact<Balance>',
        unlocking: 'Vec<UnlockChunk>',
        lastReward: 'Option<EraIndex>'
      },
      StakingLedger: {
        stash: 'AccountId',
        total: 'Compact<Balance>',
        active: 'Compact<Balance>',
        unlocking: 'Vec<UnlockChunk>',
        claimedRewards: 'Vec<EraIndex>'
      },
      UnappliedSlashOther: '(AccountId, Balance)',
      UnappliedSlash: {
        validator: 'AccountId',
        own: 'Balance',
        others: 'Vec<UnappliedSlashOther>',
        reporters: 'Vec<AccountId>',
        payout: 'Balance'
      },
      UnlockChunk: {
        value: 'Compact<Balance>',
        era: 'Compact<BlockNumber>'
      },
      ValidatorIndex: 'u16',
      ValidatorIndexCompact: 'Compact<ValidatorIndex>',
      ValidatorPrefs: 'ValidatorPrefsWithCommission',
      ValidatorPrefsWithCommission: {
        commission: 'Compact<Perbill>'
      },
      ValidatorPrefsWithBlocked: {
        commission: 'Compact<Perbill>',
        blocked: 'bool'
      },
      ValidatorPrefsTo196: {
        validatorPayment: 'Compact<Balance>'
      },
      ValidatorPrefsTo145: {
        unstakeThreshold: 'Compact<u32>',
        validatorPayment: 'Compact<Balance>'
      }
    })
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$o = {
    rpc: {},
    types: {
      WeightToFeeCoefficient: {
        coeffInteger: 'Balance',
        coeffFrac: 'Perbill',
        negative: 'bool',
        degree: 'u8'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$n = {
    rpc: {
      genSyncSpec: {
        endpoint: 'sync_state_genSyncSpec',
        description: 'Returns the json-serialized chainspec running the node, with a sync state.',
        params: [{
          name: 'raw',
          type: 'bool'
        }],
        type: 'Json'
      }
    },
    types: {}
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$m = {
    rpc: {
      accountNextIndex: {
        alias: ['account_nextIndex'],
        description: 'Retrieves the next accountIndex as available on the node',
        params: [{
          name: 'accountId',
          type: 'AccountId'
        }],
        type: 'Index'
      },
      dryRun: {
        alias: ['system_dryRunAt'],
        description: 'Dry run an extrinsic at a given block',
        params: [{
          name: 'extrinsic',
          type: 'Bytes'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'ApplyExtrinsicResult'
      },
      name: {
        description: 'Retrieves the node name',
        params: [],
        type: 'Text'
      },
      version: {
        description: 'Retrieves the version of the node',
        params: [],
        type: 'Text'
      },
      chain: {
        description: 'Retrieves the chain',
        params: [],
        type: 'Text'
      },
      chainType: {
        description: 'Retrieves the chain type',
        params: [],
        type: 'ChainType'
      },
      properties: {
        description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
        params: [],
        type: 'ChainProperties'
      },
      health: {
        description: 'Return health status of the node',
        params: [],
        type: 'Health'
      },
      localPeerId: {
        description: 'Returns the base58-encoded PeerId of the node',
        params: [],
        type: 'Text'
      },
      localListenAddresses: {
        description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
        params: [],
        type: 'Vec<Text>'
      },
      peers: {
        description: 'Returns the currently connected peers',
        params: [],
        type: 'Vec<PeerInfo>'
      },
      networkState: {
        alias: ['system_unstable_networkState'],
        description: 'Returns current state of the network',
        params: [],
        type: 'NetworkState'
      },
      addReservedPeer: {
        description: 'Adds a reserved peer',
        params: [{
          name: 'peer',
          type: 'Text'
        }],
        type: 'Text'
      },
      removeReservedPeer: {
        description: 'Remove a reserved peer',
        params: [{
          name: 'peerId',
          type: 'Text'
        }],
        type: 'Text'
      },
      nodeRoles: {
        description: 'Returns the roles the node is running as',
        params: [],
        type: 'Vec<NodeRole>'
      },
      syncState: {
        description: 'Returns the state of the syncing of the node',
        params: [],
        type: 'SyncState'
      },
      addLogFilter: {
        description: 'Adds the supplied directives to the current log filter',
        params: [{
          name: 'directives',
          type: 'Text'
        }],
        type: 'Null'
      },
      resetLogFilter: {
        description: 'Resets the log filter to Substrate defaults',
        params: [],
        type: 'Null'
      }
    },
    types: {
      AccountInfo: 'AccountInfoWithRefCount',
      AccountInfoWithRefCount: {
        nonce: 'Index',
        refcount: 'RefCount',
        data: 'AccountData'
      },
      AccountInfoWithProviders: {
        nonce: 'Index',
        consumers: 'RefCount',
        providers: 'RefCount',
        data: 'AccountData'
      },
      ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
      BlockLength: {
        max: 'PerDispatchClassU32'
      },
      BlockWeights: {
        baseBlock: 'Weight',
        maxBlock: 'Weight',
        perClass: 'PerDispatchClassWeightsPerClass'
      },
      ChainProperties: 'GenericChainProperties',
      ChainType: {
        _enum: {
          Development: 'Null',
          Local: 'Null',
          Live: 'Null',
          Custom: 'Text'
        }
      },
      ConsumedWeight: 'PerDispatchClassWeight',
      DigestOf: 'Digest',
      DispatchClass: {
        _enum: ['Normal', 'Operational', 'Mandatory']
      },
      DispatchError: {
        _enum: {
          Other: 'Null',
          CannotLookup: 'Null',
          BadOrigin: 'Null',
          Module: 'DispatchErrorModule'
        }
      },
      DispatchErrorModule: {
        index: 'u8',
        error: 'u8'
      },
      DispatchErrorTo198: {
        module: 'Option<u8>',
        error: 'u8'
      },
      DispatchInfo: {
        weight: 'Weight',
        class: 'DispatchClass',
        paysFee: 'Pays'
      },
      DispatchInfoTo190: {
        weight: 'Weight',
        class: 'DispatchClass'
      },
      DispatchInfoTo244: {
        weight: 'Weight',
        class: 'DispatchClass',
        paysFee: 'bool'
      },
      DispatchOutcome: 'Result<(), DispatchError>',
      DispatchResult: 'Result<(), DispatchError>',
      DispatchResultOf: 'DispatchResult',
      DispatchResultTo198: 'Result<(), Text>',
      Event: 'GenericEvent',
      EventId: '[u8; 2]',
      EventIndex: 'u32',
      EventRecord: {
        phase: 'Phase',
        event: 'Event',
        topics: 'Vec<Hash>'
      },
      Health: {
        peers: 'u64',
        isSyncing: 'bool',
        shouldHavePeers: 'bool'
      },
      InvalidTransaction: {
        _enum: {
          Call: 'Null',
          Payment: 'Null',
          Future: 'Null',
          Stale: 'Null',
          BadProof: 'Null',
          AncientBirthBlock: 'Null',
          ExhaustsResources: 'Null',
          Custom: 'u8',
          BadMandatory: 'Null',
          MandatoryDispatch: 'Null'
        }
      },
      Key: 'Bytes',
      LastRuntimeUpgradeInfo: {
        specVersion: 'Compact<u32>',
        specName: 'Text'
      },
      NetworkState: {
        peerId: 'Text',
        listenedAddresses: 'Vec<Text>',
        externalAddresses: 'Vec<Text>',
        connectedPeers: 'HashMap<Text, Peer>',
        notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
        averageDownloadPerSec: 'u64',
        averageUploadPerSec: 'u64',
        peerset: 'NetworkStatePeerset'
      },
      NetworkStatePeerset: {
        messageQueue: 'u64',
        nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
      },
      NetworkStatePeersetInfo: {
        connected: 'bool',
        reputation: 'i32'
      },
      NodeRole: {
        _enum: {
          Full: 'Null',
          LightClient: 'Null',
          Authority: 'Null',
          UnknownRole: 'u8'
        }
      },
      NotConnectedPeer: {
        knownAddresses: 'Vec<Text>',
        latestPingTime: 'Option<PeerPing>',
        versionString: 'Option<Text>'
      },
      Peer: {
        enabled: 'bool',
        endpoint: 'PeerEndpoint',
        knownAddresses: 'Vec<Text>',
        latestPingTime: 'PeerPing',
        open: 'bool',
        versionString: 'Text'
      },
      PeerEndpoint: {
        listening: 'PeerEndpointAddr'
      },
      PeerEndpointAddr: {
        _alias: {
          localAddr: 'local_addr',
          sendBackAddr: 'send_back_addr'
        },
        localAddr: 'Text',
        sendBackAddr: 'Text'
      },
      PeerPing: {
        nanos: 'u64',
        secs: 'u64'
      },
      PeerInfo: {
        peerId: 'Text',
        roles: 'Text',
        protocolVersion: 'u32',
        bestHash: 'Hash',
        bestNumber: 'BlockNumber'
      },
      PerDispatchClassU32: {
        normal: 'u32',
        operational: 'u32',
        mandatory: 'u32'
      },
      PerDispatchClassWeight: {
        normal: 'Weight',
        operational: 'Weight',
        mandatory: 'Weight'
      },
      PerDispatchClassWeightsPerClass: {
        normal: 'WeightPerClass',
        operational: 'WeightPerClass',
        mandatory: 'WeightPerClass'
      },
      Phase: {
        _enum: {
          ApplyExtrinsic: 'u32',
          Finalization: 'Null',
          Initialization: 'Null'
        }
      },
      RawOrigin: {
        _enum: {
          Root: 'Null',
          Signed: 'AccountId',
          None: 'Null'
        }
      },
      RefCount: 'u32',
      RefCountTo259: 'u8',
      SyncState: {
        startingBlock: 'BlockNumber',
        currentBlock: 'BlockNumber',
        highestBlock: 'Option<BlockNumber>'
      },
      SystemOrigin: 'RawOrigin',
      TransactionValidityError: {
        _enum: {
          Invalid: 'InvalidTransaction',
          Unknown: 'UnknownTransaction'
        }
      },
      UnknownTransaction: {
        _enum: {
          CannotLookup: 'Null',
          NoUnsignedValidator: 'Null',
          Custom: 'u8'
        }
      },
      WeightPerClass: {
        baseExtrinsic: 'Weight',
        maxExtrinsic: 'Weight',
        maxTotal: 'Option<Weight>',
        reserved: 'Option<Weight>'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$l = {
    rpc: {},
    types: {
      Bounty: {
        proposer: 'AccountId',
        value: 'Balance',
        fee: 'Balance',
        curatorDeposit: 'Balance',
        bond: 'Balance',
        status: 'BountyStatus'
      },
      BountyIndex: 'u32',
      BountyStatus: {
        _enum: {
          Proposed: 'Null',
          Approved: 'Null',
          Funded: 'Null',
          CuratorProposed: 'BountyStatusCuratorProposed',
          Active: 'BountyStatusActive',
          PendingPayout: 'BountyStatusPendingPayout'
        }
      },
      BountyStatusActive: {
        curator: 'AccountId',
        updateDue: 'BlockNumber'
      },
      BountyStatusCuratorProposed: {
        curator: 'AccountId'
      },
      BountyStatusPendingPayout: {
        curator: 'AccountId',
        beneficiary: 'AccountId',
        unlockAt: 'BlockNumber'
      },
      OpenTip: {
        reason: 'Hash',
        who: 'AccountId',
        finder: 'AccountId',
        deposit: 'Balance',
        closes: 'Option<BlockNumber>',
        tips: 'Vec<OpenTipTip>',
        findersFee: 'bool'
      },
      OpenTipTo225: {
        reason: 'Hash',
        who: 'AccountId',
        finder: 'Option<OpenTipFinderTo225>',
        closes: 'Option<BlockNumber>',
        tips: 'Vec<OpenTipTip>'
      },
      OpenTipFinderTo225: '(AccountId, Balance)',
      OpenTipTip: '(AccountId, Balance)',
      TreasuryProposal: {
        proposer: 'AccountId',
        value: 'Balance',
        beneficiary: 'AccountId',
        bond: 'Balance'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  var definitions$k = {
    rpc: {},
    types: {
      Multiplier: 'Fixed128'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$j = {
    rpc: {},
    types: {
      Multisig: {
        when: 'Timepoint',
        deposit: 'Balance',
        depositor: 'AccountId',
        approvals: 'Vec<AccountId>'
      },
      Timepoint: {
        height: 'BlockNumber',
        index: 'u32'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$i = {
    rpc: {},
    types: {
      VestingInfo: {
        locked: 'Balance',
        perBlock: 'Balance',
        startingBlock: 'BlockNumber'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$h = {
    rpc: {},
    types: {
      BlockAttestations: {
        receipt: 'CandidateReceipt',
        valid: 'Vec<AccountId>',
        invalid: 'Vec<AccountId>'
      },
      IncludedBlocks: {
        actualNumber: 'BlockNumber',
        session: 'SessionIndex',
        randomSeed: 'H256',
        activeParachains: 'Vec<ParaId>',
        paraBlocks: 'Vec<Hash>'
      },
      MoreAttestations: {}
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$g = {
    rpc: {},
    types: {
      EthereumAddress: 'H160',
      StatementKind: {
        _enum: ['Regular', 'Saft']
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$f = {
    rpc: {},
    types: {
      FundIndex: 'u32',
      LastContribution: {
        _enum: {
          Never: 'Null',
          PreEnding: 'AuctionIndex',
          Ending: 'BlockNumber'
        }
      },
      DeployData: {
        codeHash: 'Hash',
        codeSize: 'u32',
        initialHeadData: 'HeadData'
      },
      FundInfo: {
        parachain: 'Option<ParaId>',
        owner: 'AccountId',
        deposit: 'Balance',
        raised: 'Balance',
        end: 'BlockNumber',
        cap: 'Balance',
        lastContribution: 'LastContribution',
        firstSlot: 'BlockNumber',
        lastSlot: 'BlockNumber',
        deployData: 'Option<DeployData>'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var hrmpTypes = {
    HrmpChannel: {
      maxCapacity: 'u32',
      maxTotalSize: 'u32',
      maxMessageSize: 'u32',
      msgCount: 'u32',
      totalSize: 'u32',
      mqcHead: 'Option<Hash>',
      senderDeposit: 'Balance',
      recipientDeposit: 'Balance'
    },
    HrmpChannelId: {
      sender: 'u32',
      receiver: 'u32'
    },
    HrmpOpenChannelRequest: {
      confirmed: 'bool',
      age: 'SessionIndex',
      senderDeposit: 'Balance',
      maxMessageSize: 'u32',
      maxCapacity: 'u32',
      maxTotalSize: 'u32'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const SLOT_RANGE_COUNT = 10;
  var slotTypes = {
    AuctionIndex: 'u32',
    Bidder: {
      _enum: {
        New: 'NewBidder',
        Existing: 'ParaId'
      }
    },
    IncomingParachain: {
      _enum: {
        Unset: 'NewBidder',
        Fixed: 'IncomingParachainFixed',
        Deploy: 'IncomingParachainDeploy'
      }
    },
    IncomingParachainDeploy: {
      code: 'ValidationCode',
      initialHeadData: 'HeadData'
    },
    IncomingParachainFixed: {
      codeHash: 'Hash',
      codeSize: 'u32',
      initialHeadData: 'HeadData'
    },
    LeasePeriod: 'BlockNumber',
    LeasePeriodOf: 'BlockNumber',
    NewBidder: {
      who: 'AccountId',
      sub: 'SubId'
    },
    NewBidderOption: 'Option<NewBidder>',
    SlotRange: {
      _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
    },
    SubId: 'u32',
    WinningData: `[WinningDataEntry; ${SLOT_RANGE_COUNT}]`,
    WinningDataEntry: 'Option<Bidder>',
    WinnersData: 'Vec<WinnersDataTuple>',
    WinnersDataTuple: '(NewBidderOption, ParaId, BalanceOf, SlotRange)'
  };

  function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$o(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  const proposeTypes = {
    ParachainProposal: {
      proposer: 'AccountId',
      genesisHead: 'HeadData',
      validators: 'Vec<ValidatorId>',
      name: 'Bytes',
      balance: 'Balance'
    },
    RegisteredParachainInfo: {
      validators: 'Vec<ValidatorId>',
      proposer: 'AccountId'
    }
  };
  var definitions$e = {
    rpc: {},
    types: _objectSpread$o(_objectSpread$o(_objectSpread$o(_objectSpread$o({}, proposeTypes), hrmpTypes), slotTypes), {}, {
      AbridgedCandidateReceipt: {
        parachainIndex: 'ParaId',
        relayParent: 'Hash',
        headData: 'HeadData',
        collator: 'CollatorId',
        signature: 'CollatorSignature',
        povBlockHash: 'Hash',
        commitments: 'CandidateCommitments'
      },
      AbridgedHostConfiguration: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        maxUpwardQueueCount: 'u32',
        maxUpwardQueueSize: 'u32',
        maxUpwardMessageSize: 'u32',
        maxUpwardMessageNumPerCandidate: 'u32',
        hrmpMaxMessageNumPerCandidate: 'u32',
        validationUpgradeFrequency: 'BlockNumber',
        validationUpgradeDelay: 'BlockNumber'
      },
      AbridgedHrmpChannel: {
        maxCapacity: 'u32',
        maxTotalSize: 'u32',
        maxMessageSize: 'u32',
        msgCount: 'u32',
        totalSize: 'u32',
        mqcHead: 'Option<Hash>'
      },
      AssignmentId: 'AccountId',
      AssignmentKind: {
        _enum: {
          Parachain: 'Null',
          Parathread: '(CollatorId, u32)'
        }
      },
      AttestedCandidate: {
        candidate: 'AbridgedCandidateReceipt',
        validityVotes: 'Vec<ValidityAttestation>',
        validatorIndices: 'BitVec'
      },
      AuthorityDiscoveryId: 'AccountId',
      AvailabilityBitfield: 'BitVec',
      AvailabilityBitfieldRecord: {
        bitfield: 'AvailabilityBitfield',
        submittedTt: 'BlockNumber'
      },
      BackedCandidate: {
        candidate: 'CommittedCandidateReceipt',
        validityVotes: 'Vec<ValidityAttestation>',
        validatorIndices: 'BitVec'
      },
      BufferedSessionChange: {
        applyAt: 'BlockNumber',
        validators: 'Vec<ValidatorId>',
        queued: 'Vec<ValidatorId>',
        sessionIndex: 'SessionIndex'
      },
      CandidateCommitments: {
        upwardMessages: 'Vec<UpwardMessage>',
        horizontalMessages: 'Vec<OutboundHrmpMessage>',
        newValidationCode: 'Option<ValidationCode>',
        headData: 'HeadData',
        processedDownwardMessages: 'u32',
        hrmpWatermark: 'BlockNumber'
      },
      CandidateDescriptor: {
        paraId: 'ParaId',
        relayParent: 'Hash',
        collatorId: 'CollatorId',
        persistedValidationDataHash: 'Hash',
        povHash: 'Hash',
        erasureRoot: 'Hash',
        signature: 'CollatorSignature',
        paraHead: 'Hash'
      },
      CandidateHash: 'Hash',
      CandidatePendingAvailability: {
        core: 'CoreIndex',
        hash: 'CandidateHash',
        descriptor: 'CandidateDescriptor',
        availabilityVotes: 'BitVec',
        backers: 'BitVec',
        relayParentNumber: 'BlockNumber',
        backedInNumber: 'BlockNumber'
      },
      CandidateReceipt: {
        descriptor: 'CandidateDescriptor',
        commitmentsHash: 'Hash'
      },
      CollatorId: 'H256',
      CollatorSignature: 'Signature',
      CommittedCandidateReceipt: {
        descriptor: 'CandidateDescriptor',
        commitments: 'CandidateCommitments'
      },
      CoreAssignment: {
        core: 'CoreIndex',
        paraId: 'ParaId',
        kind: 'AssignmentKind',
        groupIdx: 'GroupIndex'
      },
      CoreIndex: 'u32',
      CoreOccupied: {
        _enum: {
          Parathread: 'ParathreadEntry',
          Parachain: 'Null'
        }
      },
      DoubleVoteReport: {
        identity: 'ValidatorId',
        first: '(Statement, ValidatorSignature)',
        second: '(Statement, ValidatorSignature)',
        proof: 'MembershipProof',
        signingContext: 'SigningContext'
      },
      DownwardMessage: 'Bytes',
      GroupIndex: 'u32',
      GlobalValidationSchedule: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        blockNumber: 'BlockNumber'
      },
      HeadData: 'Bytes',
      HostConfiguration: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        maxUpwardQueueCount: 'u32',
        maxUpwardQueueSize: 'u32',
        maxUpwardMessageSize: 'u32',
        maxUpwardMessageNumPerCandidate: 'u32',
        hrmpMaxMessageNumPerCandidate: 'u32',
        validationUpgradeFrequency: 'BlockNumber',
        validationUpgradeDelay: 'BlockNumber',
        maxPovSize: 'u32',
        maxDownwardMessageSize: 'u32',
        preferredDispatchableUpwardMessagesStepWeight: 'Weight',
        hrmpMaxParachainOutboundChannels: 'u32',
        hrmpMaxParathreadOutboundChannels: 'u32',
        hrmpOpenRequestTtl: 'u32',
        hrmpSenderDeposit: 'Balance',
        hrmpRecipientDeposit: 'Balance',
        hrmpChannelMaxCapacity: 'u32',
        hrmpChannelMaxTotalSize: 'u32',
        hrmpMaxParachainInboundChannels: 'u32',
        hrmpMaxParathreadInboundChannels: 'u32',
        hrmpChannelMaxMessageSize: 'u32',
        acceptancePeriod: 'BlockNumber',
        parathreadCores: 'u32',
        parathreadRetries: 'u32',
        groupRotationFrequency: 'BlockNumber',
        chainAvailabilityPeriod: 'BlockNumber',
        threadAvailabilityPeriod: 'BlockNumber',
        schedulingLookahead: 'u32',
        maxValidatorsPerCore: 'Option<u32>',
        disputePeriod: 'SessionIndex',
        noShowSlots: 'u32',
        nDelayTranches: 'u32',
        zerothDelayTrancheWidth: 'u32',
        neededApprovals: 'u32',
        relayVrfModuloSamples: 'u32'
      },
      InboundDownwardMessage: {
        pubSentAt: 'BlockNumber',
        pubMsg: 'DownwardMessage'
      },
      InboundHrmpMessage: {
        sentAt: 'BlockNumber',
        data: 'Bytes'
      },
      InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
      LocalValidationData: {
        parentHead: 'HeadData',
        balance: 'Balance',
        codeUpgradeAllowed: 'Option<BlockNumber>'
      },
      MessageIngestionType: {
        downwardMessages: 'Vec<InboundDownwardMessage>',
        horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
      },
      MessageQueueChain: 'RelayChainHash',
      OutboundHrmpMessage: {
        recipient: 'u32',
        data: 'Bytes'
      },
      ParachainDispatchOrigin: {
        _enum: ['Signed', 'Parachain', 'Root']
      },
      ParachainInherentData: {
        validationData: 'PersistedValidationData',
        relayChainState: 'StorageProof',
        downwardMessages: 'Vec<InboundDownwardMessage>',
        horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'
      },
      ParaGenesisArgs: {
        genesisHead: 'Bytes',
        validationCode: 'Bytes',
        parachain: 'bool'
      },
      ParaId: 'u32',
      ParaInfo: {
        scheduling: 'Scheduling'
      },
      ParaLifecycle: {
        _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']
      },
      ParaPastCodeMeta: {
        upgradeTimes: 'Vec<BlockNumber>',
        lastPruned: 'Option<BlockNumber>'
      },
      ParaScheduling: {
        _enum: ['Always', 'Dynamic']
      },
      ParathreadClaim: '(ParaId, CollatorId)',
      ParathreadClaimQueue: {
        queue: 'Vec<QueuedParathread>',
        nextCoreOffset: 'u32'
      },
      ParathreadEntry: {
        claim: 'ParathreadClaim',
        retries: 'u32'
      },
      ParaValidatorIndex: 'u32',
      PersistedValidationData: {
        parentHead: 'HeadData',
        relayParentNumber: 'RelayChainBlockNumber',
        relayParentStorageRoot: 'Hash',
        maxPovSize: 'u32'
      },
      RelayChainBlockNumber: 'u32',
      RelayChainHash: 'Hash',
      QueuedParathread: {
        claim: 'ParathreadEntry',
        coreOffset: 'u32'
      },
      Remark: '[u8; 32]',
      Retriable: {
        _enum: {
          Never: 'Null',
          WithRetries: 'u32'
        }
      },
      Scheduling: {
        _enum: ['Always', 'Dynamic']
      },
      SessionInfo: {
        validators: 'Vec<ValidatorId>',
        discoveryKeys: 'Vec<AuthorityDiscoveryId>',
        assignmentKeys: 'Vec<AssignmentId>',
        validatorGroups: 'Vec<SessionInfoValidatorGroup>',
        nCores: 'u32',
        zerothDelayTrancheWidth: 'u32',
        relayVrfModuloSamples: 'u32',
        nDelayTranches: 'u32',
        noShowSlots: 'u32',
        neededApprovals: 'u32'
      },
      SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',
      SignedAvailabilityBitfield: {
        payload: 'BitVec',
        validatorIndex: 'ParaValidatorIndex',
        signature: 'ValidatorSignature'
      },
      SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
      SigningContext: {
        sessionIndex: 'SessionIndex',
        parentHash: 'Hash'
      },
      Statement: {
        _enum: {
          Never: 'Null',
          // starts at 1
          Candidate: 'Hash',
          Valid: 'Hash',
          Invalid: 'Hash'
        }
      },
      TransientValidationData: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        balance: 'Balance',
        codeUpgradeAllowed: 'Option<BlockNumber>',
        dmqLength: 'u32'
      },
      UpwardMessage: 'Bytes',
      ValidationFunctionParams: {
        maxCodeSize: 'u32',
        relayChainHeight: 'RelayChainBlockNumber',
        codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
      },
      ValidationCode: 'Bytes',
      ValidationData: {
        persisted: 'PersistedValidationData',
        transient: 'TransientValidationData'
      },
      ValidationDataType: {
        validationData: 'ValidationData',
        relayChainState: 'Vec<Bytes>'
      },
      ValidatorSignature: 'Signature',
      ValidityAttestation: {
        _enum: {
          Never: 'Null',
          // starts at 1
          Implicit: 'ValidatorSignature',
          Explicit: 'ValidatorSignature'
        }
      },
      VersionedXcm: {
        _enum: {
          V0: 'Xcm'
        }
      },
      WithdrawAsset: {
        assets: 'Vec<MultiAsset>',
        effects: 'Vec<Order>'
      },
      ReserveAssetDeposit: {
        assets: 'Vec<MultiAsset>',
        effects: 'Vec<Order>'
      },
      TeleportAsset: {
        assets: 'Vec<MultiAsset>',
        effects: 'Vec<Order>'
      },
      Balances: {
        queryId: 'Compact<u64>',
        assets: 'Vec<MultiAsset>'
      },
      Transact: {
        originType: 'OriginKind',
        call: 'Vec<u8>'
      },
      RelayTo: {
        dest: 'MultiLocation',
        inner: 'VersionedXcm'
      },
      RelayedFrom: {
        superorigin: 'MultiLocation',
        inner: 'VersionedXcm'
      },
      Xcm: {
        _enum: {
          WithdrawAsset: 'WithdrawAsset',
          ReserveAssetDeposit: 'ReserveAssetDeposit',
          TeleportAsset: 'TeleportAsset',
          Balances: 'Balances',
          Transact: 'Transact',
          RelayTo: 'RelayTo',
          RelayedFrom: 'RelayedFrom'
        }
      },
      XcmError: {
        _enum: ['Undefined', 'Unimplemented', 'UnhandledXcmVersion', 'UnhandledXcmMessage', 'UnhandledEffect', 'EscalationOfPrivilege', 'UntrustedReserveLocation', 'UntrustedTeleportLocation', 'DestinationBufferOverflow', 'CannotReachDestination', 'MultiLocationFull', 'FailedToDecode', 'BadOrigin']
      },
      XcmResult: {
        _enum: {
          Ok: '()',
          Err: 'XcmError'
        }
      },
      OriginKind: {
        _enum: ['Native', 'SovereignAccount', 'Superuser']
      },
      NetworkId: {
        _enum: {
          Any: 'Null',
          Named: 'Vec<u8>',
          Polkadot: 'Null',
          Kusama: 'Null'
        }
      },
      MultiLocation: {
        _enum: {
          Null: 'Null',
          X1: 'Junction',
          X2: '(Junction, Junction)',
          X3: '(Junction, Junction, Junction)',
          X4: '(Junction, Junction, Junction, Junction)'
        }
      },
      AccountId32Junction: {
        network: 'NetworkId',
        id: 'AccountId'
      },
      AccountIndex64Junction: {
        network: 'NetworkId',
        index: 'Compact<u64>'
      },
      AccountKey20Junction: {
        network: 'NetworkId',
        index: '[u8; 20]'
      },
      Junction: {
        _enum: {
          Parent: 'Null',
          Parachain: 'Compact<u32>',
          AccountId32: 'AccountId32Junction',
          AccountIndex64: 'AccountIndex64Junction',
          AccountKey20: 'AccountKey20Junction',
          PalletInstance: 'u8',
          GeneralIndex: 'Compact<u128>',
          GeneralKey: 'Vec<u8>',
          OnlyChild: 'Null'
        }
      },
      VersionedMultiLocation: {
        _enum: {
          V0: 'MultiLocation'
        }
      },
      AssetInstance: {
        _enum: {
          Undefined: 'Null',
          Index8: 'u8',
          Index16: 'Compact<u16>',
          Index32: 'Compact<u32>',
          Index64: 'Compact<u64>',
          Index128: 'Compact<u128>',
          Array4: '[u8; 4]',
          Array8: '[u8; 8]',
          Array16: '[u8; 16]',
          Array32: '[u8; 32]',
          Blob: 'Vec<u8>'
        }
      },
      AbstractFungible: {
        id: 'Vec<u8>',
        instance: 'Compact<u128>'
      },
      AbstractNonFungible: {
        class: 'Vec<u8>',
        instance: 'AssetInstance'
      },
      ConcreteFungible: {
        id: 'MultiLocation',
        amount: 'Compact<u128>'
      },
      ConcreteNonFungible: {
        class: 'MultiLocation',
        instance: 'AssetInstance'
      },
      MultiAsset: {
        _enum: {
          None: 'Null',
          All: 'Null',
          AllFungible: 'Null',
          AllNonFungible: 'Null',
          AllAbstractFungible: 'Vec<u8>',
          AllAbstractNonFungible: 'Vec<u8>',
          AllConcreteFungible: 'MultiLocation',
          AllConcreteNonFungible: 'MultiLocation',
          AbstractFungible: 'AbstractFungible',
          AbstractNonFungible: 'AbstractNonFungible',
          ConcreteFungible: 'ConcreteFungible',
          ConcreteNonFungible: 'ConcreteNonFungible'
        }
      },
      VersionedMultiAsset: {
        _enum: {
          V0: 'MultiAsset'
        }
      },
      DepositAsset: {
        assets: 'Vec<MultiAsset>',
        dest: 'MultiLocation'
      },
      DepositReserveAsset: {
        assets: 'Vec<MultiAsset>',
        dest: 'MultiLocation',
        effects: 'Vec<Order>'
      },
      ExchangeAsset: {
        give: 'Vec<MultiAsset>',
        receive: 'Vec<MultiAsset>'
      },
      InitiateReserveWithdraw: {
        assets: 'Vec<MultiAsset>',
        reserve: 'MultiLocation',
        effects: 'Vec<Order>'
      },
      InitiateTeleport: {
        assets: 'Vec<MultiAsset>',
        dest: 'MultiLocation',
        effects: 'Vec<Order>'
      },
      QueryHolding: {
        queryId: 'Compact<u64>',
        dest: 'MultiLocation',
        assets: 'Vec<MultiAsset>'
      },
      Order: {
        _enum: {
          Null: 'Null',
          DepositAsset: 'DepositAsset',
          DepositReserveAsset: 'DepositReserveAsset',
          ExchangeAsset: 'ExchangeAsset',
          InitiateReserveWithdraw: 'InitiateReserveWithdraw',
          InitiateTeleport: 'InitiateTeleport',
          QueryHolding: 'QueryHolding'
        }
      },
      MessagingStateSnapshot: {
        relayDispatchQueueSize: '(u32, u32)',
        egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'
      },
      MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',
      SystemInherentData: 'ParachainInherentData',
      VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'
    })
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$d = {
    rpc: {},
    types: {
      Approvals: '[bool; 4]'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$c = {
    rpc: {},
    types: {
      AccountStatus: {
        validity: 'AccountValidity',
        freeBalance: 'Balance',
        lockedBalance: 'Balance',
        signature: 'Vec<u8>',
        vat: 'Permill'
      },
      AccountValidity: {
        _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
      }
    }
  };

  function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$n(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const layout = {
    ContractCryptoHasher: {
      _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
    },
    ContractDiscriminant: 'u32',
    ContractLayoutArray: {
      offset: 'ContractLayoutKey',
      len: 'u32',
      cellsPerElem: 'u64',
      layout: 'ContractStorageLayout'
    },
    ContractLayoutCell: {
      key: 'ContractLayoutKey',
      ty: 'SiLookupTypeId'
    },
    ContractLayoutEnum: {
      dispatchKey: 'ContractLayoutKey',
      variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
    },
    ContractLayoutHash: {
      offset: 'ContractLayoutKey',
      strategy: 'ContractLayoutHashingStrategy',
      layout: 'ContractStorageLayout'
    },
    ContractLayoutHashingStrategy: {
      hasher: 'ContractCryptoHasher',
      postfix: 'Vec<u8>',
      prefix: 'Vec<u8>'
    },
    ContractLayoutKey: '[u8; 32]',
    ContractLayoutStruct: {
      fields: 'Vec<ContractLayoutStructField>'
    },
    ContractLayoutStructField: {
      layout: 'ContractStorageLayout',
      name: 'Text'
    },
    ContractStorageLayout: {
      _enum: {
        Cell: 'ContractLayoutCell',
        Hash: 'ContractLayoutHash',
        Array: 'ContractLayoutArray',
        Struct: 'ContractLayoutStruct',
        Enum: 'ContractLayoutEnum'
      }
    }
  };
  const spec = {
    ContractConstructorSpec: {
      name: 'Text',
      selector: 'ContractSelector',
      args: 'Vec<ContractMessageParamSpec>',
      docs: 'Vec<Text>'
    },
    ContractContractSpec: {
      constructors: 'Vec<ContractConstructorSpec>',
      messages: 'Vec<ContractMessageSpec>',
      events: 'Vec<ContractEventSpec>',
      docs: 'Vec<Text>'
    },
    ContractDisplayName: 'SiPath',
    ContractEventParamSpec: {
      name: 'Text',
      indexed: 'bool',
      type: 'ContractTypeSpec',
      docs: 'Vec<Text>'
    },
    ContractEventSpec: {
      name: 'Text',
      args: 'Vec<ContractEventParamSpec>',
      docs: 'Vec<Text>'
    },
    ContractMessageParamSpec: {
      name: 'Text',
      type: 'ContractTypeSpec'
    },
    ContractMessageSpec: {
      name: 'Text',
      selector: 'ContractSelector',
      mutates: 'bool',
      payable: 'bool',
      args: 'Vec<ContractMessageParamSpec>',
      returnType: 'Option<ContractTypeSpec>',
      docs: 'Vec<Text>'
    },
    ContractSelector: '[u8; 4]',
    ContractTypeSpec: {
      type: 'SiLookupTypeId',
      displayName: 'ContractDisplayName'
    }
  };
  var definitions$b = {
    rpc: {},
    types: _objectSpread$n(_objectSpread$n(_objectSpread$n({}, layout), spec), {}, {
      ContractProject: {
        // added by ABI serialization
        metadataVersion: 'Text',
        source: 'ContractProjectSource',
        contract: 'ContractProjectContract',
        // expanded scale registry: RegistryReadOnly
        types: 'Vec<SiType>',
        // renamed from layout (ignored for now, incomplete)
        // storage: 'ContractStorageLayout',
        spec: 'ContractContractSpec'
      },
      ContractProjectContract: {
        name: 'Text',
        version: 'Text',
        authors: 'Vec<Text>',
        description: 'Option<Text>',
        documentation: 'Option<Text>',
        repository: 'Option<Text>',
        homepage: 'Option<Text>',
        license: 'Option<Text>'
      },
      ContractProjectSource: {
        hash: '[u8; 32]',
        language: 'Text',
        compiler: 'Text',
        wasm: 'Raw'
      }
    })
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$a = {
    rpc: {},
    types: {
      SiField: {
        name: 'Option<Text>',
        type: 'SiLookupTypeId'
      },
      SiLookupTypeId: 'u32',
      SiPath: 'Vec<Text>',
      SiType: {
        path: 'SiPath',
        params: 'Vec<SiLookupTypeId>',
        def: 'SiTypeDef'
      },
      SiTypeDef: {
        _enum: {
          Composite: 'SiTypeDefComposite',
          Variant: 'SiTypeDefVariant',
          Sequence: 'SiTypeDefSequence',
          Array: 'SiTypeDefArray',
          Tuple: 'SiTypeDefTuple',
          Primitive: 'SiTypeDefPrimitive'
        }
      },
      SiTypeDefArray: {
        len: 'u16',
        type: 'SiLookupTypeId'
      },
      SiTypeDefComposite: {
        fields: 'Vec<SiField>'
      },
      SiTypeDefVariant: {
        variants: 'Vec<SiVariant>'
      },
      SiTypeDefPrimitive: {
        _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
      },
      SiTypeDefSequence: {
        type: 'SiLookupTypeId'
      },
      SiTypeDefTuple: 'Vec<SiLookupTypeId>',
      SiVariant: {
        name: 'Text',
        fields: 'Vec<SiField>',
        discriminant: 'Option<u64>'
      }
    }
  };

  function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$m(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // As per frontier
  // We use aliasSection here to override since these are in another namespace
  const netRpc = {
    listening: {
      aliasSection: 'net',
      description: 'Returns true if client is actively listening for network connections. Otherwise false.',
      params: [],
      type: 'bool'
    },
    peerCount: {
      aliasSection: 'net',
      description: 'Returns number of peers connected to node.',
      params: [],
      type: 'String'
    },
    version: {
      aliasSection: 'net',
      description: 'Returns protocol version.',
      params: [],
      type: 'String'
    }
  };
  const web3Rpc = {
    clientVersion: {
      aliasSection: 'web3',
      description: 'Returns current client version.',
      params: [],
      type: 'String'
    },
    sha3: {
      aliasSection: 'web3',
      description: 'Returns sha3 of the given data',
      params: [{
        name: 'data',
        type: 'Bytes'
      }],
      type: 'H256'
    }
  };
  const rpc = _objectSpread$m(_objectSpread$m(_objectSpread$m({}, netRpc), web3Rpc), {}, {
    accounts: {
      description: 'Returns accounts list.',
      params: [],
      type: 'Vec<H160>'
    },
    blockNumber: {
      description: 'Returns balance of the given account.',
      params: [],
      type: 'U256'
    },
    call: {
      description: 'Call contract, returning the output data.',
      params: [{
        name: 'request',
        type: 'EthCallRequest'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'Bytes'
    },
    chainId: {
      description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
      params: [],
      type: 'U64'
    },
    coinbase: {
      description: 'Returns block author.',
      params: [],
      type: 'H160'
    },
    estimateGas: {
      description: 'Estimate gas needed for execution of given contract.',
      params: [{
        name: 'request',
        type: 'EthCallRequest'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    gasPrice: {
      description: 'Returns current gas price.',
      params: [],
      type: 'U256'
    },
    getBalance: {
      description: 'Returns balance of the given account.',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getBlockByHash: {
      description: 'Returns block with given hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        name: 'full',
        type: 'bool'
      }],
      type: 'Option<EthRichBlock>'
    },
    getBlockByNumber: {
      description: 'Returns block with given number.',
      params: [{
        name: 'block',
        type: 'BlockNumber'
      }, {
        name: 'full',
        type: 'bool'
      }],
      type: 'Option<EthRichBlock>'
    },
    getBlockTransactionCountByHash: {
      description: 'Returns the number of transactions in a block with given hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'U256'
    },
    getBlockTransactionCountByNumber: {
      description: 'Returns the number of transactions in a block with given block number.',
      params: [{
        name: 'block',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getCode: {
      description: 'Returns the code at given address at given time (block number).',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'Bytes'
    },
    getFilterChanges: {
      description: 'Returns filter changes since last poll.',
      params: [{
        name: 'index',
        type: 'U256'
      }],
      type: 'EthFilterChanges'
    },
    getFilterLogs: {
      description: 'Returns all logs matching given filter (in a range \'from\' - \'to\').',
      params: [{
        name: 'index',
        type: 'U256'
      }],
      type: 'Vec<EthLog>'
    },
    getLogs: {
      description: 'Returns logs matching given filter object.',
      params: [{
        name: 'filter',
        type: 'EthFilter'
      }],
      type: 'Vec<EthLog>'
    },
    getProof: {
      description: 'Returns proof for account and storage.',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        name: 'storageKeys',
        type: 'Vec<H256>'
      }, {
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'EthAccount'
    },
    getStorageAt: {
      description: 'Returns content of the storage at given address.',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        name: 'index',
        type: 'U256'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'H256'
    },
    getTransactionByBlockHashAndIndex: {
      description: 'Returns transaction at given block hash and index.',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthTransaction'
    },
    getTransactionByBlockNumberAndIndex: {
      description: 'Returns transaction by given block number and index.',
      params: [{
        name: 'number',
        type: 'BlockNumber'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthTransaction'
    },
    getTransactionByHash: {
      description: 'Get transaction by its hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'EthTransaction'
    },
    getTransactionCount: {
      description: 'Returns the number of transactions sent from given address at given time (block number).',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getTransactionReceipt: {
      description: 'Returns transaction receipt by transaction hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'EthReceipt'
    },
    getUncleByBlockHashAndIndex: {
      description: 'Returns an uncles at given block and index.',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthRichBlock'
    },
    getUncleByBlockNumberAndIndex: {
      description: 'Returns an uncles at given block and index.',
      params: [{
        name: 'number',
        type: 'BlockNumber'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthRichBlock'
    },
    getUncleCountByBlockHash: {
      description: 'Returns the number of uncles in a block with given hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'U256'
    },
    getUncleCountByBlockNumber: {
      description: 'Returns the number of uncles in a block with given block number.',
      params: [{
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getWork: {
      description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
      params: [],
      type: 'EthWork'
    },
    hashrate: {
      description: 'Returns the number of hashes per second that the node is mining with.',
      params: [],
      type: 'U256'
    },
    mining: {
      description: 'Returns true if client is actively mining new blocks.',
      params: [],
      type: 'bool'
    },
    newBlockFilter: {
      description: 'Returns id of new block filter.',
      params: [],
      type: 'U256'
    },
    newFilter: {
      description: 'Returns id of new filter.',
      params: [{
        name: 'filter',
        type: 'EthFilter'
      }],
      type: 'U256'
    },
    newPendingTransactionFilter: {
      description: 'Returns id of new block filter.',
      params: [],
      type: 'U256'
    },
    protocolVersion: {
      description: 'Returns protocol version encoded as a string (quotes are necessary).',
      params: [],
      type: 'u64'
    },
    sendRawTransaction: {
      description: 'Sends signed transaction, returning its hash.',
      params: [{
        name: 'bytes',
        type: 'Bytes'
      }],
      type: 'H256'
    },
    sendTransaction: {
      description: 'Sends transaction; will block waiting for signer to return the transaction hash',
      params: [{
        name: 'tx',
        type: 'EthTransactionRequest'
      }],
      type: 'H256'
    },
    submitHashrate: {
      description: 'Used for submitting mining hashrate.',
      params: [{
        name: 'index',
        type: 'U256'
      }, {
        name: 'hash',
        type: 'H256'
      }],
      type: 'bool'
    },
    submitWork: {
      description: 'Used for submitting a proof-of-work solution.',
      params: [{
        name: 'nonce',
        type: 'H64'
      }, {
        name: 'headerHash',
        type: 'H256'
      }, {
        name: 'mixDigest',
        type: 'H256'
      }],
      type: 'bool'
    },
    subscribe: {
      description: 'Subscribe to Eth subscription.',
      params: [{
        name: 'kind',
        type: 'EthSubKind'
      }, {
        isOptional: true,
        name: 'params',
        type: 'EthSubParams'
      }],
      pubsub: ['subscription', 'subscribe', 'unsubscribe'],
      type: 'Null'
    },
    syncing: {
      description: 'Returns an object with data about the sync status or false.',
      params: [],
      type: 'EthSyncStatus'
    },
    uninstallFilter: {
      description: 'Uninstalls filter.',
      params: [{
        name: 'index',
        type: 'U256'
      }],
      type: 'bool'
    }
  });

  // Copyright 2017-2021 @polkadot/types authors & contributors
  const types = {
    EthereumAccountId: 'GenericEthereumAccountId',
    EthereumLookupSource: 'GenericEthereumLookupSource',
    EthereumSignature: '[u8; 65]',
    EthAccount: {
      address: 'H160',
      balance: 'U256',
      nonce: 'U256',
      codeHash: 'H256',
      storageHash: 'H256',
      accountProof: 'Vec<Bytes>',
      storageProof: 'Vec<EthStorageProof>'
    },
    EthBlock: {
      _alias: {
        blockHash: 'hash',
        blockSize: 'size'
      },
      blockHash: 'Option<H256>',
      parentHash: 'H256',
      sha3Uncles: 'H256',
      author: 'H160',
      miner: 'H160',
      stateRoot: 'H256',
      transactionsRoot: 'H256',
      receiptsRoot: 'H256',
      number: 'Option<U256>',
      gasUsed: 'U256',
      gasLimit: 'U256',
      extraData: 'Bytes',
      logsBloom: 'H2048',
      timestamp: 'U256',
      difficulty: 'U256',
      totalDifficulty: 'Option<U256>',
      sealFields: 'Vec<Bytes>',
      uncles: 'Vec<H256>',
      transactions: 'Vec<EthTransaction>',
      blockSize: 'Option<U256>'
    },
    EthBloom: 'H2048',
    EthCallRequest: {
      from: 'Option<H160>',
      to: 'Option<H160>',
      gasPrice: 'Option<U256>',
      gas: 'Option<U256>',
      value: 'Option<U256>',
      data: 'Option<Bytes>',
      nonce: 'Option<U256>'
    },
    EthFilter: {
      fromBlock: 'Option<BlockNumber>',
      toBlock: 'Option<BlockNumber>',
      blockHash: 'Option<H256>',
      address: 'Option<EthFilterAddress>',
      topics: 'Option<EthFilterTopic>'
    },
    EthFilterAddress: {
      _enum: {
        Single: 'H160',
        Multiple: 'Vec<H160>',
        Null: 'Null'
      }
    },
    EthFilterChanges: {
      _enum: {
        Logs: 'Vec<EthLog>',
        Hashes: 'Vec<H256>',
        Empty: 'Null'
      }
    },
    EthFilterTopic: {
      _enum: {
        Single: 'EthFilterTopicInner',
        Multiple: 'Vec<EthFilterTopicInner>',
        Null: 'Null'
      }
    },
    EthFilterTopicEntry: 'Option<H256>',
    EthFilterTopicInner: {
      _enum: {
        Single: 'EthFilterTopicEntry',
        Multiple: 'Vec<EthFilterTopicEntry>',
        Null: 'Null'
      }
    },
    EthHeader: {
      _alias: {
        blockHash: 'hash',
        blockSize: 'size'
      },
      blockHash: 'Option<H256>',
      parentHash: 'H256',
      sha3Uncles: 'H256',
      author: 'H160',
      miner: 'H160',
      stateRoot: 'H256',
      transactionsRoot: 'H256',
      receiptsRoot: 'H256',
      number: 'Option<U256>',
      gasUsed: 'U256',
      gasLimit: 'U256',
      extraData: 'Bytes',
      logsBloom: 'H2048',
      timestamp: 'U256',
      difficulty: 'U256',
      sealFields: 'Vec<Bytes>',
      blockSize: 'Option<U256>'
    },
    EthLog: {
      address: 'H160',
      topics: 'Vec<H256>',
      data: 'Bytes',
      blockHash: 'Option<H256>',
      blockNumber: 'Option<U256>',
      transactionHash: 'Option<H256>',
      transactionIndex: 'Option<U256>',
      logIndex: 'Option<U256>',
      transactionLogIndex: 'Option<U256>',
      removed: 'bool'
    },
    EthReceipt: {
      transactionHash: 'Option<H256>',
      transactionIndex: 'Option<U256>',
      blockHash: 'Option<H256>',
      from: 'Option<H160>',
      to: 'Option<H160>',
      blockNumber: 'Option<U256>',
      cumulativeGasUsed: 'U256',
      gasUsed: 'Option<U256>',
      contractAddress: 'Option<H160>',
      logs: 'Vec<EthLog>',
      root: 'Option<H256>',
      logsBloom: 'H2048',
      statusCode: 'Option<U64>'
    },
    EthRichBlock: 'EthBlock',
    EthRichHeader: 'EthHeader',
    EthStorageProof: {
      key: 'U256',
      value: 'U256',
      proof: 'Vec<Bytes>'
    },
    EthSubKind: {
      _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
    },
    EthSubParams: {
      _enum: {
        None: 'Null',
        Logs: 'EthFilter'
      }
    },
    EthSubResult: {
      _enum: {
        Header: 'EthRichHeader',
        Log: 'EthLog',
        TransactionHash: 'H256',
        SyncState: 'EthSyncStatus'
      }
    },
    EthSyncInfo: {
      startingBlock: 'U256',
      currentBlock: 'U256',
      highestBlock: 'U256',
      warpChunksAmount: 'Option<U256>',
      warpChunksProcessed: 'Option<U256>'
    },
    EthSyncStatus: {
      _enum: {
        Info: 'EthSyncInfo',
        None: 'Null'
      }
    },
    EthTransaction: {
      nonce: 'U256',
      gasPrice: 'U256',
      gasLimit: 'U256',
      action: 'EthTransactionAction',
      value: 'U256',
      input: 'Bytes',
      // TransactionSignature (embedded)
      v: 'u64',
      r: 'H256',
      s: 'H256'
    },
    // as per the RPC definition
    // TODO: Check these, re-add
    // EthTransaction: {
    //   // hash in Rust
    //   transactionHash: 'H256',
    //   nonce: 'U256',
    //   blockHash: 'Option<H256>',
    //   blockNumber: 'Option<U256>',
    //   transactionIndex: 'Option<U256>',
    //   from: 'H160',
    //   to: 'Option<H160>',
    //   value: 'U256',
    //   gasPrice: 'U256',
    //   gas: 'U256',
    //   input: 'Bytes',
    //   creates: 'Option<H160>',
    //   raw: 'Bytes',
    //   publicKey: 'Option<H512>',
    //   chainId: 'Option<U64>',
    //   standardV: 'U256',
    //   v: 'U256',
    //   r: 'U256',
    //   s: 'U256'
    // },
    EthTransactionAction: {
      _enum: {
        Call: 'H160',
        Create: 'Null'
      }
    },
    EthTransactionCondition: {
      _enum: {
        block: 'u64',
        time: 'u64'
      }
    },
    EthTransactionRequest: {
      from: 'Option<H160>',
      to: 'Option<H160>',
      gasPrice: 'Option<U256>',
      gas: 'Option<U256>',
      value: 'Option<U256>',
      data: 'Option<Bytes>',
      nonce: 'Option<U256>'
    },
    EthTransactionStatus: {
      transactionHash: 'H256',
      transactionIndex: 'u32',
      from: 'H160',
      to: 'Option<H160>',
      contractAddress: 'Option<H160>',
      logs: 'Vec<EthLog>',
      logsBloom: 'EthBloom'
    },
    EthWork: {
      powHash: 'H256',
      seedHash: 'H256',
      target: 'H256',
      number: 'Option<u64>'
    }
  };
  var definitions$9 = {
    rpc,
    types
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const AllHashers = {
    Blake2_128: null,
    // eslint-disable-line camelcase
    Blake2_256: null,
    // eslint-disable-line camelcase
    Blake2_128Concat: null,
    // eslint-disable-line camelcase
    Twox128: null,
    Twox256: null,
    Twox64Concat: null,
    // new in v11
    Identity: null
  };
  var definitions$8 = {
    rpc: {},
    types: {
      // v9
      DoubleMapTypeV9: {
        hasher: 'StorageHasherV9',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV9'
      },
      ErrorMetadataV9: {
        name: 'Text',
        documentation: 'Vec<Text>'
      },
      EventMetadataV9: {
        name: 'Text',
        args: 'Vec<Type>',
        documentation: 'Vec<Text>'
      },
      FunctionArgumentMetadataV9: {
        name: 'Text',
        type: 'Type'
      },
      FunctionMetadataV9: {
        name: 'Text',
        args: 'Vec<FunctionArgumentMetadataV9>',
        documentation: 'Vec<Text>'
      },
      MapTypeV9: {
        hasher: 'StorageHasherV9',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      MetadataV9: {
        modules: 'Vec<ModuleMetadataV9>'
      },
      ModuleConstantMetadataV9: {
        name: 'Text',
        type: 'Type',
        value: 'Bytes',
        documentation: 'Vec<Text>'
      },
      ModuleMetadataV9: {
        name: 'Text',
        storage: 'Option<StorageMetadataV9>',
        calls: 'Option<Vec<FunctionMetadataV9>>',
        events: 'Option<Vec<EventMetadataV9>>',
        constants: 'Vec<ModuleConstantMetadataV9>',
        errors: 'Vec<ErrorMetadataV9>'
      },
      StorageEntryMetadataV9: {
        name: 'Text',
        modifier: 'StorageEntryModifierV9',
        type: 'StorageEntryTypeV9',
        fallback: 'Bytes',
        documentation: 'Vec<Text>'
      },
      StorageEntryModifierV9: {
        _enum: ['Optional', 'Default', 'Required']
      },
      StorageEntryTypeV9: {
        _enum: {
          Plain: 'Type',
          Map: 'MapTypeV9',
          DoubleMap: 'DoubleMapTypeV9'
        }
      },
      StorageHasherV9: {
        _enum: {
          Blake2_128: null,
          // eslint-disable-line camelcase
          Blake2_256: null,
          // eslint-disable-line camelcase
          Twox128: null,
          Twox256: null,
          Twox64Concat: null
        }
      },
      StorageMetadataV9: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV9>'
      },
      // v10
      DoubleMapTypeV10: {
        hasher: 'StorageHasherV10',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV10'
      },
      ErrorMetadataV10: 'ErrorMetadataV9',
      EventMetadataV10: 'EventMetadataV9',
      FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
      FunctionMetadataV10: 'FunctionMetadataV9',
      MapTypeV10: {
        hasher: 'StorageHasherV10',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      MetadataV10: {
        modules: 'Vec<ModuleMetadataV10>'
      },
      ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
      ModuleMetadataV10: {
        name: 'Text',
        storage: 'Option<StorageMetadataV10>',
        calls: 'Option<Vec<FunctionMetadataV10>>',
        events: 'Option<Vec<EventMetadataV10>>',
        constants: 'Vec<ModuleConstantMetadataV10>',
        errors: 'Vec<ErrorMetadataV10>'
      },
      StorageEntryModifierV10: 'StorageEntryModifierV9',
      StorageEntryMetadataV10: {
        name: 'Text',
        modifier: 'StorageEntryModifierV10',
        type: 'StorageEntryTypeV10',
        fallback: 'Bytes',
        documentation: 'Vec<Text>'
      },
      StorageEntryTypeV10: {
        _enum: {
          Plain: 'Type',
          Map: 'MapTypeV10',
          DoubleMap: 'DoubleMapTypeV10'
        }
      },
      StorageMetadataV10: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV10>'
      },
      StorageHasherV10: {
        _enum: {
          Blake2_128: null,
          // eslint-disable-line camelcase
          Blake2_256: null,
          // eslint-disable-line camelcase
          Blake2_128Concat: null,
          // eslint-disable-line camelcase
          Twox128: null,
          Twox256: null,
          Twox64Concat: null
        }
      },
      // v11
      DoubleMapTypeV11: {
        hasher: 'StorageHasherV11',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV11'
      },
      ErrorMetadataV11: 'ErrorMetadataV10',
      EventMetadataV11: 'EventMetadataV10',
      ExtrinsicMetadataV11: {
        version: 'u8',
        signedExtensions: 'Vec<Text>'
      },
      FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
      FunctionMetadataV11: 'FunctionMetadataV10',
      MapTypeV11: {
        hasher: 'StorageHasherV11',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      MetadataV11: {
        modules: 'Vec<ModuleMetadataV11>',
        extrinsic: 'ExtrinsicMetadataV11'
      },
      ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
      ModuleMetadataV11: {
        name: 'Text',
        storage: 'Option<StorageMetadataV11>',
        calls: 'Option<Vec<FunctionMetadataV11>>',
        events: 'Option<Vec<EventMetadataV11>>',
        constants: 'Vec<ModuleConstantMetadataV11>',
        errors: 'Vec<ErrorMetadataV11>'
      },
      StorageEntryModifierV11: 'StorageEntryModifierV10',
      StorageEntryMetadataV11: {
        name: 'Text',
        modifier: 'StorageEntryModifierV11',
        type: 'StorageEntryTypeV11',
        fallback: 'Bytes',
        documentation: 'Vec<Text>'
      },
      StorageEntryTypeV11: {
        _enum: {
          Plain: 'Type',
          Map: 'MapTypeV11',
          DoubleMap: 'DoubleMapTypeV11'
        }
      },
      StorageMetadataV11: {
        prefix: 'Text',
        items: 'Vec<StorageEntryMetadataV11>'
      },
      StorageHasherV11: {
        _enum: AllHashers
      },
      // v12
      DoubleMapTypeV12: 'DoubleMapTypeV11',
      ErrorMetadataV12: 'ErrorMetadataV11',
      EventMetadataV12: 'EventMetadataV11',
      ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
      FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
      FunctionMetadataV12: 'FunctionMetadataV11',
      MapTypeV12: 'MapTypeV11',
      MetadataV12: {
        modules: 'Vec<ModuleMetadataV12>',
        extrinsic: 'ExtrinsicMetadataV12'
      },
      ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
      ModuleMetadataV12: {
        name: 'Text',
        storage: 'Option<StorageMetadataV12>',
        calls: 'Option<Vec<FunctionMetadataV12>>',
        events: 'Option<Vec<EventMetadataV12>>',
        constants: 'Vec<ModuleConstantMetadataV12>',
        errors: 'Vec<ErrorMetadataV12>',
        index: 'u8'
      },
      StorageEntryModifierV12: 'StorageEntryModifierV11',
      StorageEntryMetadataV12: 'StorageEntryMetadataV11',
      StorageEntryTypeV12: 'StorageEntryTypeV11',
      StorageMetadataV12: 'StorageMetadataV11',
      StorageHasherV12: 'StorageHasherV11',
      // This always maps to the latest
      DoubleMapTypeLatest: 'DoubleMapTypeV12',
      ErrorMetadataLatest: 'ErrorMetadataV12',
      EventMetadataLatest: 'EventMetadataV12',
      ExtrinsicMetadataLatest: 'ExtrinsicMetadataV12',
      FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV12',
      FunctionMetadataLatest: 'FunctionMetadataV12',
      MapTypeLatest: 'MapTypeV12',
      MetadataLatest: 'MetadataV12',
      ModuleConstantMetadataLatest: 'ModuleConstantMetadataV12',
      ModuleMetadataLatest: 'ModuleMetadataV12',
      StorageEntryMetadataLatest: 'StorageEntryMetadataV12',
      StorageEntryModifierLatest: 'StorageEntryModifierV12',
      StorageEntryTypeLatest: 'StorageEntryTypeV12',
      StorageMetadataLatest: 'StorageMetadataV12',
      StorageHasher: 'StorageHasherV12',
      // the enum containing all the mappings
      MetadataAll: {
        _enum: {
          V0: 'DoNotConstruct<MetadataV0>',
          V1: 'DoNotConstruct<MetadataV1>',
          V2: 'DoNotConstruct<MetadataV2>',
          V3: 'DoNotConstruct<MetadataV3>',
          V4: 'DoNotConstruct<MetadataV4>',
          V5: 'DoNotConstruct<MetadataV5>',
          V6: 'DoNotConstruct<MetadataV6>',
          V7: 'DoNotConstruct<MetadataV7>',
          V8: 'DoNotConstruct<MetadataV8>',
          // First version on Kusama in V9, dropping will be problematic
          V9: 'MetadataV9',
          V10: 'MetadataV10',
          V11: 'MetadataV11',
          V12: 'MetadataV12'
        }
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$7 = {
    rpc: {
      methods: {
        description: 'Retrieves the list of RPC methods that are exposed by the node',
        params: [],
        type: 'RpcMethods'
      }
    },
    types: {
      RpcMethods: {
        version: 'u32',
        methods: 'Vec<Text>'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$6 = {
    rpc: {
      hasKey: {
        description: 'Returns true if the keystore has private keys for the given public key and key type.',
        params: [{
          name: 'publicKey',
          type: 'Bytes'
        }, {
          name: 'keyType',
          type: 'Text'
        }],
        type: 'bool'
      },
      hasSessionKeys: {
        description: 'Returns true if the keystore has private keys for the given session public keys.',
        params: [{
          name: 'sessionKeys',
          type: 'Bytes'
        }],
        type: 'bool'
      },
      removeExtrinsic: {
        description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
        params: [{
          name: 'bytesOrHash',
          type: 'Vec<ExtrinsicOrHash>'
        }],
        type: 'Vec<Hash>'
      },
      insertKey: {
        description: 'Insert a key into the keystore.',
        params: [{
          name: 'keyType',
          type: 'Text'
        }, {
          name: 'suri',
          type: 'Text'
        }, {
          name: 'publicKey',
          type: 'Bytes'
        }],
        type: 'Bytes'
      },
      rotateKeys: {
        description: 'Generate new session keys and returns the corresponding public keys',
        params: [],
        type: 'Bytes'
      },
      pendingExtrinsics: {
        description: 'Returns all pending extrinsics, potentially grouped by sender',
        params: [],
        type: 'Vec<Extrinsic>'
      },
      submitExtrinsic: {
        isSigned: true,
        description: 'Submit a fully formatted extrinsic for block inclusion',
        params: [{
          name: 'extrinsic',
          type: 'Extrinsic'
        }],
        type: 'Hash'
      },
      submitAndWatchExtrinsic: {
        description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
        isSigned: true,
        params: [{
          name: 'extrinsic',
          type: 'Extrinsic'
        }],
        pubsub: ['extrinsicUpdate', 'submitAndWatchExtrinsic', 'unwatchExtrinsic'],
        type: 'ExtrinsicStatus'
      }
    },
    types: {
      ExtrinsicOrHash: {
        _enum: {
          Hash: 'Hash',
          Extrinsic: 'Bytes'
        }
      },
      ExtrinsicStatus: {
        _enum: {
          Future: 'Null',
          Ready: 'Null',
          Broadcast: 'Vec<Text>',
          InBlock: 'Hash',
          Retracted: 'Hash',
          FinalityTimeout: 'Hash',
          Finalized: 'Hash',
          Usurped: 'Hash',
          Dropped: 'Null',
          Invalid: 'Null'
        }
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$5 = {
    rpc: {
      getHeader: {
        alias: ['chain_getHead'],
        description: 'Retrieves the header for a specific block',
        params: [{
          name: 'hash',
          type: 'BlockHash',
          isCached: true,
          isOptional: true
        }],
        type: 'Header'
      },
      getBlock: {
        description: 'Get header and body of a relay chain block',
        params: [{
          name: 'hash',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'SignedBlock'
      },
      getBlockHash: {
        description: 'Get the block hash for a specific block',
        params: [{
          name: 'blockNumber',
          type: 'BlockNumber',
          isOptional: true
        }],
        type: 'BlockHash'
      },
      getFinalizedHead: {
        alias: ['chain_getFinalisedHead'],
        description: 'Get hash of the last finalized block in the canon chain',
        params: [],
        type: 'BlockHash'
      },
      subscribeNewHeads: {
        alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
        description: 'Retrieves the best header via subscription',
        params: [],
        // NOTE These still has the aliassed version, compatible with 1.x
        pubsub: ['newHead', 'subscribeNewHead', 'unsubscribeNewHead'],
        type: 'Header'
      },
      subscribeFinalizedHeads: {
        alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
        description: 'Retrieves the best finalized header via subscription',
        params: [],
        pubsub: ['finalizedHead', 'subscribeFinalizedHeads', 'unsubscribeFinalizedHeads'],
        type: 'Header'
      },
      subscribeAllHeads: {
        description: 'Retrieves the newest header via subscription',
        params: [],
        pubsub: ['allHead', 'subscribeAllHeads', 'unsubscribeAllHeads'],
        type: 'Header'
      }
    },
    types: {
      BlockHash: 'Hash'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$4 = {
    rpc: {
      getKeys: {
        description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'prefix',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getStorage: {
        description: 'Returns a child storage entry at a specific block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<StorageData>'
      },
      getStorageHash: {
        description: 'Returns the hash of a child storage entry at a block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<Hash>'
      },
      getStorageSize: {
        description: 'Returns the size of a child storage entry at a block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<u64>'
      }
    },
    types: {
      // StorageKey extends Bytes
      PrefixedStorageKey: 'StorageKey'
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$3 = {
    rpc: {
      localStorageSet: {
        description: 'Set offchain local storage under given key and prefix',
        params: [{
          name: 'kind',
          type: 'StorageKind'
        }, {
          name: 'key',
          type: 'Bytes'
        }, {
          name: 'value',
          type: 'Bytes'
        }],
        type: 'Null'
      },
      localStorageGet: {
        description: 'Get offchain local storage under given key and prefix',
        params: [{
          name: 'kind',
          type: 'StorageKind'
        }, {
          name: 'key',
          type: 'Bytes'
        }],
        type: 'Option<Bytes>'
      }
    },
    types: {
      StorageKind: {
        _enum: {
          PERSISTENT: 1,
          LOCAL: 2
        }
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const QUERY_PARAMS = [{
    name: 'extrinsic',
    type: 'Bytes'
  }, {
    name: 'at',
    type: 'BlockHash',
    isHistoric: true,
    isOptional: true
  }];
  var definitions$2 = {
    rpc: {
      queryInfo: {
        description: 'Retrieves the fee information for an encoded extrinsic',
        params: QUERY_PARAMS,
        type: 'RuntimeDispatchInfo'
      },
      queryFeeDetails: {
        description: 'Query the detailed fee of a given encoded extrinsic',
        params: QUERY_PARAMS,
        type: 'FeeDetails'
      }
    },
    types: {
      FeeDetails: {
        inclusionFee: 'Option<InclusionFee>' // skipped in serde
        // tip: 'Balance'

      },
      InclusionFee: {
        baseFee: 'Balance',
        lenFee: 'Balance',
        adjustedWeightFee: 'Balance'
      },
      RuntimeDispatchInfo: {
        weight: 'Weight',
        class: 'DispatchClass',
        partialFee: 'Balance'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$1 = {
    rpc: {
      call: {
        alias: ['state_callAt'],
        description: 'Perform a call to a builtin on the chain',
        params: [{
          name: 'method',
          type: 'Text'
        }, {
          name: 'data',
          type: 'Bytes'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Bytes'
      },
      getKeys: {
        description: 'Retrieves the keys with a certain prefix',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getPairs: {
        description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
        params: [{
          name: 'prefix',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<KeyValue>'
      },
      getKeysPaged: {
        alias: ['state_getKeysPagedAt'],
        description: 'Returns the keys with prefix with pagination support.',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'count',
          type: 'u32'
        }, {
          name: 'startKey',
          type: 'StorageKey',
          isOptional: true
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getStorage: {
        alias: ['state_getStorageAt'],
        description: 'Retrieves the storage for a key',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'StorageData'
      },
      getStorageHash: {
        alias: ['state_getStorageHashAt'],
        description: 'Retrieves the storage hash',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Hash'
      },
      getStorageSize: {
        alias: ['state_getStorageSizeAt'],
        description: 'Retrieves the storage size',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'u64'
      },
      getChildKeys: {
        description: 'Retrieves the keys with prefix of a specific child storage',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getChildStorage: {
        description: 'Retrieves the child storage for a key',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'StorageData'
      },
      getChildStorageHash: {
        description: 'Retrieves the child storage hash',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Hash'
      },
      getChildStorageSize: {
        description: 'Retrieves the child storage size',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'u64'
      },
      getMetadata: {
        description: 'Returns the runtime metadata',
        params: [{
          name: 'at',
          type: 'BlockHash',
          isCached: true,
          isOptional: true
        }],
        type: 'Metadata'
      },
      getRuntimeVersion: {
        alias: ['chain_getRuntimeVersion'],
        description: 'Get the runtime version',
        params: [{
          name: 'at',
          type: 'BlockHash',
          isCached: true,
          isOptional: true
        }],
        type: 'RuntimeVersion'
      },
      queryStorage: {
        description: 'Query historical storage entries (by key) starting from a start block',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'fromBlock',
          type: 'Hash'
        }, {
          name: 'toBlock',
          type: 'BlockHash',
          isOptional: true
        }],
        type: 'Vec<StorageChangeSet>'
      },
      queryStorageAt: {
        description: 'Query storage entries (by key) starting at block hash given as the second parameter',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageChangeSet>'
      },
      getReadProof: {
        description: 'Returns proof of storage entries at a specific block state',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'ReadProof'
      },
      subscribeRuntimeVersion: {
        alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
        description: 'Retrieves the runtime version via subscription',
        params: [],
        pubsub: ['runtimeVersion', 'subscribeRuntimeVersion', 'unsubscribeRuntimeVersion'],
        type: 'RuntimeVersion'
      },
      subscribeStorage: {
        description: 'Subscribes to storage changes for the provided keys',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>',
          isOptional: true
        }],
        pubsub: ['storage', 'subscribeStorage', 'unsubscribeStorage'],
        type: 'StorageChangeSet'
      }
    },
    types: {
      ApiId: '[u8; 8]',
      KeyValueOption: '(StorageKey, Option<StorageData>)',
      ReadProof: {
        at: 'Hash',
        proof: 'Vec<Bytes>'
      },
      RuntimeVersionApi: '(ApiId, u32)',
      RuntimeVersion: {
        specName: 'Text',
        implName: 'Text',
        authoringVersion: 'u32',
        specVersion: 'u32',
        implVersion: 'u32',
        apis: 'Vec<RuntimeVersionApi>',
        transactionVersion: 'u32'
      },
      StorageChangeSet: {
        block: 'Hash',
        changes: 'Vec<KeyValueOption>'
      }
    }
  };

  // Copyright 2017-2021 @polkadot/types authors & contributors

  var definitions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    runtime: runtimeTypes,
    assets: definitions$O,
    authorship: definitions$N,
    aura: definitions$M,
    babe: definitions$L,
    balances: definitions$K,
    collective: definitions$J,
    consensus: definitions$I,
    contracts: definitions$H,
    democracy: definitions$G,
    elections: definitions$F,
    engine: definitions$E,
    evm: definitions$D,
    extrinsics: definitions$C,
    genericAsset: definitions$B,
    gilt: definitions$A,
    grandpa: definitions$z,
    identity: definitions$y,
    imOnline: definitions$x,
    lottery: definitions$w,
    offences: definitions$v,
    proxy: definitions$u,
    recovery: definitions$t,
    scheduler: definitions$s,
    session: definitions$r,
    society: definitions$q,
    staking: definitions$p,
    support: definitions$o,
    syncstate: definitions$n,
    system: definitions$m,
    treasury: definitions$l,
    txpayment: definitions$k,
    utility: definitions$j,
    vesting: definitions$i,
    attestations: definitions$h,
    claims: definitions$g,
    crowdloan: definitions$f,
    parachains: definitions$e,
    poll: definitions$d,
    purchase: definitions$c,
    contractsAbi: definitions$b,
    scaleInfo: definitions$a,
    eth: definitions$9,
    metadata: definitions$8,
    rpc: definitions$7,
    author: definitions$6,
    chain: definitions$5,
    childstate: definitions$4,
    offchain: definitions$3,
    payment: definitions$2,
    state: definitions$1
  });

  function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$l(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const l$6 = logger('registry'); // create error mapping from metadata

  function injectErrors(_, metadata, metadataErrors) {
    const modules = metadata.asLatest.modules; // decorate the errors

    modules.forEach((section, _sectionIndex) => {
      const sectionIndex = metadata.version >= 12 ? section.index.toNumber() : _sectionIndex;
      const sectionName = stringCamelCase(section.name);
      section.errors.forEach(({
        documentation,
        name
      }, index) => {
        const eventIndex = new Uint8Array([sectionIndex, index]);
        metadataErrors[u8aToHex(eventIndex)] = {
          documentation: documentation.map(d => d.toString()),
          index,
          method: name.toString(),
          name: name.toString(),
          section: sectionName
        };
      });
    });
  } // create event classes from metadata


  function injectEvents(registry, metadata, metadataEvents) {
    const modules = metadata.asLatest.modules; // decorate the events

    modules.filter(({
      events
    }) => events.isSome).forEach((section, _sectionIndex) => {
      const sectionIndex = metadata.version >= 12 ? section.index.toNumber() : _sectionIndex;
      const sectionName = stringCamelCase(section.name);
      section.events.unwrap().forEach((meta, methodIndex) => {
        const methodName = meta.name.toString();
        const eventIndex = new Uint8Array([sectionIndex, methodIndex]); // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access

        const typeDef = meta.args.map(arg => getTypeDef(arg));
        let Types = [];

        try {
          Types = typeDef.map(typeDef => getTypeClass(registry, typeDef));
        } catch (error) {
          l$6.error(error);
        }

        metadataEvents[u8aToHex(eventIndex)] = class extends GenericEventData {
          constructor(registry, value) {
            super(registry, value, Types, typeDef, meta, sectionName, methodName);
          }

        };
      });
    });
  } // create extrinsic mapping from metadata


  function injectExtrinsics(registry, metadata, metadataCalls) {
    const extrinsics = decorateExtrinsics(registry, metadata.asLatest, metadata.version); // decorate the extrinsics

    Object.values(extrinsics).forEach(methods => Object.values(methods).forEach(method => {
      metadataCalls[u8aToHex(method.callIndex)] = method;
    }));
  } // extract additional properties from the metadata


  function extractProperties(registry, metadata) {
    var _constants$system;

    const original = registry.getChainProperties();
    const constants = decorateConstants(registry, metadata.asLatest);
    const ss58Format = (_constants$system = constants.system) === null || _constants$system === void 0 ? void 0 : _constants$system.ss58Prefix;

    if (!ss58Format) {
      return original;
    }

    const {
      tokenDecimals,
      tokenSymbol
    } = original || {};
    return registry.createType('ChainProperties', {
      ss58Format,
      tokenDecimals,
      tokenSymbol
    });
  }

  var _classes = _classPrivateFieldKey("classes");

  var _definitions = _classPrivateFieldKey("definitions");

  var _metadataCalls = _classPrivateFieldKey("metadataCalls");

  var _metadataErrors = _classPrivateFieldKey("metadataErrors");

  var _metadataEvents = _classPrivateFieldKey("metadataEvents");

  var _unknownTypes = _classPrivateFieldKey("unknownTypes");

  var _chainProperties = _classPrivateFieldKey("chainProperties");

  var _hasher = _classPrivateFieldKey("hasher");

  var _knownDefaults = _classPrivateFieldKey("knownDefaults");

  var _knownDefinitions = _classPrivateFieldKey("knownDefinitions");

  var _knownTypes = _classPrivateFieldKey("knownTypes");

  var _signedExtensions = _classPrivateFieldKey("signedExtensions");

  var _userExtensions = _classPrivateFieldKey("userExtensions");

  class TypeRegistry {
    constructor() {
      Object.defineProperty(this, _classes, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _definitions, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _metadataCalls, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _metadataErrors, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _metadataEvents, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _unknownTypes, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _chainProperties, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _hasher, {
        writable: true,
        value: blake2AsU8a
      });
      Object.defineProperty(this, _knownDefaults, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _knownDefinitions, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _knownTypes, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _signedExtensions, {
        writable: true,
        value: defaultExtensions
      });
      Object.defineProperty(this, _userExtensions, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _knownDefaults)[_knownDefaults] = _objectSpread$l({
        Json,
        Metadata,
        Raw
      }, baseTypes);
      _classPrivateFieldBase(this, _knownDefinitions)[_knownDefinitions] = definitions;
      this.init();
    }

    init() {
      // start clean
      _classPrivateFieldBase(this, _classes)[_classes] = new Map();
      _classPrivateFieldBase(this, _definitions)[_definitions] = new Map();
      _classPrivateFieldBase(this, _unknownTypes)[_unknownTypes] = new Map();
      _classPrivateFieldBase(this, _knownTypes)[_knownTypes] = {}; // register know, first classes then on-demand-created definitions

      this.register(_classPrivateFieldBase(this, _knownDefaults)[_knownDefaults]);
      Object.values(_classPrivateFieldBase(this, _knownDefinitions)[_knownDefinitions]).forEach(({
        types
      }) => this.register(types));
      return this;
    }

    get chainDecimals() {
      var _classPrivateFieldLoo;

      if ((_classPrivateFieldLoo = _classPrivateFieldBase(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo !== void 0 && _classPrivateFieldLoo.tokenDecimals.isSome) {
        const allDecimals = _classPrivateFieldBase(this, _chainProperties)[_chainProperties].tokenDecimals.unwrap();

        if (allDecimals.length) {
          return allDecimals.map(b => b.toNumber());
        }
      }

      return [12];
    }

    get chainSS58() {
      var _classPrivateFieldLoo2;

      return (_classPrivateFieldLoo2 = _classPrivateFieldBase(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo2 !== void 0 && _classPrivateFieldLoo2.ss58Format.isSome ? _classPrivateFieldBase(this, _chainProperties)[_chainProperties].ss58Format.unwrap().toNumber() : undefined;
    }

    get chainTokens() {
      var _classPrivateFieldLoo3;

      if ((_classPrivateFieldLoo3 = _classPrivateFieldBase(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo3 !== void 0 && _classPrivateFieldLoo3.tokenSymbol.isSome) {
        const allTokens = _classPrivateFieldBase(this, _chainProperties)[_chainProperties].tokenSymbol.unwrap();

        if (allTokens.length) {
          return allTokens.map(s => s.toString());
        }
      }

      return [formatBalance.getDefaults().unit];
    }

    get knownTypes() {
      return _classPrivateFieldBase(this, _knownTypes)[_knownTypes];
    }

    get signedExtensions() {
      return _classPrivateFieldBase(this, _signedExtensions)[_signedExtensions];
    }
    /**
     * @describe Creates an instance of the class
     */


    createClass(type) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return createClass$1(this, type);
    }
    /**
     * @description Creates an instance of a type as registered
     */


    createType(type, ...params) {
      return createType(this, type, ...params);
    } // find a specific call


    findMetaCall(callIndex) {
      const hexIndex = u8aToHex(callIndex);
      return assertReturn(_classPrivateFieldBase(this, _metadataCalls)[_metadataCalls][hexIndex], `findMetaCall: Unable to find Call with index ${hexIndex}/[${callIndex.toString()}]`);
    } // finds an error


    findMetaError(errorIndex) {
      const hexIndex = u8aToHex(isU8a(errorIndex) ? errorIndex : new Uint8Array([errorIndex.index.toNumber(), errorIndex.error.toNumber()]));
      return assertReturn(_classPrivateFieldBase(this, _metadataErrors)[_metadataErrors][hexIndex], `findMetaError: Unable to find Error with index ${hexIndex}/[${errorIndex.toString()}]`);
    }

    findMetaEvent(eventIndex) {
      const hexIndex = u8aToHex(eventIndex);
      return assertReturn(_classPrivateFieldBase(this, _metadataEvents)[_metadataEvents][hexIndex], `findMetaEvent: Unable to find Event with index ${hexIndex}/[${eventIndex.toString()}]`);
    }

    get(name, withUnknown) {
      let Type = _classPrivateFieldBase(this, _classes)[_classes].get(name); // we have not already created the type, attempt it


      if (!Type) {
        const definition = _classPrivateFieldBase(this, _definitions)[_definitions].get(name);

        let BaseType; // we have a definition, so create the class now (lazily)

        if (definition) {
          BaseType = createClass$1(this, definition);
        } else if (withUnknown) {
          l$6.warn(`Unable to resolve type ${name}, it will fail on construction`);

          _classPrivateFieldBase(this, _unknownTypes)[_unknownTypes].set(name, true);

          BaseType = DoNotConstruct.with(name);
        }

        if (BaseType) {
          // NOTE If we didn't extend here, we would have strange artifacts. An example is
          // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
          // Additionally, we now pass through the registry, which is a link to ourselves
          Type = class extends BaseType {};

          _classPrivateFieldBase(this, _classes)[_classes].set(name, Type);
        }
      }

      return Type;
    }

    getChainProperties() {
      return _classPrivateFieldBase(this, _chainProperties)[_chainProperties];
    }

    getClassName(clazz) {
      const entry = [..._classPrivateFieldBase(this, _classes)[_classes].entries()].find(([, test]) => test === clazz);
      return entry ? entry[0] : undefined;
    }

    getDefinition(typeName) {
      return _classPrivateFieldBase(this, _definitions)[_definitions].get(typeName);
    }

    getModuleInstances(specName, moduleName) {
      var _classPrivateFieldLoo4, _classPrivateFieldLoo5, _classPrivateFieldLoo6, _classPrivateFieldLoo7, _classPrivateFieldLoo8;

      return (_classPrivateFieldLoo4 = _classPrivateFieldBase(this, _knownTypes)[_knownTypes]) === null || _classPrivateFieldLoo4 === void 0 ? void 0 : (_classPrivateFieldLoo5 = _classPrivateFieldLoo4.typesBundle) === null || _classPrivateFieldLoo5 === void 0 ? void 0 : (_classPrivateFieldLoo6 = _classPrivateFieldLoo5.spec) === null || _classPrivateFieldLoo6 === void 0 ? void 0 : (_classPrivateFieldLoo7 = _classPrivateFieldLoo6[specName]) === null || _classPrivateFieldLoo7 === void 0 ? void 0 : (_classPrivateFieldLoo8 = _classPrivateFieldLoo7.instances) === null || _classPrivateFieldLoo8 === void 0 ? void 0 : _classPrivateFieldLoo8[moduleName];
    }

    getOrThrow(name, msg) {
      return assertReturn(this.get(name), msg || `type ${name} not found`);
    }

    getOrUnknown(name) {
      return this.get(name, true);
    }

    getSignedExtensionExtra() {
      return expandExtensionTypes(_classPrivateFieldBase(this, _signedExtensions)[_signedExtensions], 'payload', _classPrivateFieldBase(this, _userExtensions)[_userExtensions]);
    }

    getSignedExtensionTypes() {
      return expandExtensionTypes(_classPrivateFieldBase(this, _signedExtensions)[_signedExtensions], 'extrinsic', _classPrivateFieldBase(this, _userExtensions)[_userExtensions]);
    }

    hasClass(name) {
      return _classPrivateFieldBase(this, _classes)[_classes].has(name);
    }

    hasDef(name) {
      return _classPrivateFieldBase(this, _definitions)[_definitions].has(name);
    }

    hasType(name) {
      return !_classPrivateFieldBase(this, _unknownTypes)[_unknownTypes].get(name) && (this.hasClass(name) || this.hasDef(name));
    }

    hash(data) {
      return this.createType('CodecHash', _classPrivateFieldBase(this, _hasher)[_hasher](data));
    }

    // eslint-disable-next-line no-dupe-class-members
    register(arg1, arg2) {
      // NOTE Constructors appear as functions here
      if (isFunction$1(arg1)) {
        _classPrivateFieldBase(this, _classes)[_classes].set(arg1.name, arg1);
      } else if (isString(arg1)) {
        assert$a(isFunction$1(arg2), `Expected class definition passed to '${arg1}' registration`);
        assert$a(arg1 !== arg2.toString(), `Unable to register circular ${arg1} === ${arg1}`);

        _classPrivateFieldBase(this, _classes)[_classes].set(arg1, arg2);
      } else {
        this._registerObject(arg1);
      }
    }

    _registerObject(obj) {
      Object.entries(obj).forEach(([name, type]) => {
        if (isFunction$1(type)) {
          // This _looks_ a bit funny, but `typeof Clazz === 'function'
          _classPrivateFieldBase(this, _classes)[_classes].set(name, type);
        } else {
          const def = isString(type) ? type : JSON.stringify(type);
          assert$a(name !== def, `Unable to register circular ${name} === ${def}`); // we already have this type, remove the classes registered for it

          if (_classPrivateFieldBase(this, _classes)[_classes].has(name)) {
            _classPrivateFieldBase(this, _classes)[_classes].delete(name);
          }

          _classPrivateFieldBase(this, _definitions)[_definitions].set(name, def);
        }
      });
    } // sets the chain properties


    setChainProperties(properties) {
      if (properties) {
        _classPrivateFieldBase(this, _chainProperties)[_chainProperties] = properties;
      }
    }

    setHasher(hasher) {
      _classPrivateFieldBase(this, _hasher)[_hasher] = hasher || blake2AsU8a;
    }

    setKnownTypes(knownTypes) {
      _classPrivateFieldBase(this, _knownTypes)[_knownTypes] = knownTypes;
    } // sets the metadata


    setMetadata(metadata, signedExtensions, userExtensions) {
      injectExtrinsics(this, metadata, _classPrivateFieldBase(this, _metadataCalls)[_metadataCalls]);
      injectErrors(this, metadata, _classPrivateFieldBase(this, _metadataErrors)[_metadataErrors]);
      injectEvents(this, metadata, _classPrivateFieldBase(this, _metadataEvents)[_metadataEvents]); // setup the available extensions

      this.setSignedExtensions(signedExtensions || (metadata.asLatest.extrinsic.version.gt(BN_ZERO) ? metadata.asLatest.extrinsic.signedExtensions.map(key => key.toString()) : defaultExtensions), userExtensions); // setup the chain properties with format overrides

      this.setChainProperties(extractProperties(this, metadata));
    } // sets the available signed extensions


    setSignedExtensions(signedExtensions = defaultExtensions, userExtensions) {
      _classPrivateFieldBase(this, _signedExtensions)[_signedExtensions] = signedExtensions;
      _classPrivateFieldBase(this, _userExtensions)[_userExtensions] = userExtensions;
      const unknown = findUnknownExtensions(_classPrivateFieldBase(this, _signedExtensions)[_signedExtensions], _classPrivateFieldBase(this, _userExtensions)[_userExtensions]);

      if (unknown.length) {
        l$6.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
      }
    }

  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  detectPackage(packageInfo$7, typeof __dirname !== 'undefined' && __dirname, [packageInfo$1, packageInfo$5, packageInfo$3]);

  // Copyright 2017-2021 @polkadot/rpc-core authors & contributors
  /** @internal */

  function refCountDelay(delay = 1750) {
    return source => {
      // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
      let [state, refCount, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
      return new Observable(ob => {
        source.subscribe(ob);

        if (refCount++ === 0) {
          if (state === 1) {
            scheduler.unsubscribe();
          } else {
            connection = source.connect();
          }

          state = 3;
        }

        return () => {
          if (--refCount === 0) {
            if (state === 2) {
              state = 0;
              scheduler.unsubscribe();
            } else {
              // state === 3
              state = 1;
              scheduler = asapScheduler.schedule(() => {
                state = 0;
                connection.unsubscribe();
              }, delay);
            }
          }
        };
      });
    };
  }

  // Copyright 2017-2021 @polkadot/rpc-core authors & contributors
  const l$5 = logger('drr');

  const CMP = (a, b) => JSON.stringify({
    t: a
  }) === JSON.stringify({
    t: b
  });

  const ERR = error => {
    l$5.error(error);
    throw error;
  };

  const NOOP = () => undefined;
  /**
   * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
   *
   * @ignore
   * @internal
   */


  const drr = ({
    delay,
    skipChange = false,
    skipTimeout = false
  } = {}) => source$ => source$.pipe(catchError(ERR), skipChange ? tap(NOOP) : distinctUntilChanged(CMP), publishReplay(1), skipTimeout ? refCount() : refCountDelay(delay));

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const deriveNoopCache = {
    del: () => undefined,
    forEach: () => undefined,
    get: () => undefined,
    set: (_, value) => value
  };

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
  let deriveCache;

  function wrapCache(keyStart, cache) {
    return {
      del: partial => cache.del(`${keyStart}${partial}`),
      forEach: cache.forEach,
      get: partial => {
        const key = `${keyStart}${partial}`;
        const cached = cache.get(key);

        if (cached) {
          cached.x = Date.now();
          cache.set(key, cached);
          return cached.v;
        }

        return undefined;
      },
      set: (partial, v) => {
        cache.set(`${keyStart}${partial}`, {
          v,
          x: Date.now()
        });
      }
    };
  }

  function clearCache(cache) {
    // clear all expired values
    const now = Date.now();
    const all = [];
    cache.forEach((key, {
      x
    }) => {
      now - x > CHACHE_EXPIRY && all.push(key);
    }); // don't do delete inside loop, just in-case

    all.forEach(key => cache.del(key));
  }

  function setDeriveCache(prefix = '', cache) {
    deriveCache = cache ? wrapCache(`derive:${prefix}:`, cache) : deriveNoopCache;

    if (cache) {
      clearCache(cache);
    }
  }
  setDeriveCache();

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  // Wraps a derive, doing 2 things to optimize calls -
  //   1. creates a memo of the inner fn -> Observable, removing when unsubscribed
  //   2. wraps the observable in a drr() (which includes an unsub delay)

  /** @internal */
  function memo(instanceId, inner) {
    const cached = memoize((...params) => new Observable(observer => {
      const subscription = inner(...params).subscribe(observer);
      return () => {
        cached.unmemoize(...params);
        subscription.unsubscribe();
      };
    }).pipe(drr()), {
      getInstanceId: () => instanceId
    });
    return cached;
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function retrieve$1(api, address) {
    const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());

    if (decoded.length > 8) {
      return of(api.registry.createType('AccountId', decoded));
    }

    const accountIndex = api.registry.createType('AccountIndex', decoded);
    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(accountId => assertReturn(accountId, 'Unable to retrieve accountId')));
  }
  /**
   * @name accountId
   * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
   * @description  An [[AccountId]]
   */


  function accountId(instanceId, api) {
    return memo(instanceId, address => retrieve$1(api, address));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
    const isIncluded = id => address ? id.toString() === address.toString() : false;

    return {
      isCouncil: ((electionsMembers === null || electionsMembers === void 0 ? void 0 : electionsMembers.map(([id]) => id)) || councilMembers || []).some(isIncluded),
      isSociety: (societyMembers || []).some(isIncluded),
      isSudo: (sudoKey === null || sudoKey === void 0 ? void 0 : sudoKey.toString()) === (address === null || address === void 0 ? void 0 : address.toString()),
      isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
    };
  }
  /**
   * @name info
   * @description Returns account membership flags
   */


  function flags(instanceId, api) {
    return memo(instanceId, address => {
      var _api$query$councilSec, _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;

      const councilSection = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';
      return combineLatest([address && (_api$query$councilSec = api.query[councilSection]) !== null && _api$query$councilSec !== void 0 && _api$query$councilSec.members ? api.query[councilSection].members() : of(undefined), address && (_api$query$council = api.query.council) !== null && _api$query$council !== void 0 && _api$query$council.members ? api.query.council.members() : of([]), address && (_api$query$technicalC = api.query.technicalCommittee) !== null && _api$query$technicalC !== void 0 && _api$query$technicalC.members ? api.query.technicalCommittee.members() : of([]), address && (_api$query$society = api.query.society) !== null && _api$query$society !== void 0 && _api$query$society.members ? api.query.society.members() : of([]), address && (_api$query$sudo = api.query.sudo) !== null && _api$query$sudo !== void 0 && _api$query$sudo.key ? api.query.sudo.key() : of(undefined)]).pipe(map(result => parseFlags(address, result)));
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function retrieve(api, address) {
    try {
      // yes, this can fail, don't care too much, catch will catch it
      const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());

      if (decoded.length > 8) {
        const accountId = api.registry.createType('AccountId', decoded);
        return api.derive.accounts.idToIndex(accountId).pipe(map(accountIndex => [accountId, accountIndex]));
      }

      const accountIndex = api.registry.createType('AccountIndex', decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(accountId => [accountId, accountIndex]));
    } catch (error) {
      return of([undefined, undefined]);
    }
  }
  /**
   * @name idAndIndex
   * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
   * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
   *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
   * });
   * ```
   */


  function idAndIndex(instanceId, api) {
    return memo(instanceId, address => retrieve(api, address));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name idToIndex
   * @param {( AccountId | string )} accountId - An accounts Id in different formats.
   * @returns Returns the corresponding AccountIndex.
   * @example
   * <BR>
   *
   * ```javascript
   * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
   * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
   *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
   * });
   * ```
   */

  function idToIndex(instanceId, api) {
    return memo(instanceId, accountId => api.derive.accounts.indexes().pipe(map(indexes => (indexes || {})[accountId.toString()])));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const UNDEF_HEX = {
    toHex: () => undefined
  };

  function dataAsString(data) {
    return data.isRaw ? u8aToString(data.asRaw.toU8a(true)) : data.isNone ? undefined : data.toHex();
  }

  function extractOther(additional) {
    return additional.reduce((other, [_key, _value]) => {
      const key = dataAsString(_key);
      const value = dataAsString(_value);

      if (key && value) {
        other[key] = value;
      }

      return other;
    }, {});
  }

  function extractIdentity(identityOfOpt, superOf) {
    if (!(identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome)) {
      return {
        judgements: []
      };
    }

    const {
      info,
      judgements
    } = identityOfOpt.unwrap();
    const topDisplay = dataAsString(info.display);
    return {
      display: superOf && dataAsString(superOf[1]) || topDisplay,
      displayParent: superOf && topDisplay,
      email: dataAsString(info.email),
      image: dataAsString(info.image),
      judgements,
      legal: dataAsString(info.legal),
      other: extractOther(info.additional),
      parent: superOf && superOf[0],
      pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
      riot: dataAsString(info.riot),
      twitter: dataAsString(info.twitter),
      web: dataAsString(info.web)
    };
  }

  function getParent(api, identityOfOpt, superOfOpt) {
    if (identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome) {
      // this identity has something set
      return of([identityOfOpt, undefined]);
    } else if (superOfOpt !== null && superOfOpt !== void 0 && superOfOpt.isSome) {
      const superOf = superOfOpt.unwrap(); // we have a super

      return combineLatest([api.query.identity.identityOf(superOf[0]), of(superOf)]);
    } // nothing of value returned


    return of([undefined, undefined]);
  }

  function getBase(api, accountId) {
    var _api$query$identity;

    return accountId && (_api$query$identity = api.query.identity) !== null && _api$query$identity !== void 0 && _api$query$identity.identityOf ? api.queryMulti([[api.query.identity.identityOf, accountId], [api.query.identity.superOf, accountId]]) : of([undefined, undefined]);
  }
  /**
   * @name identity
   * @description Returns identity info for an account
   */


  function identity$1(instanceId, api) {
    return memo(instanceId, accountId => getBase(api, accountId).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
  }
  function hasIdentity(instanceId, api) {
    return memo(instanceId, accountId => api.derive.accounts.hasIdentityMulti([accountId]).pipe(map(([first]) => first)));
  }
  function hasIdentityMulti(instanceId, api) {
    return memo(instanceId, accountIds => {
      var _api$query$identity2;

      return (_api$query$identity2 = api.query.identity) !== null && _api$query$identity2 !== void 0 && _api$query$identity2.identityOf ? combineLatest([api.query.identity.identityOf.multi(accountIds), api.query.identity.superOf.multi(accountIds)]).pipe(map(([identities, supers]) => identities.map((identityOfOpt, index) => {
        const superOfOpt = supers[index];
        const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : undefined;
        let display;

        if (identityOfOpt && identityOfOpt.isSome) {
          const value = dataAsString(identityOfOpt.unwrap().info.display);

          if (value && !isHex(value)) {
            display = value;
          }
        }

        return {
          display,
          hasIdentity: !!(display || parentId),
          parentId
        };
      }))) : of(accountIds.map(() => ({
        hasIdentity: false
      })));
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name indexToId
   * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
   * @returns Returns the corresponding AccountId.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.accounts.indexToId('F7Hs', (accountId) => {
   *   console.log(`The AccountId of F7Hs is ${accountId}`);
   * });
   * ```
   */

  function indexToId(instanceId, api) {
    return memo(instanceId, accountIndex => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map(optResult => optResult.unwrapOr([])[0])) : of(undefined));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  let indicesCache = null;

  function queryAccounts(api) {
    return api.query.indices.accounts.entries().pipe(map(entries => entries.reduce((indexes, [key, idOpt]) => {
      if (idOpt.isSome) {
        indexes[idOpt.unwrap()[0].toString()] = key.args[0];
      }

      return indexes;
    }, {})));
  }
  /**
   * @name indexes
   * @returns Returns all the indexes on the system.
   * @description This is an unwieldly query since it loops through
   * all of the enumsets and returns all of the values found. This could be up to 32k depending
   * on the number of active accounts in the system
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.accounts.indexes((indexes) => {
   *   console.log('All existing AccountIndexes', indexes);
   * });
   * ```
   */


  function indexes$1(instanceId, api) {
    return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map(indices => {
      indicesCache = indices;
      return indices;
    })));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function retrieveNick(api, accountId) {
    var _api$query$nicks;

    return (accountId && (_api$query$nicks = api.query.nicks) !== null && _api$query$nicks !== void 0 && _api$query$nicks.nameOf ? api.query.nicks.nameOf(accountId) : of(undefined)).pipe(map(nameOf => nameOf !== null && nameOf !== void 0 && nameOf.isSome ? u8aToString(nameOf.unwrap()[0]).substr(0, api.consts.nicks.maxLength.toNumber()) : undefined));
  }
  /**
   * @name info
   * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
   */


  function info$4(instanceId, api) {
    return memo(instanceId, address => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId, accountIndex]) => combineLatest([of({
      accountId,
      accountIndex
    }), api.derive.accounts.identity(accountId), retrieveNick(api, accountId)])), map(([{
      accountId,
      accountIndex
    }, identity, nickname]) => ({
      accountId,
      accountIndex,
      identity,
      nickname
    }))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var accounts$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accountId: accountId,
    flags: flags,
    idAndIndex: idAndIndex,
    idToIndex: idToIndex,
    identity: identity$1,
    hasIdentity: hasIdentity,
    hasIdentityMulti: hasIdentityMulti,
    indexToId: indexToId,
    indexes: indexes$1,
    info: info$4
  });

  function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$k(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const VESTING_ID = '0x76657374696e6720';

  function calcLocked(api, bestNumber, locks) {
    let lockedBalance = api.registry.createType('Balance');
    let lockedBreakdown = [];
    let vestingLocked = api.registry.createType('Balance');
    let allLocked = false;

    if (Array.isArray(locks)) {
      // only get the locks that are valid until passed the current block
      lockedBreakdown = locks.filter(({
        until
      }) => !until || bestNumber && until.gt(bestNumber));
      allLocked = lockedBreakdown.some(({
        amount
      }) => amount.isMax());
      vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({
        id
      }) => id.eq(VESTING_ID)).reduce((result, {
        amount
      }) => result.iadd(amount), new bn(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699

      const notAll = lockedBreakdown.filter(({
        amount
      }) => !amount.isMax());

      if (notAll.length) {
        lockedBalance = api.registry.createType('Balance', bnMax(...notAll.map(({
          amount
        }) => amount)));
      }
    }

    return {
      allLocked,
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    };
  }

  function calcShared(api, bestNumber, data, locks) {
    const {
      allLocked,
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    } = calcLocked(api, bestNumber, locks);
    const availableBalance = api.registry.createType('Balance', allLocked ? 0 : bnMax(new bn(0), data.freeBalance.sub(lockedBalance)));
    return _objectSpread$k(_objectSpread$k({}, data), {}, {
      availableBalance,
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    });
  }

  function calcBalances$1(api, [data, bestNumber, [vesting, allLocks]]) {
    const shared = calcShared(api, bestNumber, data, allLocks[0]); // Calculate the vesting balances,
    //  - offset = balance locked at startingBlock
    //  - perBlock is the unlock amount

    const {
      locked: vestingTotal,
      perBlock,
      startingBlock
    } = vesting || api.registry.createType('VestingInfo');
    const isStarted = bestNumber.gt(startingBlock);
    const vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new bn(0);
    const vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);
    const isVesting = isStarted && !shared.vestingLocked.isZero();
    const vestedClaimable = api.registry.createType('Balance', isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);
    const vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);
    return _objectSpread$k(_objectSpread$k({}, shared), {}, {
      accountId: data.accountId,
      accountNonce: data.accountNonce,
      additional: allLocks.filter((_, index) => index !== 0).map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),
      isVesting,
      vestedBalance,
      vestedClaimable,
      vestingEndBlock,
      vestingPerBlock: perBlock,
      vestingTotal
    });
  } // old


  function queryOld(api, accountId) {
    return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe(map(([locks, optVesting]) => {
      let vestingNew = null;

      if (optVesting.isSome) {
        const {
          offset: locked,
          perBlock,
          startingBlock
        } = optVesting.unwrap();
        vestingNew = api.registry.createType('VestingInfo', {
          locked,
          perBlock,
          startingBlock
        });
      }

      return [vestingNew, [locks]];
    }));
  } // current (balances, vesting)


  function queryCurrent$1(api, accountId, balanceInstances = ['balances']) {
    var _api$query$vesting;

    const lockCalls = balanceInstances.map(m => api.query[m].locks);
    const lockEmpty = lockCalls.map(c => !c);
    const lockQueries = lockCalls.filter(c => c).map(c => [c, accountId]);
    return ((_api$query$vesting = api.query.vesting) !== null && _api$query$vesting !== void 0 && _api$query$vesting.vesting ? api.queryMulti([[api.query.vesting.vesting, accountId], ...lockQueries]) // TODO We need to check module instances here as well, not only the balances module
    : lockQueries.length ? api.queryMulti(lockQueries).pipe(map(locks => [api.registry.createType('Option<VestingInfo>'), ...locks])) : of([api.registry.createType('Option<VestingInfo>')])).pipe(map(([optVesting, ...locks]) => {
      let offset = -1;
      return [optVesting.unwrapOr(null), lockEmpty.map(e => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offset])];
    }));
  }
  /**
   * @name all
   * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
   * @returns An object containing the results of various balance queries
   * @example
   * <BR>
   *
   * ```javascript
   * const ALICE = 'F7Hs';
   *
   * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
   *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
   * });
   * ```
   */


  function all(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
    return memo(instanceId, address => api.derive.balances.account(address).pipe(switchMap(account => {
      var _api$query$system, _api$query$balances;

      return !account.accountId.isEmpty ? combineLatest([of(account), api.derive.chain.bestNumber(), (_api$query$system = api.query.system) !== null && _api$query$system !== void 0 && _api$query$system.account || (_api$query$balances = api.query.balances) !== null && _api$query$balances !== void 0 && _api$query$balances.account ? queryCurrent$1(api, account.accountId, balanceInstances) : queryOld(api, account.accountId)]) : of([account, api.registry.createType('BlockNumber'), [null, []]]);
    }), map(result => calcBalances$1(api, result))));
  }

  function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$j(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
    return {
      freeBalance,
      frozenFee,
      frozenMisc,
      reservedBalance,
      votingBalance: api.registry.createType('Balance', freeBalance.toBn())
    };
  }

  function calcBalances(api, [accountId, [accountNonce, balances]]) {
    const primary = balances[0];
    assert$a(primary, 'No balances retrieved for account');
    return _objectSpread$j({
      accountId,
      accountNonce,
      additional: balances.filter((_, index) => index !== 0).map(b => getBalance(api, b))
    }, getBalance(api, primary));
  } // old


  function queryBalancesFree(api, accountId) {
    return api.queryMulti([[api.query.balances.freeBalance, accountId], [api.query.balances.reservedBalance, accountId], [api.query.system.accountNonce, accountId]]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [accountNonce, [[freeBalance, reservedBalance, api.registry.createType('Balance'), api.registry.createType('Balance')]]]));
  }

  function queryBalancesAccount(api, accountId, modules = ['balances']) {
    const balances = modules.map(m => [api.query[m].account, accountId]);

    const extract = data => data.map(({
      feeFrozen,
      free,
      miscFrozen,
      reserved
    }) => [free, reserved, feeFrozen, miscFrozen]);

    return isFunction$1(api.query.system.account) ? api.queryMulti([[api.query.system.account, accountId], ...balances]).pipe(map(([{
      nonce
    }, ...balances]) => [nonce, extract(balances)])) : api.queryMulti([[api.query.system.accountNonce, accountId], ...balances]).pipe(map(([nonce, ...balances]) => [nonce, extract(balances)]));
  }

  function queryCurrent(api, accountId) {
    // AccountInfo is current, support old, eg. Edgeware
    return api.query.system.account(accountId).pipe(map(infoOrTuple => {
      const {
        feeFrozen,
        free,
        miscFrozen,
        reserved
      } = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
      const accountNonce = infoOrTuple.nonce || infoOrTuple[0];
      return [accountNonce, [[free, reserved, feeFrozen, miscFrozen]]];
    }));
  }
  /**
   * @name account
   * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
   * @returns An object containing the results of various balance queries
   * @example
   * <BR>
   *
   * ```javascript
   * const ALICE = 'F7Hs';
   *
   * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
   *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
   * });
   * ```
   */


  function account$1(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
    return memo(instanceId, address => api.derive.accounts.accountId(address).pipe(switchMap(accountId => accountId ? combineLatest([of(accountId), balanceInstances ? queryBalancesAccount(api, accountId, balanceInstances) : isFunction$1(api.query.system.account) ? queryCurrent(api, accountId) : isFunction$1(api.query.balances.account) ? queryBalancesAccount(api, accountId) : queryBalancesFree(api, accountId)]) : of([api.registry.createType('AccountId'), [api.registry.createType('Index'), [[api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance')]]]])), map(result => calcBalances(api, result))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name fees
   * @returns An object containing the combined results of the storage queries for
   * all relevant fees as declared in the substrate chain spec.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.balances.fees(({ creationFee, transferFee }) => {
   *   console.log(`The fee for creating a new account on this chain is ${creationFee} units. The fee required for making a transfer is ${transferFee} units.`);
   * });
   * ```
   */

  function fees$1(instanceId, api) {
    return memo(instanceId, () => {
      var _api$consts$balances, _api$consts$balances2, _api$consts$balances3, _api$consts$transacti, _api$consts$transacti2;

      return of([// deprecated - remove
      ((_api$consts$balances = api.consts.balances) === null || _api$consts$balances === void 0 ? void 0 : _api$consts$balances.creationFee) || api.registry.createType('Balance'), ((_api$consts$balances2 = api.consts.balances) === null || _api$consts$balances2 === void 0 ? void 0 : _api$consts$balances2.transferFee) || api.registry.createType('Balance'), // current
      ((_api$consts$balances3 = api.consts.balances) === null || _api$consts$balances3 === void 0 ? void 0 : _api$consts$balances3.existentialDeposit) || api.registry.createType('Balance'), ((_api$consts$transacti = api.consts.transactionPayment) === null || _api$consts$transacti === void 0 ? void 0 : _api$consts$transacti.transactionBaseFee) || api.registry.createType('Balance'), ((_api$consts$transacti2 = api.consts.transactionPayment) === null || _api$consts$transacti2 === void 0 ? void 0 : _api$consts$transacti2.transactionByteFee) || api.registry.createType('Balance')]).pipe(map(([creationFee, transferFee, existentialDeposit, transactionBaseFee, transactionByteFee]) => ({
        creationFee,
        existentialDeposit,
        transactionBaseFee,
        transactionByteFee,
        transferFee
      })));
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function votingBalances(instanceId, api) {
    return memo(instanceId, addresses => !addresses || !addresses.length ? of([]) : combineLatest(addresses.map(accountId => api.derive.balances.account(accountId))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const votingBalance = all;

  var balances = /*#__PURE__*/Object.freeze({
    __proto__: null,
    all: all,
    votingBalance: votingBalance,
    account: account$1,
    fees: fees$1,
    votingBalances: votingBalances
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function filterBountiesProposals(api, allProposals) {
    const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
    const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
    return allProposals.filter(proposal => bountyProposalCalls.find(bountyCall => bountyCall.is(proposal.proposal)));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function parseResult$2([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
    const bounties = [];
    maybeBounties.forEach((bounty, index) => {
      if (bounty.isSome) {
        bounties.push({
          bounty: bounty.unwrap(),
          description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
          index: ids[index],
          proposals: bountyProposals.filter(bountyProposal => ids[index].eq(bountyProposal.proposal.args[0]))
        });
      }
    });
    return bounties;
  }

  function bounties$1(instanceId, api) {
    const bountyBase = api.query.bounties || api.query.treasury;
    return memo(instanceId, () => combineLatest([bountyBase.bountyCount(), api.query.council ? api.query.council.proposalCount() : of(0)]).pipe(switchMap(() => combineLatest([bountyBase.bounties.keys(), api.derive.council ? api.derive.council.proposals() : of([])])), switchMap(([keys, proposals]) => {
      const ids = keys.map(({
        args: [id]
      }) => id);
      return combineLatest([bountyBase.bounties.multi(ids), bountyBase.bountyDescriptions.multi(ids), of(ids), of(filterBountiesProposals(api, proposals))]);
    }), map(parseResult$2)));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var bounties = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bounties: bounties$1
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name bestNumber
   * @returns The latest block number.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumber((blockNumber) => {
   *   console.log(`the current best block is #${blockNumber}`);
   * });
   * ```
   */

  function bestNumber(instanceId, api) {
    return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(map(header => header.number.unwrap())));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name bestNumberFinalized
   * @returns A BlockNumber
   * @description Get the latest finalized block number.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumberFinalized((blockNumber) => {
   *   console.log(`the current finalized block is #${blockNumber}`);
   * });
   * ```
   */

  function bestNumberFinalized(instanceId, api) {
    return memo(instanceId, () => api.rpc.chain.subscribeFinalizedHeads().pipe(map(header => header.number.unwrap())));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name bestNumberLag
   * @returns A number of blocks
   * @description Calculates the lag between finalized head and best head
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumberLag((lag) => {
   *   console.log(`finalized is ${lag} blocks behind head`);
   * });
   * ```
   */

  function bestNumberLag(instanceId, api) {
    return memo(instanceId, () => combineLatest([api.derive.chain.bestNumber(), api.derive.chain.bestNumberFinalized()]).pipe(map(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function extractAuthor(digest, sessionValidators = []) {
    const [citem] = digest.logs.filter(({
      type
    }) => type === 'Consensus');

    if (citem) {
      const [engine, data] = citem.asConsensus;
      return engine.extractAuthor(data, sessionValidators);
    } else {
      const [pitem] = digest.logs.filter(({
        type
      }) => type === 'PreRuntime');

      if (pitem) {
        const [engine, data] = pitem.asPreRuntime;
        return engine.extractAuthor(data, sessionValidators);
      }
    }

    return undefined;
  }

  const _Header = Struct.with(runtimeTypes.types.Header);
  /**
   * @name HeaderExtended
   * @description
   * A [[Block]] header with an additional `author` field that indicates the block author
   */


  var _author$1 = _classPrivateFieldKey("author");

  var _validators = _classPrivateFieldKey("validators");

  class HeaderExtended extends _Header {
    constructor(registry, header, validators) {
      super(registry, header);
      Object.defineProperty(this, _author$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _validators, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _author$1)[_author$1] = extractAuthor(this.digest, validators);
      _classPrivateFieldBase(this, _validators)[_validators] = validators;
    }
    /**
     * @description Convenience method, returns the author for the block
     */


    get author() {
      return _classPrivateFieldBase(this, _author$1)[_author$1];
    }
    /**
     * @description Convenience method, returns the validators for the block
     */


    get validators() {
      return _classPrivateFieldBase(this, _validators)[_validators];
    }

  }

  const _SignedBlock = Struct.with(runtimeTypes.types.SignedBlock);

  function mapExtrinsics(extrinsics, records) {
    return extrinsics.map((extrinsic, index) => {
      let dispatchError;
      let dispatchInfo;
      const events = records.filter(({
        phase
      }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({
        event
      }) => {
        if (event.section === 'system') {
          if (event.method === 'ExtrinsicSuccess') {
            dispatchInfo = event.data[0];
          } else if (event.method === 'ExtrinsicFailed') {
            dispatchError = event.data[0];
            dispatchInfo = event.data[1];
          }
        }

        return event;
      });
      return {
        dispatchError,
        dispatchInfo,
        events,
        extrinsic
      };
    });
  }
  /**
   * @name SignedBlockExtended
   * @description
   * A [[Block]] header with an additional `author` field that indicates the block author
   */


  var _author = _classPrivateFieldKey("author");

  var _events = _classPrivateFieldKey("events");

  var _extrinsics = _classPrivateFieldKey("extrinsics");

  class SignedBlockExtended extends _SignedBlock {
    constructor(registry, block, events, sessionValidators) {
      super(registry, block);
      Object.defineProperty(this, _author, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _events, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _extrinsics, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _author)[_author] = extractAuthor(this.block.header.digest, sessionValidators);
      _classPrivateFieldBase(this, _events)[_events] = events || [];
      _classPrivateFieldBase(this, _extrinsics)[_extrinsics] = mapExtrinsics(this.block.extrinsics, _classPrivateFieldBase(this, _events)[_events]);
    }
    /**
     * @description Convenience method, returns the author for the block
     */


    get author() {
      return _classPrivateFieldBase(this, _author)[_author];
    }
    /**
     * @description Convenience method, returns the events associated with the block
     */


    get events() {
      return _classPrivateFieldBase(this, _events)[_events];
    }
    /**
     * @description Returns the extrinsics and their events, mapped
     */


    get extrinsics() {
      return _classPrivateFieldBase(this, _extrinsics)[_extrinsics];
    }

  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name getHeader
   * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
   * @returns An array containing the block header and the block author
   * @description Get a specific block header and extend it with the author
   * @example
   * <BR>
   *
   * ```javascript
   * const { author, number } = await api.derive.chain.getHeader('0x123...456');
   *
   * console.log(`block #${number} was authored by ${author}`);
   * ```
   */

  function getHeader(instanceId, api) {
    return memo(instanceId, hash => combineLatest([api.rpc.chain.getHeader(hash), api.query.session ? api.query.session.validators.at(hash) : of([])]).pipe(map(([header, validators]) => new HeaderExtended(api.registry, header, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
    // we supplied an invalid hash. (Due to defaults, storeage will have an
    // empty value, so only the RPC is affected). So return undefined
    of())));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name getBlock
   * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
   * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
   * @example
   * <BR>
   *
   * ```javascript
   * const { author, block } = await api.derive.chain.getBlock('0x123...456');
   *
   * console.log(`block #${block.header.number} was authored by ${author}`);
   * ```
   */

  function getBlock(instanceId, api) {
    return memo(instanceId, hash => combineLatest([api.rpc.chain.getBlock(hash), api.query.system.events.at(hash), api.query.session ? api.query.session.validators.at(hash) : of([])]).pipe(map(([signedBlock, events, validators]) => new SignedBlockExtended(api.registry, signedBlock, events, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
    // we supplied an invalid hash. (Due to defaults, storage will have an
    // empty value, so only the RPC is affected). So return undefined
    of())));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name subscribeNewBlocks
   * @returns The latest block & events for that block
   */

  function subscribeNewBlocks(instanceId, api) {
    return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap(header => {
      const blockHash = header.hash;
      return combineLatest(api.rpc.chain.getBlock(blockHash), api.query.system.events.at(blockHash), of(header.validators));
    }), map(([block, events, validators]) => new SignedBlockExtended(api.registry, block, events, validators))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @name subscribeNewHeads
   * @returns A header with the current header (including extracted author)
   * @description An observable of the current block header and it's author
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.subscribeNewHeads((header) => {
   *   console.log(`block #${header.number} was authored by ${header.author}`);
   * });
   * ```
   */

  function subscribeNewHeads(instanceId, api) {
    return memo(instanceId, () => combineLatest([api.rpc.chain.subscribeNewHeads(), api.query.session ? api.query.session.validators() : of([])]).pipe(map(([header, validators]) => new HeaderExtended(api.registry, header, validators))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var chain = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bestNumber: bestNumber,
    bestNumberFinalized: bestNumberFinalized,
    bestNumberLag: bestNumberLag,
    getHeader: getHeader,
    getBlock: getBlock,
    subscribeNewBlocks: subscribeNewBlocks,
    subscribeNewHeads: subscribeNewHeads
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  // query via constants (current applicable path)
  function queryConstants(api) {
    return of([// deprecated
    api.consts.contracts.callBaseFee || api.registry.createType('Balance'), api.consts.contracts.contractFee || api.registry.createType('Balance'), api.consts.contracts.creationFee || api.registry.createType('Balance'), api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'), api.consts.contracts.transactionByteFee || api.registry.createType('Balance'), api.consts.contracts.transferFee || api.registry.createType('Balance'), // current
    api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.surchargeReward, api.consts.contracts.tombstoneDeposit]);
  }
  /**
   * @name fees
   * @returns An object containing the combined results of the queries for
   * all relevant contract fees as declared in the substrate chain spec.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.contracts.fees(([creationFee, transferFee]) => {
   *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
   * });
   * ```
   */


  function fees(instanceId, api) {
    return memo(instanceId, () => {
      return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
        callBaseFee,
        contractFee,
        creationFee,
        rentByteFee,
        rentDepositOffset,
        surchargeReward,
        tombstoneDeposit,
        transactionBaseFee,
        transactionByteFee,
        transferFee
      })));
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var contracts = /*#__PURE__*/Object.freeze({
    __proto__: null,
    fees: fees
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function parse$4(api, [hashes, proposals, votes]) {
    return proposals.map((proposalOpt, index) => proposalOpt && proposalOpt.isSome ? {
      hash: api.registry.createType('Hash', hashes[index]),
      proposal: proposalOpt.unwrap(),
      votes: votes[index].unwrapOr(null)
    } : null).filter(proposal => !!proposal);
  }

  function _proposalsFrom(instanceId, api, section = 'council') {
    return memo(instanceId, hashes => {
      var _api$query$section;

      return (isFunction$1((_api$query$section = api.query[section]) === null || _api$query$section === void 0 ? void 0 : _api$query$section.proposals) && hashes.length ? combineLatest([of(hashes), combineLatest(hashes.map(hash => // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
      // however we have had cases on Edgeware where the indices have moved around after an
      // upgrade, which results in invalid on-chain data
      api.query[section].proposalOf(hash).pipe(catchError(() => of(null))))), api.query[section].voting.multi(hashes)]) : of([[], [], []])).pipe(map(result => parse$4(api, result)));
    });
  }

  function proposals$4(instanceId, api, section = 'council') {
    const proposalsFrom = _proposalsFrom(instanceId, api, section);

    return memo(instanceId, () => {
      var _api$query$section2;

      return isFunction$1((_api$query$section2 = api.query[section]) === null || _api$query$section2 === void 0 ? void 0 : _api$query$section2.proposals) ? api.query[section].proposals().pipe(switchMap(proposalsFrom)) : of([]);
    });
  }
  function proposal$1(instanceId, api, section = 'council') {
    const proposalsFrom = _proposalsFrom(instanceId, api, section);

    return memo(instanceId, hash => {
      var _api$query$section3;

      return isFunction$1((_api$query$section3 = api.query[section]) === null || _api$query$section3 === void 0 ? void 0 : _api$query$section3.proposals) ? proposalsFrom([hash]).pipe(map(([proposal]) => proposal)) : of(null);
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function proposal(instanceId, api) {
    return memo(instanceId, proposal$1(instanceId, api));
  }
  function proposals$3(instanceId, api) {
    return memo(instanceId, proposals$4(instanceId, api));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function isVoter(value) {
    return !Array.isArray(value);
  }

  function retrieveStakeOf(api) {
    return (api.query.electionsPhragmen || api.query.elections).stakeOf.entries().pipe(map(entries => entries.map(([{
      args: [accountId]
    }, stake]) => [accountId, stake])));
  }

  function retrieveVoteOf(api) {
    return (api.query.electionsPhragmen || api.query.elections).votesOf.entries().pipe(map(entries => entries.map(([{
      args: [accountId]
    }, votes]) => [accountId, votes])));
  }

  function retrievePrev(api) {
    return combineLatest([retrieveStakeOf(api), retrieveVoteOf(api)]).pipe(map(([stakes, votes]) => {
      const result = [];
      votes.forEach(([voter, votes]) => {
        result.push([voter, {
          stake: api.registry.createType('Balance'),
          votes
        }]);
      });
      stakes.forEach(([staker, stake]) => {
        const entry = result.find(([voter]) => voter.eq(staker));

        if (entry) {
          entry[1].stake = stake;
        } else {
          result.push([staker, {
            stake,
            votes: []
          }]);
        }
      });
      return result;
    }));
  }

  function retrieveCurrent(api) {
    const elections = api.query.electionsPhragmen || api.query.elections;
    return elections.voting.entries().pipe(map(entries => entries.map(([{
      args: [accountId]
    }, value]) => [accountId, isVoter(value) ? {
      stake: value.stake,
      votes: value.votes
    } : {
      stake: value[0],
      votes: value[1]
    }])));
  }

  function votes(instanceId, api) {
    return memo(instanceId, () => (api.query.electionsPhragmen || api.query.elections).stakeOf ? retrievePrev(api) : retrieveCurrent(api));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function votesOf(instanceId, api) {
    return memo(instanceId, accountId => api.derive.council.votes().pipe(map(votes => (votes.find(([from]) => from.eq(accountId)) || [null, {
      stake: api.registry.createType('Balance'),
      votes: []
    }])[1])));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var council = /*#__PURE__*/Object.freeze({
    __proto__: null,
    proposal: proposal,
    proposals: proposals$3,
    votes: votes,
    votesOf: votesOf
  });

  function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$i(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const DEMOCRACY_ID = stringToHex('democrac');

  function queryQueue(api) {
    return api.query.democracy.dispatchQueue().pipe(switchMap(dispatches => combineLatest([of(dispatches), api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))])), map(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
      at,
      image: images[dispatchIndex],
      imageHash,
      index
    }))));
  }

  function schedulerEntries(api) {
    // We don't get entries, but rather we get the keys (triggered via finished referendums) and
    // the subscribe to those keys - this means we pickup when the schedulers actually executes
    // at a block, the entry for that block will become empty
    return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap(keys => {
      const blockNumbers = keys.map(({
        args: [blockNumber]
      }) => blockNumber);
      return combineLatest([of(blockNumbers), api.query.scheduler.agenda.multi(blockNumbers)]);
    }));
  }

  function queryScheduler(api) {
    return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
      const result = [];
      blockNumbers.forEach((at, index) => {
        agendas[index].filter(optScheduled => optScheduled.isSome).forEach(optScheduled => {
          const scheduled = optScheduled.unwrap();

          if (scheduled.maybeId.isSome) {
            const id = scheduled.maybeId.unwrap().toHex();

            if (id.startsWith(DEMOCRACY_ID)) {
              const [, index] = api.registry.createType('(u64, ReferendumIndex)', id);
              const imageHash = scheduled.call.args[0];
              result.push({
                at,
                imageHash,
                index
              });
            }
          }
        });
      });
      return combineLatest([of(result), api.derive.democracy.preimages(result.map(({
        imageHash
      }) => imageHash))]);
    }), map(([infos, images]) => infos.map((info, index) => _objectSpread$i(_objectSpread$i({}, info), {}, {
      image: images[index]
    }))));
  }

  function dispatchQueue(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$scheduler;

      return isFunction$1((_api$query$scheduler = api.query.scheduler) === null || _api$query$scheduler === void 0 ? void 0 : _api$query$scheduler.agenda) ? queryScheduler(api) : api.query.democracy.dispatchQueue ? queryQueue(api) : of([]);
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];

  function parseEnd(api, vote, {
    approved,
    end
  }) {
    return [end, approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add(api.consts.democracy.enactmentPeriod.muln(LOCKUPS[vote.conviction.index])) : BN_ZERO];
  }

  function parseLock(api, [referendumId, accountVote], referendum) {
    const {
      balance,
      vote
    } = accountVote.asStandard;
    const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [BN_ZERO, BN_ZERO];
    return {
      balance,
      isDelegated: false,
      isFinished: referendum.isFinished,
      referendumEnd,
      referendumId,
      unlockAt,
      vote
    };
  }

  function delegateLocks(api, {
    balance,
    conviction,
    target
  }) {
    return api.derive.democracy.locks(target).pipe(map(available => available.map(({
      isFinished,
      referendumEnd,
      referendumId,
      unlockAt,
      vote
    }) => ({
      balance,
      isDelegated: true,
      isFinished,
      referendumEnd,
      referendumId,
      unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add(api.consts.democracy.enactmentPeriod.muln(LOCKUPS[conviction.index])),
      vote: api.registry.createType('Vote', {
        aye: vote.isAye,
        conviction
      })
    }))));
  }

  function directLocks(api, {
    votes
  }) {
    if (!votes.length) {
      return of([]);
    }

    return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe(map(referendums => votes.map((vote, index) => [vote, referendums[index].unwrapOr(null)]).filter(item => !!item[1] && isUndefined(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
  }

  function locks(instanceId, api) {
    return memo(instanceId, accountId => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId).pipe(switchMap(voting => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : of([]))) : of([]));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function withImage(api, nextOpt) {
    if (nextOpt.isNone) {
      return of(null);
    }

    const [imageHash, threshold] = nextOpt.unwrap();
    return api.derive.democracy.preimage(imageHash).pipe(map(image => ({
      image,
      imageHash,
      threshold
    })));
  }

  function nextExternal(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$democracy;

      return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.nextExternal ? api.query.democracy.nextExternal().pipe(switchMap(nextOpt => withImage(api, nextOpt))) : of(null);
    });
  }

  function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$h(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function isOldInfo(info) {
    return !!info.proposalHash;
  }

  function isCurrentStatus(status) {
    return !!status.tally;
  }

  function isCurrentPreimage(api, imageOpt) {
    return !!imageOpt && !api.query.democracy.dispatchQueue;
  }

  function compareRationals(n1, d1, n2, d2) {
    while (true) {
      const q1 = n1.div(d1);
      const q2 = n2.div(d2);

      if (q1.lt(q2)) {
        return true;
      } else if (q2.lt(q1)) {
        return false;
      }

      const r1 = n1.mod(d1);
      const r2 = n2.mod(d2);

      if (r2.isZero()) {
        return false;
      } else if (r1.isZero()) {
        return true;
      }

      n1 = d2;
      n2 = d1;
      d1 = r2;
      d2 = r1;
    }
  }

  function calcPassingOther(threshold, sqrtElectorate, {
    votedAye,
    votedNay,
    votedTotal
  }) {
    const sqrtVoters = bnSqrt(votedTotal);
    return sqrtVoters.isZero() ? false : threshold.isSupermajorityapproval ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate) : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
  }

  function calcPassing(threshold, sqrtElectorate, state) {
    return threshold.isSimplemajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate, state);
  }

  function calcVotesPrev(votesFor) {
    return votesFor.reduce((state, derived) => {
      const {
        balance,
        vote
      } = derived;
      const isDefault = vote.conviction.index === 0;
      const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);

      if (vote.isAye) {
        state.allAye.push(derived);
        state.voteCountAye++;
        state.votedAye.iadd(counted);
      } else {
        state.allNay.push(derived);
        state.voteCountNay++;
        state.votedNay.iadd(counted);
      }

      state.voteCount++;
      state.votedTotal.iadd(counted);
      return state;
    }, {
      allAye: [],
      allNay: [],
      voteCount: 0,
      voteCountAye: 0,
      voteCountNay: 0,
      votedAye: new bn(0),
      votedNay: new bn(0),
      votedTotal: new bn(0)
    });
  }

  function calcVotesCurrent(tally, votes) {
    const allAye = [];
    const allNay = [];
    votes.forEach(derived => {
      if (derived.vote.isAye) {
        allAye.push(derived);
      } else {
        allNay.push(derived);
      }
    });
    return {
      allAye,
      allNay,
      voteCount: allAye.length + allNay.length,
      voteCountAye: allAye.length,
      voteCountNay: allNay.length,
      votedAye: tally.ayes,
      votedNay: tally.nays,
      votedTotal: tally.turnout
    };
  }

  function calcVotes(sqrtElectorate, referendum, votes) {
    const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes) : calcVotesPrev(votes);
    return _objectSpread$h(_objectSpread$h({}, state), {}, {
      isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
      votes
    });
  }
  function getStatus(info) {
    if (info.isNone) {
      return null;
    }

    const unwrapped = info.unwrap();

    if (isOldInfo(unwrapped)) {
      return unwrapped;
    } else if (unwrapped.isOngoing) {
      return unwrapped.asOngoing;
    } // done, we don't include it here... only currently active


    return null;
  }

  function constructProposal(api, [bytes, proposer, balance, at]) {
    let proposal;

    try {
      proposal = api.registry.createType('Proposal', bytes.toU8a(true));
    } catch (error) {
      console.error(error);
    }

    return {
      at,
      balance,
      proposal,
      proposer
    };
  }

  function parseImage(api, imageOpt) {
    if (imageOpt.isNone) {
      return;
    }

    if (isCurrentPreimage(api, imageOpt)) {
      const status = imageOpt.unwrap();

      if (status.isMissing) {
        return;
      }

      const {
        data,
        deposit,
        provider,
        since
      } = status.asAvailable;
      return constructProposal(api, [data, provider, deposit, since]);
    }

    return constructProposal(api, imageOpt.unwrap());
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function preimage(instanceId, api) {
    return memo(instanceId, hash => api.query.democracy.preimages(hash).pipe(map(imageOpt => parseImage(api, imageOpt))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function preimages(instanceId, api) {
    return memo(instanceId, hashes => api.query.democracy.preimages.multi(hashes).pipe(map(images => images.map(imageOpt => parseImage(api, imageOpt)))));
  }

  function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$g(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function isNewDepositors(depositors) {
    // Detect balance...
    // eslint-disable-next-line @typescript-eslint/unbound-method
    return isFunction$1(depositors[1].mul);
  }

  function parse$3([proposals, images, optDepositors]) {
    return proposals.filter(([,, proposer], index) => {
      var _optDepositors$index;

      return !!((_optDepositors$index = optDepositors[index]) !== null && _optDepositors$index !== void 0 && _optDepositors$index.isSome) && !proposer.isEmpty;
    }).map(([index, imageHash, proposer], proposalIndex) => {
      const depositors = optDepositors[proposalIndex].unwrap();
      return _objectSpread$g(_objectSpread$g({}, isNewDepositors(depositors) ? {
        balance: depositors[1],
        seconds: depositors[0]
      } : {
        balance: depositors[0],
        seconds: depositors[1]
      }), {}, {
        image: images[proposalIndex],
        imageHash,
        index,
        proposer
      });
    });
  }

  function proposals$2(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$democracy, _api$query$democracy2;

      return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.publicProps && (_api$query$democracy2 = api.query.democracy) !== null && _api$query$democracy2 !== void 0 && _api$query$democracy2.preimages ? api.query.democracy.publicProps().pipe(switchMap(proposals => combineLatest([of(proposals), api.derive.democracy.preimages(proposals.map(([, hash]) => hash)), api.query.democracy.depositOf.multi(proposals.map(([index]) => index))])), map(parse$3)) : of([]);
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function referendumIds(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$democracy;

      return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.lowestUnbaked ? api.queryMulti([api.query.democracy.lowestUnbaked, api.query.democracy.referendumCount]).pipe(map(([first, total]) => total.gt(first) // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i)) : [])) : of([]);
    });
  }

  function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$f(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  function referendums(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap(referendums => combineLatest([of(referendums), api.derive.democracy._referendumsVotes(referendums)])), map(([referendums, votes]) => referendums.map((referendum, index) => _objectSpread$f(_objectSpread$f({}, referendum), votes[index])))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function referendumsActive(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => ids.length ? api.derive.democracy.referendumsInfo(ids) : of([]))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function referendumsFinished(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => api.query.democracy.referendumInfoOf.multi(ids)), map(infos => infos.filter(optInfo => optInfo.isSome).map(optInfo => optInfo.unwrap()).filter(info => info.isFinished).map(info => info.asFinished))));
  }

  function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$e(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function votesPrev(api, referendumId) {
    return api.query.democracy.votersFor(referendumId).pipe(switchMap(votersFor => combineLatest([of(votersFor), votersFor.length ? api.query.democracy.voteOf.multi(votersFor.map(accountId => [referendumId, accountId])) : of([]), api.derive.balances.votingBalances(votersFor)])), map(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
      accountId,
      balance: balances[index].votingBalance || api.registry.createType('Balance'),
      isDelegating: false,
      vote: votes[index] || api.registry.createType('Vote')
    }))));
  }

  function extractVotes(mapped, referendumId) {
    return mapped.filter(([, voting]) => voting.isDirect).map(([accountId, voting]) => [accountId, voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId, votes]) => // FIXME We are ignoring split votes
    votes.reduce((result, [, vote]) => {
      if (vote.isStandard) {
        result.push(_objectSpread$e({
          accountId,
          isDelegating: false
        }, vote.asStandard));
      }

      return result;
    }, result), []);
  }

  function votesCurr(api, referendumId) {
    return api.query.democracy.votingOf.entries().pipe(map(allVoting => {
      const mapped = allVoting.map(([{
        args: [accountId]
      }, voting]) => [accountId, voting]);
      const votes = extractVotes(mapped, referendumId);
      const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId, voting]) => [accountId, voting.asDelegating]); // add delegations

      delegations.forEach(([accountId, {
        balance,
        conviction,
        target
      }]) => {
        // Are we delegating to a delegator
        const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
        const to = votes.find(({
          accountId
        }) => accountId.eq(toDelegator ? toDelegator[0] : target)); // this delegation has a target

        if (to) {
          votes.push({
            accountId,
            balance,
            isDelegating: true,
            vote: api.registry.createType('Vote', {
              aye: to.vote.isAye,
              conviction
            })
          });
        }
      });
      return votes;
    }));
  }

  function _referendumVotes(instanceId, api) {
    return memo(instanceId, referendum => combineLatest([api.derive.democracy.sqrtElectorate(), isFunction$1(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)]).pipe(map(([sqrtElectorate, votes]) => calcVotes(sqrtElectorate, referendum, votes))));
  }
  function _referendumsVotes(instanceId, api) {
    return memo(instanceId, referendums => referendums.length ? combineLatest(referendums.map(referendum => api.derive.democracy._referendumVotes(referendum))) : of([]));
  }
  function _referendumInfo(instanceId, api) {
    return memo(instanceId, (index, info) => {
      const status = getStatus(info);
      return status ? api.query.democracy.preimages(status.proposalHash).pipe(map(preimage => ({
        image: parseImage(api, preimage),
        imageHash: status.proposalHash,
        index: api.registry.createType('ReferendumIndex', index),
        status
      }))) : of(null);
    });
  }
  function referendumsInfo(instanceId, api) {
    return memo(instanceId, ids => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap(infos => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map(infos => infos.filter(referendum => !!referendum))) : of([]));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function sqrtElectorate(instanceId, api) {
    return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map(totalIssuance => bnSqrt(totalIssuance))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var democracy = /*#__PURE__*/Object.freeze({
    __proto__: null,
    dispatchQueue: dispatchQueue,
    locks: locks,
    nextExternal: nextExternal,
    preimage: preimage,
    preimages: preimages,
    proposals: proposals$2,
    referendumIds: referendumIds,
    referendums: referendums,
    referendumsActive: referendumsActive,
    referendumsFinished: referendumsFinished,
    _referendumVotes: _referendumVotes,
    _referendumsVotes: _referendumsVotes,
    _referendumInfo: _referendumInfo,
    referendumsInfo: referendumsInfo,
    sqrtElectorate: sqrtElectorate
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function isSeatHolder(value) {
    return !Array.isArray(value);
  }

  function isCandidateTuple(value) {
    return Array.isArray(value);
  }

  function getAccountTuple(value) {
    return isSeatHolder(value) ? [value.who, value.stake] : value;
  }

  function getCandidate(value) {
    return isCandidateTuple(value) ? value[0] : value;
  }

  function sortAccounts([, balanceA], [, balanceB]) {
    return balanceB.cmp(balanceA);
  }

  function queryElections(api) {
    const section = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';
    return api.queryMulti([api.query.council.members, api.query[section].candidates, api.query[section].members, api.query[section].runnersUp]).pipe(map(([councilMembers, candidates, members, runnersUp]) => ({
      candidacyBond: api.consts[section].candidacyBond,
      candidateCount: api.registry.createType('u32', candidates.length),
      candidates: candidates.map(getCandidate),
      desiredRunnersUp: api.consts[section].desiredRunnersUp,
      desiredSeats: api.consts[section].desiredMembers,
      members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(accountId => [accountId, api.registry.createType('Balance')]),
      runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts),
      termDuration: api.consts[section].termDuration,
      votingBond: api.consts[section].votingBond
    })));
  }
  /**
   * @name info
   * @returns An object containing the combined results of the storage queries for
   * all relevant election module properties.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.elections.info(({ members, candidates }) => {
   *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
   * });
   * ```
   */


  function info$3(instanceId, api) {
    return memo(instanceId, () => queryElections(api));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var elections = /*#__PURE__*/Object.freeze({
    __proto__: null,
    info: info$3
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function mapResult([result, validators, heartbeats, numBlocks]) {
    validators.forEach((validator, index) => {
      const validatorId = validator.toString();
      const blockCount = numBlocks[index];
      const hasMessage = !heartbeats[index].isEmpty;
      const prev = result[validatorId];

      if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
        result[validatorId] = {
          blockCount,
          hasMessage,
          isOnline: hasMessage || blockCount.gt(BN_ZERO)
        };
      }
    });
    return result;
  }
  /**
   * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
   */


  function receivedHeartbeats(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$imOnline;

      return (_api$query$imOnline = api.query.imOnline) !== null && _api$query$imOnline !== void 0 && _api$query$imOnline.receivedHeartbeats ? api.derive.staking.overview().pipe(switchMap(({
        currentIndex,
        validators
      }) => combineLatest([of({}), of(validators), api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])), api.query.imOnline.authoredBlocks.multi(validators.map(address => [currentIndex, address]))])), map(mapResult)) : of({});
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var imOnline = /*#__PURE__*/Object.freeze({
    __proto__: null,
    receivedHeartbeats: receivedHeartbeats
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function didUpdateToBool(didUpdate, id) {
    return didUpdate.isSome ? didUpdate.unwrap().some(paraId => paraId.eq(id)) : false;
  }

  function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$d(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function parseActive(id, active) {
    const found = active.find(([paraId]) => paraId === id);

    if (found && found[1].isSome) {
      const [collatorId, retriable] = found[1].unwrap();
      return _objectSpread$d({
        collatorId
      }, retriable.isWithRetries ? {
        isRetriable: true,
        retries: retriable.asWithRetries.toNumber()
      } : {
        isRetriable: false,
        retries: 0
      });
    }

    return null;
  }

  function parseCollators(id, collatorQueue) {
    return collatorQueue.map(queue => {
      const found = queue.find(([paraId]) => paraId === id);
      return found ? found[1] : null;
    });
  }

  function parse$2(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
    if (info.isNone) {
      return null;
    }

    return {
      active: parseActive(id, active),
      didUpdate: didUpdateToBool(didUpdate, id),
      heads,
      id,
      info: _objectSpread$d({
        id
      }, info.unwrap()),
      pendingSwapId: pendingSwap.unwrapOr(null),
      relayDispatchQueue,
      retryCollators: parseCollators(id, retryQueue),
      selectedCollators: parseCollators(id, selectedThreads)
    };
  }

  function info$2(instanceId, api) {
    return memo(instanceId, id => api.query.registrar && api.query.parachains ? api.queryMulti([api.query.registrar.active, api.query.registrar.retryQueue, api.query.registrar.selectedThreads, api.query.parachains.didUpdate, [api.query.registrar.paras, id], [api.query.registrar.pendingSwap, id], [api.query.parachains.heads, id], [api.query.parachains.relayDispatchQueue, id]]).pipe(map(result => parse$2(api.registry.createType('ParaId', id), result))) : of(null));
  }

  function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function parse$1([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {
    return ids.map((id, index) => ({
      didUpdate: didUpdateToBool(didUpdate, id),
      id,
      info: _objectSpread$c({
        id
      }, infos[index].unwrapOr(null)),
      pendingSwapId: pendingSwaps[index].unwrapOr(null),
      relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
    }));
  }

  function overview$1(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$registrar;

      return (_api$query$registrar = api.query.registrar) !== null && _api$query$registrar !== void 0 && _api$query$registrar.parachains && api.query.parachains ? api.query.registrar.parachains().pipe(switchMap(paraIds => combineLatest([of(paraIds), api.query.parachains.didUpdate(), api.query.registrar.paras.multi(paraIds), api.query.registrar.pendingSwap.multi(paraIds), api.query.parachains.relayDispatchQueueSize.multi(paraIds)])), map(parse$1)) : of([]);
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var parachains = /*#__PURE__*/Object.freeze({
    __proto__: null,
    info: info$2,
    overview: overview$1
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function eraLength(instanceId, api) {
    return memo(instanceId, () => api.derive.session.info().pipe(map(info => info.eraLength)));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function eraProgress(instanceId, api) {
    return memo(instanceId, () => api.derive.session.progress().pipe(map(info => info.eraProgress)));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function parse([activeEra, activeEraStart, currentEra, currentIndex, validatorCount]) {
    return {
      activeEra,
      activeEraStart,
      currentEra,
      currentIndex,
      validatorCount
    };
  } // query based on latest


  function query$1(api) {
    return api.queryMulti([api.query.staking.activeEra, api.query.staking.currentEra, api.query.session.currentIndex, api.query.staking.validatorCount]).pipe(map(([activeOpt, currentEra, currentIndex, validatorCount]) => {
      const {
        index,
        start
      } = activeOpt.unwrapOrDefault();
      return parse([index, start, currentEra.unwrapOrDefault(), currentIndex, validatorCount]);
    }));
  } // empty set when none is available


  function empty(api) {
    return of(parse([api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('SessionIndex', 1), api.registry.createType('u32')]));
  }

  function indexes(instanceId, api) {
    return memo(instanceId, () => api.query.session && api.query.staking ? query$1(api) : empty(api));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function createDerive$1(api, [[hasBabe, epochDuration, sessionsPerEra], {
    activeEra,
    activeEraStart,
    currentEra,
    currentIndex,
    validatorCount
  }]) {
    return {
      activeEra,
      activeEraStart,
      currentEra,
      currentIndex,
      eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(epochDuration)),
      isEpoch: hasBabe,
      sessionLength: epochDuration,
      sessionsPerEra,
      validatorCount
    };
  }

  function queryAura$1(api) {
    return api.derive.session.indexes().pipe(map(indexes => {
      var _api$consts$staking;

      return createDerive$1(api, [[false, api.registry.createType('u64', 1), // we may have aura without staking (permissioned)
      ((_api$consts$staking = api.consts.staking) === null || _api$consts$staking === void 0 ? void 0 : _api$consts$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1)], indexes]);
    }));
  }

  function queryBabe$1(api) {
    return api.derive.session.indexes().pipe(map(indexes => {
      var _api$consts$staking2;

      return createDerive$1(api, [[true, api.consts.babe.epochDuration, // we may have babe without staking (permissioned)
      ((_api$consts$staking2 = api.consts.staking) === null || _api$consts$staking2 === void 0 ? void 0 : _api$consts$staking2.sessionsPerEra) || api.registry.createType('SessionIndex', 1)], indexes]);
    }));
  }
  /**
   * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
   */


  function info$1(instanceId, api) {
    return memo(instanceId, () => api.consts.babe ? queryBabe$1(api) : queryAura$1(api));
  }

  function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
    const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
    const sessionProgress = currentSlot.sub(epochStartSlot);
    const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
    return _objectSpread$b(_objectSpread$b({}, info), {}, {
      eraProgress: api.registry.createType('BlockNumber', eraProgress),
      sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
    });
  }

  function queryAura(api) {
    return api.derive.session.info().pipe(map(info => _objectSpread$b(_objectSpread$b({}, info), {}, {
      eraProgress: api.registry.createType('BlockNumber'),
      sessionProgress: api.registry.createType('BlockNumber')
    })));
  }

  function queryBabe(api) {
    return api.derive.session.info().pipe(switchMap(info => combineLatest([of(info), // we may have no staking, but have babe (permissioned)
    api.query.staking ? api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot, [api.query.staking.erasStartSessionIndex, info.activeEra]]) : api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot])])), map(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]]));
  }
  /**
   * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
   */


  function progress(instanceId, api) {
    return memo(instanceId, () => api.consts.babe ? queryBabe(api).pipe(map(([info, slots]) => createDerive(api, info, slots))) : queryAura(api));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function sessionProgress(instanceId, api) {
    return memo(instanceId, () => api.derive.session.progress().pipe(map(info => info.sessionProgress)));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var session = /*#__PURE__*/Object.freeze({
    __proto__: null,
    eraLength: eraLength,
    eraProgress: eraProgress,
    indexes: indexes,
    info: info$1,
    progress: progress,
    sessionProgress: sessionProgress
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  /**
   * @description Get the candidate info for a society
   */
  function candidates(instanceId, api) {
    return memo(instanceId, () => api.query.society.candidates().pipe(switchMap(candidates => combineLatest([of(candidates), api.query.society.suspendedCandidates.multi(candidates.map(({
      who
    }) => who))])), map(([candidates, suspended]) => candidates.map(({
      kind,
      value,
      who
    }, index) => ({
      accountId: who,
      isSuspended: suspended[index].isSome,
      kind,
      value
    })))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  /**
   * @description Get the overall info for a society
   */
  function info(instanceId, api) {
    return memo(instanceId, () => api.queryMulti([api.query.society.bids, api.query.society.defender, api.query.society.founder, api.query.society.head, api.query.society.maxMembers, api.query.society.pot]).pipe(map(([bids, defender, founder, head, maxMembers, pot]) => ({
      bids,
      defender: defender.unwrapOr(undefined),
      founder: founder.unwrapOr(undefined),
      hasDefender: defender.isSome && head.isSome && !head.eq(defender) || false,
      head: head.unwrapOr(undefined),
      maxMembers,
      pot
    }))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  /**
   * @description Get the member info for a society
   */
  function member(instanceId, api) {
    return memo(instanceId, accountId => api.queryMulti([[api.query.society.payouts, accountId], [api.query.society.strikes, accountId], [api.query.society.defenderVotes, accountId], [api.query.society.suspendedMembers, accountId], [api.query.society.vouching, accountId]]).pipe(map(([payouts, strikes, defenderVotes, suspended, vouching]) => ({
      accountId,
      isSuspended: suspended.isTrue,
      payouts,
      strikes,
      vote: defenderVotes.unwrapOr(undefined),
      vouching: vouching.unwrapOr(undefined)
    }))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @description Get the member info for a society
   */

  function members(instanceId, api) {
    return memo(instanceId, () => api.query.society.members().pipe(switchMap(members => combineLatest(members.map(accountId => api.derive.society.member(accountId))))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var society = /*#__PURE__*/Object.freeze({
    __proto__: null,
    candidates: candidates,
    info: info,
    member: member,
    members: members
  });

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const QUERY_OPTS = {
    withDestination: true,
    withLedger: true,
    withNominations: true,
    withPrefs: true
  };

  function groupByEra(list) {
    return list.reduce((map, {
      era,
      value
    }) => {
      const key = era.toString();
      map[key] = (map[key] || BN_ZERO).add(value.unwrap());
      return map;
    }, {});
  }

  function calculateUnlocking(api, stakingLedger, sessionInfo) {
    const results = Object.entries(groupByEra(((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).filter(({
      era
    }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
      remainingEras: new bn(eraString).isub(sessionInfo.activeEra),
      value: api.registry.createType('Balance', value)
    }));
    return results.length ? results : undefined;
  }

  function redeemableSum(api, stakingLedger, sessionInfo) {
    return api.registry.createType('Balance', ((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).reduce((total, {
      era,
      value
    }) => {
      return sessionInfo.activeEra.gte(era.unwrap()) ? total.iadd(value.unwrap()) : total;
    }, new bn(0)));
  }

  function parseResult$1(api, sessionInfo, keys, query) {
    return _objectSpread$a(_objectSpread$a(_objectSpread$a({}, keys), query), {}, {
      redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
      unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
    });
  }
  /**
   * @description From a list of stashes, fill in all the relevant staking details
   */


  function accounts(instanceId, api) {
    return memo(instanceId, accountIds => api.derive.session.info().pipe(switchMap(sessionInfo => combineLatest([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, QUERY_OPTS)]).pipe(map(([keys, queries]) => queries.map((query, index) => parseResult$1(api, sessionInfo, keys[index], query)))))));
  }
  /**
   * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
   */

  function account(instanceId, api) {
    return memo(instanceId, accountId => api.derive.staking.accounts([accountId]).pipe(map(([first]) => first)));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @description Retrieve the staking overview, including elected and points earned
   */

  function currentPoints(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({
      activeEra
    }) => api.query.staking.erasRewardPoints(activeEra))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const CACHE_KEY$4 = 'eraExposure';

  function mapStakers(era, stakers) {
    const nominators = {};
    const validators = {};
    stakers.forEach(([key, exposure]) => {
      const validatorId = key.args[1].toString();
      validators[validatorId] = exposure;
      exposure.others.forEach(({
        who
      }, validatorIndex) => {
        const nominatorId = who.toString();
        nominators[nominatorId] = nominators[nominatorId] || [];
        nominators[nominatorId].push({
          validatorId,
          validatorIndex
        });
      });
    });
    return {
      era,
      nominators,
      validators
    };
  }

  function _eraExposure(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const cacheKey = `${CACHE_KEY$4}-${era.toString()}`;
      const cached = withActive ? undefined : deriveCache.get(cacheKey);
      return cached ? of(cached) : api.query.staking.erasStakersClipped.entries(era).pipe(map(stakers => {
        const value = mapStakers(era, stakers);
        !withActive && deriveCache.set(cacheKey, value);
        return value;
      }));
    });
  }
  function eraExposure(instanceId, api) {
    return memo(instanceId, era => api.derive.staking._eraExposure(era, true));
  }
  function _erasExposure(instanceId, api) {
    return memo(instanceId, (eras, withActive) => eras.length ? combineLatest(eras.map(era => api.derive.staking._eraExposure(era, withActive))) : of([]));
  }
  function erasExposure(instanceId, api) {
    return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasExposure(eras, withActive))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function erasHistoric(instanceId, api) {
    return memo(instanceId, withActive => api.queryMulti([api.query.staking.activeEra, api.query.staking.historyDepth]).pipe(map(([activeEraOpt, historyDepth]) => {
      const result = [];
      const max = historyDepth.toNumber();
      const activeEra = activeEraOpt.unwrapOrDefault().index;
      let lastEra = activeEra;

      while (lastEra.gten(0) && result.length < max) {
        if (lastEra !== activeEra || withActive === true) {
          result.push(api.registry.createType('EraIndex', lastEra));
        }

        lastEra = lastEra.subn(1);
      } // go from oldest to newest


      return result.reverse();
    })));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function filterEras(eras, list) {
    return eras.filter(era => !list.some(entry => era.eq(entry.era)));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const CACHE_KEY$3 = 'eraPoints';

  function mapValidators({
    individual
  }) {
    return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO)).reduce((result, [validatorId, points]) => {
      result[validatorId.toString()] = points;
      return result;
    }, {});
  }

  function mapPoints(eras, points) {
    return eras.map((era, index) => ({
      era,
      eraPoints: points[index].total,
      validators: mapValidators(points[index])
    }));
  }

  function _erasPoints(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }

      const cached = withActive ? [] : eras.map(era => deriveCache.get(`${CACHE_KEY$3}-${era.toString()}`)).filter(value => !!value);
      const remaining = filterEras(eras, cached);
      return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map(points => {
        const query = mapPoints(remaining, points);
        !withActive && query.forEach(q => deriveCache.set(`${CACHE_KEY$3}-${q.era.toString()}`, q));
        return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));
      }));
    });
  }
  function erasPoints(instanceId, api) {
    return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasPoints(eras, withActive))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const CACHE_KEY$2 = 'eraPrefs';

  function mapPrefs(era, all) {
    const validators = {};
    all.forEach(([key, prefs]) => {
      validators[key.args[1].toString()] = prefs;
    });
    return {
      era,
      validators
    };
  }

  function _eraPrefs(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const cacheKey = `${CACHE_KEY$2}-${era.toString()}`;
      const cached = withActive ? undefined : deriveCache.get(cacheKey);
      return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map(prefs => {
        const value = mapPrefs(era, prefs);
        !withActive && deriveCache.set(cacheKey, value);
        return value;
      }));
    });
  }
  function eraPrefs(instanceId, api) {
    return memo(instanceId, era => api.derive.staking._eraPrefs(era, true));
  }
  function _erasPrefs(instanceId, api) {
    return memo(instanceId, (eras, withActive) => eras.length ? combineLatest(eras.map(era => api.derive.staking._eraPrefs(era, withActive))) : of([]));
  }
  function erasPrefs(instanceId, api) {
    return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasPrefs(eras, withActive))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const CACHE_KEY$1 = 'eraRewards';

  function mapRewards(eras, optRewards) {
    return eras.map((era, index) => ({
      era,
      eraReward: optRewards[index].unwrapOrDefault()
    }));
  }

  function _erasRewards(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }

      const cached = withActive ? [] : eras.map(era => deriveCache.get(`${CACHE_KEY$1}-${era.toString()}`)).filter(value => !!value);
      const remaining = filterEras(eras, cached);

      if (!remaining.length) {
        return of(cached);
      }

      return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(optRewards => {
        const query = mapRewards(remaining, optRewards);
        !withActive && query.forEach(q => deriveCache.set(`${CACHE_KEY$1}-${q.era.toString()}`, q));
        return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));
      }));
    });
  }
  function erasRewards(instanceId, api) {
    return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasRewards(eras, withActive))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const CACHE_KEY = 'eraSlashes';

  function mapSlashes(era, noms, vals) {
    const nominators = {};
    const validators = {};
    noms.forEach(([key, optBalance]) => {
      nominators[key.args[1].toString()] = optBalance.unwrap();
    });
    vals.forEach(([key, optRes]) => {
      validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
    });
    return {
      era,
      nominators,
      validators
    };
  }

  function _eraSlashes(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const cacheKey = `${CACHE_KEY}-${era.toString()}`;
      const cached = withActive ? undefined : deriveCache.get(cacheKey);
      return cached ? of(cached) : combineLatest([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe(map(([noms, vals]) => {
        const value = mapSlashes(era, noms, vals);
        !withActive && deriveCache.set(cacheKey, value);
        return value;
      }));
    });
  }
  function eraSlashes(instanceId, api) {
    return memo(instanceId, era => api.derive.staking._eraSlashes(era, true));
  }
  function _erasSlashes(instanceId, api) {
    return memo(instanceId, (eras, withActive) => eras.length ? combineLatest(eras.map(era => api.derive.staking._eraSlashes(era, withActive))) : of([]));
  }
  function erasSlashes(instanceId, api) {
    return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasSlashes(eras, withActive))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const DEFAULT_FLAGS$1 = {
    withController: true,
    withExposure: true,
    withPrefs: true
  };

  function combineAccounts(nextElected, validators) {
    return arrayFlatten([nextElected, validators.filter(v => !nextElected.find(n => n.eq(v)))]);
  }

  function electedInfo(instanceId, api) {
    return memo(instanceId, (flags = DEFAULT_FLAGS$1) => api.derive.staking.validators().pipe(switchMap(({
      nextElected,
      validators
    }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe(map(info => ({
      info,
      nextElected,
      validators
    }))))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function extractsIds(stashId, queuedKeys, nextKeys) {
    const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
    const nextSessionIds = nextKeys.unwrapOr([]);
    return {
      nextSessionIds,
      sessionIds
    };
  }

  function keys$1(instanceId, api) {
    return memo(instanceId, stashId => api.derive.staking.keysMulti([stashId]).pipe(map(([first]) => first)));
  }
  function keysMulti(instanceId, api) {
    return memo(instanceId, stashIds => stashIds.length ? api.query.session.queuedKeys().pipe(switchMap(queuedKeys => {
      var _api$consts$session;

      return combineLatest([of(queuedKeys), (_api$consts$session = api.consts.session) !== null && _api$consts$session !== void 0 && _api$consts$session.dedupKeyPrefix ? api.query.session.nextKeys.multi(stashIds.map(stashId => [api.consts.session.dedupKeyPrefix, stashId])) : api.query.session.nextKeys.multi(stashIds)]);
    }), map(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : of([]));
  }

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  /**
   * @description Retrieve the staking overview, including elected and points earned
   */

  function overview(instanceId, api) {
    return memo(instanceId, () => combineLatest([api.derive.session.indexes(), api.derive.staking.validators()]).pipe(map(([indexes, {
      nextElected,
      validators
    }]) => _objectSpread$9(_objectSpread$9({}, indexes), {}, {
      nextElected,
      validators
    }))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function _ownExposures(instanceId, api) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return memo(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(era => [api.query.staking.erasStakersClipped, [era, accountId]]), ...eras.map(era => [api.query.staking.erasStakers, [era, accountId]])]).pipe(map(all => eras.map((era, index) => ({
      clipped: all[index],
      era,
      exposure: all[eras.length + index]
    })))) : of([]));
  }
  function ownExposure(instanceId, api) {
    return memo(instanceId, (accountId, era) => api.derive.staking._ownExposures(accountId, [era], true).pipe(map(([first]) => first)));
  }
  function ownExposures(instanceId, api) {
    return memo(instanceId, (accountId, withActive = false) => {
      return api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._ownExposures(accountId, eras, withActive)));
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function _ownSlashes(instanceId, api) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return memo(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(era => [api.query.staking.validatorSlashInEra, [era, accountId]]), ...eras.map(era => [api.query.staking.nominatorSlashInEra, [era, accountId]])]).pipe(map(values => eras.map((era, index) => ({
      era,
      total: values[index].isSome ? values[index].unwrap()[1] : values[index + eras.length].unwrapOrDefault()
    })))) : of([]));
  }
  function ownSlash(instanceId, api) {
    return memo(instanceId, (accountId, era) => api.derive.staking._ownSlashes(accountId, [era], true).pipe(map(([first]) => first)));
  }
  function ownSlashes(instanceId, api) {
    return memo(instanceId, (accountId, withActive = false) => {
      return api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._ownSlashes(accountId, eras, withActive)));
    });
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
    return {
      accountId: stashId,
      controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
      exposure,
      nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
      rewardDestination,
      stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
      stashId,
      validatorPrefs
    };
  }

  function getLedgers(api, optIds, {
    withLedger = false
  }) {
    const ids = optIds.filter(opt => withLedger && !!opt && opt.isSome).map(opt => opt.unwrap());
    const emptyLed = api.registry.createType('Option<StakingLedger>');
    return (ids.length ? api.query.staking.ledger.multi(ids) : of([])).pipe(map(optLedgers => {
      let offset = -1;
      return optIds.map(opt => opt && opt.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
    }));
  }

  function getStashInfo(api, stashIds, activeEra, {
    withController,
    withDestination,
    withExposure,
    withLedger,
    withNominations,
    withPrefs
  }) {
    const emptyNoms = api.registry.createType('Option<Nominations>');
    const emptyRewa = api.registry.createType('RewardDestination');
    const emptyExpo = api.registry.createType('Exposure');
    const emptyPrefs = api.registry.createType('ValidatorPrefs');
    return combineLatest([withController || withLedger ? api.query.staking.bonded.multi(stashIds) : of(stashIds.map(() => null)), withNominations ? api.query.staking.nominators.multi(stashIds) : of(stashIds.map(() => emptyNoms)), withDestination ? api.query.staking.payee.multi(stashIds) : of(stashIds.map(() => emptyRewa)), withPrefs ? api.query.staking.validators.multi(stashIds) : of(stashIds.map(() => emptyPrefs)), withExposure ? api.query.staking.erasStakers.multi(stashIds.map(stashId => [activeEra, stashId])) : of(stashIds.map(() => emptyExpo))]);
  }

  function getBatch(api, activeEra, stashIds, flags) {
    return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(map(stakingLedgerOpts => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
  } //

  /**
   * @description From a stash, retrieve the controllerId and all relevant details
   */


  function query(instanceId, api) {
    return memo(instanceId, (accountId, flags) => api.derive.staking.queryMulti([accountId], flags).pipe(map(([first]) => first)));
  }
  function queryMulti(instanceId, api) {
    return memo(instanceId, (accountIds, flags) => accountIds.length ? api.derive.session.indexes().pipe(switchMap(({
      activeEra
    }) => {
      const stashIds = accountIds.map(accountId => api.registry.createType('AccountId', accountId));
      return getBatch(api, activeEra, stashIds, flags);
    })) : of([]));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function _stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive) => {
      const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());
      return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => stakerIds.map(stakerId => exposures.map(({
        era,
        nominators: allNominators,
        validators: allValidators
      }) => {
        const isValidator = !!allValidators[stakerId];
        const validators = {};
        const nominating = allNominators[stakerId] || [];

        if (isValidator) {
          validators[stakerId] = allValidators[stakerId];
        } else if (nominating) {
          nominating.forEach(({
            validatorId
          }) => {
            validators[validatorId] = allValidators[validatorId];
          });
        }

        return {
          era,
          isEmpty: !Object.keys(validators).length,
          isValidator,
          nominating,
          validators
        };
      }))));
    });
  }
  function stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
  }
  function stakerExposure(instanceId, api) {
    return memo(instanceId, (accountId, withActive = false) => api.derive.staking.stakerExposures([accountId, withActive]).pipe(map(([first]) => first)));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function _stakerPoints(instanceId, api) {
    return memo(instanceId, (accountId, eras, withActive) => {
      const stakerId = api.registry.createType('AccountId', accountId).toString();
      return api.derive.staking._erasPoints(eras, withActive).pipe(map(points => points.map(({
        era,
        eraPoints,
        validators
      }) => ({
        era,
        eraPoints,
        points: validators[stakerId] || api.registry.createType('RewardPoint')
      }))));
    });
  }
  function stakerPoints(instanceId, api) {
    return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerPoints(accountId, eras, withActive))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function _stakerPrefs(instanceId, api) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return memo(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map(era => [era, accountId])).pipe(map(all => all.map((validatorPrefs, index) => ({
      era: eras[index],
      validatorPrefs
    })))));
  }
  function stakerPrefs(instanceId, api) {
    return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerPrefs(accountId, eras, withActive))));
  }

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
    return exposures.map(({
      era,
      isEmpty,
      isValidator,
      nominating,
      validators: eraValidators
    }) => {
      const {
        eraPoints,
        validators: allValPoints
      } = erasPoints.find(p => p.era.eq(era)) || {
        eraPoints: BN_ZERO,
        validators: {}
      };
      const {
        eraReward
      } = erasRewards.find(r => r.era.eq(era)) || {
        eraReward: api.registry.createType('Balance')
      };
      const {
        validators: allValPrefs
      } = erasPrefs.find(p => p.era.eq(era)) || {
        validators: {}
      };
      const validators = {};
      const stakerId = stashId.toString();
      Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
        var _allValPrefs$validato;

        const valPoints = allValPoints[validatorId] || BN_ZERO;
        const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || BN_ZERO;
        const expTotal = exposure.total.unwrap();
        let avail = BN_ZERO;
        let value;

        if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
          avail = eraReward.mul(valPoints).div(eraPoints);
          const valCut = valComm.mul(avail).div(BN_BILLION);
          let staked;

          if (validatorId === stakerId) {
            staked = exposure.own.unwrap();
          } else {
            const stakerExp = exposure.others.find(({
              who
            }) => who.eq(stakerId));
            staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;
          }

          value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);
        }

        validators[validatorId] = {
          total: api.registry.createType('Balance', avail),
          value: api.registry.createType('Balance', value)
        };
      });
      return {
        era,
        eraReward,
        isEmpty,
        isValidator,
        nominating,
        validators
      };
    });
  }

  function allUniqValidators(rewards) {
    return rewards.reduce(([all, perStash], rewards) => {
      const uniq = [];
      perStash.push(uniq);
      rewards.forEach(({
        validators
      }) => Object.keys(validators).forEach(validatorId => {
        if (!uniq.includes(validatorId)) {
          uniq.push(validatorId);

          if (!all.includes(validatorId)) {
            all.push(validatorId);
          }
        }
      }));
      return [all, perStash];
    }, [[], []]);
  }

  function removeClaimed(validators, queryValidators, reward) {
    const rm = [];
    Object.keys(reward.validators).forEach(validatorId => {
      const index = validators.indexOf(validatorId);

      if (index !== -1) {
        const valLedger = queryValidators[index].stakingLedger;

        if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(era => reward.era.eq(era))) {
          rm.push(validatorId);
        }
      }
    });
    rm.forEach(validatorId => {
      delete reward.validators[validatorId];
    });
  }

  function filterRewards(eras, valInfo, {
    rewards,
    stakingLedger
  }) {
    const filter = eras.filter(era => !stakingLedger.claimedRewards.some(e => e.eq(era)));
    const validators = valInfo.map(([v]) => v);
    const queryValidators = valInfo.map(([, q]) => q);
    return rewards.filter(({
      isEmpty
    }) => !isEmpty).filter(reward => {
      if (!filter.some(filter => reward.era.eq(filter))) {
        return false;
      }

      reward.isStakerPayout = true;
      removeClaimed(validators, queryValidators, reward);
      return true;
    }).filter(({
      validators
    }) => Object.keys(validators).length !== 0).map(reward => _objectSpread$8(_objectSpread$8({}, reward), {}, {
      nominators: reward.nominating.filter(n => reward.validators[n.validatorId])
    }));
  }

  function _stakerRewardsEras(instanceId, api) {
    return memo(instanceId, (eras, withActive) => combineLatest([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));
  }
  function _stakerRewards(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive) => combineLatest([api.derive.staking.queryMulti(accountIds, {
      withLedger: true
    }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe(switchMap(([queries, exposures, erasResult]) => {
      const allRewards = queries.map(({
        stakingLedger,
        stashId
      }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));

      if (withActive) {
        return of(allRewards);
      }

      const [allValidators, stashValidators] = allUniqValidators(allRewards);
      return api.derive.staking.queryMulti(allValidators, {
        withLedger: true
      }).pipe(map(queriedVals => {
        return queries.map(({
          stakingLedger
        }, index) => {
          const rewards = allRewards[index];
          const ownValidators = stashValidators[index].map(validatorId => [validatorId, queriedVals.find(q => q.accountId.eq(validatorId))]);
          return filterRewards(eras, ownValidators, {
            rewards,
            stakingLedger
          });
        });
      }));
    })));
  }
  function stakerRewards(instanceId, api) {
    return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerRewards([accountId], eras, withActive)), map(([first]) => first)));
  }
  function stakerRewardsMultiEras(instanceId, api) {
    return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));
  }
  function stakerRewardsMulti(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function _stakerSlashes(instanceId, api) {
    return memo(instanceId, (accountId, eras, withActive) => {
      const stakerId = api.registry.createType('AccountId', accountId).toString();
      return api.derive.staking._erasSlashes(eras, withActive).pipe(map(slashes => slashes.map(({
        era,
        nominators,
        validators
      }) => ({
        era,
        total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
      }))));
    });
  }
  function stakerSlashes(instanceId, api) {
    return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerSlashes(accountId, eras, withActive))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  /**
   * @description Retrieve the list of all validator stashes
   */

  function stashes(instanceId, api) {
    return memo(instanceId, () => api.query.staking.validators.keys().pipe(map(keys => keys.map(({
      args: [validatorId]
    }) => validatorId).filter(a => a))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function nextElected(instanceId, api) {
    return memo(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe( // only populate for next era in the last session, so track both here - entries are not
    // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
    switchMap(({
      currentEra
    }) => api.query.staking.erasStakers.keys(currentEra)), map(keys => keys.map(({
      args: [, accountId]
    }) => accountId))) : api.query.staking.currentElected());
  }
  /**
   * @description Retrieve latest list of validators
   */

  function validators(instanceId, api) {
    return memo(instanceId, () => // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
    // in all actual real-world deployed chains, it does create some confusion for limited template chains
    combineLatest([api.query.session ? api.query.session.validators() : of([]), api.query.staking ? api.derive.staking.nextElected() : of([])]).pipe(map(([validators, nextElected]) => ({
      nextElected: nextElected.length ? nextElected : validators,
      validators
    }))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const DEFAULT_FLAGS = {
    withController: true,
    withPrefs: true
  };
  function waitingInfo(instanceId, api) {
    return memo(instanceId, (flags = DEFAULT_FLAGS) => combineLatest([api.derive.staking.validators(), api.derive.staking.stashes()]).pipe(switchMap(([{
      nextElected
    }, stashes]) => {
      const elected = nextElected.map(a => a.toString());
      const waiting = stashes.filter(v => !elected.includes(v.toString()));
      return api.derive.staking.queryMulti(waiting, flags).pipe(map(info => ({
        info,
        waiting
      })));
    })));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var staking = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accounts: accounts,
    account: account,
    currentPoints: currentPoints,
    _eraExposure: _eraExposure,
    eraExposure: eraExposure,
    _erasExposure: _erasExposure,
    erasExposure: erasExposure,
    erasHistoric: erasHistoric,
    _erasPoints: _erasPoints,
    erasPoints: erasPoints,
    _eraPrefs: _eraPrefs,
    eraPrefs: eraPrefs,
    _erasPrefs: _erasPrefs,
    erasPrefs: erasPrefs,
    _erasRewards: _erasRewards,
    erasRewards: erasRewards,
    _eraSlashes: _eraSlashes,
    eraSlashes: eraSlashes,
    _erasSlashes: _erasSlashes,
    erasSlashes: erasSlashes,
    electedInfo: electedInfo,
    keys: keys$1,
    keysMulti: keysMulti,
    overview: overview,
    _ownExposures: _ownExposures,
    ownExposure: ownExposure,
    ownExposures: ownExposures,
    _ownSlashes: _ownSlashes,
    ownSlash: ownSlash,
    ownSlashes: ownSlashes,
    query: query,
    queryMulti: queryMulti,
    _stakerExposures: _stakerExposures,
    stakerExposures: stakerExposures,
    stakerExposure: stakerExposure,
    _stakerPoints: _stakerPoints,
    stakerPoints: stakerPoints,
    _stakerPrefs: _stakerPrefs,
    stakerPrefs: stakerPrefs,
    _stakerRewardsEras: _stakerRewardsEras,
    _stakerRewards: _stakerRewards,
    stakerRewards: stakerRewards,
    stakerRewardsMultiEras: stakerRewardsMultiEras,
    stakerRewardsMulti: stakerRewardsMulti,
    _stakerSlashes: _stakerSlashes,
    stakerSlashes: stakerSlashes,
    stashes: stashes,
    nextElected: nextElected,
    validators: validators,
    waitingInfo: waitingInfo
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function proposals$1(instanceId, api) {
    return memo(instanceId, proposals$4(instanceId, api, 'technicalCommittee'));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var technicalCommittee = /*#__PURE__*/Object.freeze({
    __proto__: null,
    proposals: proposals$1
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function parseResult(api, {
    allIds,
    allProposals,
    approvalIds,
    councilProposals,
    proposalCount
  }) {
    const approvals = [];
    const proposals = [];
    const councilTreasury = councilProposals.filter(({
      proposal
    }) => api.tx.treasury.approveProposal.is(proposal) || api.tx.treasury.rejectProposal.is(proposal));
    allIds.forEach((id, index) => {
      if (allProposals[index].isSome) {
        const council = councilTreasury.filter(({
          proposal
        }) => id.eq(proposal.args[0])).sort((a, b) => a.proposal.method.localeCompare(b.proposal.method));
        const isApproval = approvalIds.some(approvalId => approvalId.eq(id));
        const derived = {
          council,
          id,
          proposal: allProposals[index].unwrap()
        };

        if (isApproval) {
          approvals.push(derived);
        } else {
          proposals.push(derived);
        }
      }
    });
    return {
      approvals,
      proposalCount,
      proposals
    };
  }

  function retrieveProposals(api, proposalCount, approvalIds) {
    const proposalIds = [];
    const count = proposalCount.toNumber();

    for (let index = 0; index < count; index++) {
      if (!approvalIds.some(id => id.eqn(index))) {
        proposalIds.push(api.registry.createType('ProposalIndex', index));
      }
    }

    const allIds = [...proposalIds, ...approvalIds];
    return combineLatest([api.query.treasury.proposals.multi(allIds), api.derive.council.proposals()]).pipe(map(([allProposals, councilProposals]) => parseResult(api, {
      allIds,
      allProposals,
      approvalIds,
      councilProposals,
      proposalCount
    })));
  }
  /**
   * @description Retrieve all active and approved treasury proposals, along with their info
   */


  function proposals(instanceId, api) {
    return memo(instanceId, () => api.query.treasury ? combineLatest([api.query.treasury.proposalCount(), api.query.treasury.approvals()]).pipe(switchMap(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds))) : of({
      approvals: [],
      proposalCount: api.registry.createType('ProposalIndex'),
      proposals: []
    }));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var treasury = /*#__PURE__*/Object.freeze({
    __proto__: null,
    proposals: proposals
  });

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  function events(instanceId, api) {
    return memo(instanceId, at => combineLatest([api.query.system.events.at(at), api.rpc.chain.getBlock(at)]).pipe(map(([events, block]) => ({
      block,
      events
    }))));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors
  const FALLBACK_MAX_HASH_COUNT = 250; // default here to 5 min eras, adjusted based on the actual blocktime

  const FALLBACK_PERIOD = new bn(6 * 1000);
  const MAX_FINALITY_LAG = new bn(5);
  const MORTAL_PERIOD = new bn(5 * 60 * 1000);

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function latestNonce(api, address) {
    return api.derive.balances.account(address).pipe(map(({
      accountNonce
    }) => accountNonce));
  }

  function nextNonce(api, address) {
    var _api$rpc$system;

    return (_api$rpc$system = api.rpc.system) !== null && _api$rpc$system !== void 0 && _api$rpc$system.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
  }

  function signingHeader(api) {
    return combineLatest([api.rpc.chain.getHeader(), api.rpc.chain.getFinalizedHead().pipe(switchMap(hash => api.rpc.chain.getHeader(hash)))]).pipe(map(([current, finalized]) => // determine the hash to use, current when lag > max, else finalized
    current.number.unwrap().sub(finalized.number.unwrap()).gt(MAX_FINALITY_LAG) ? current : finalized));
  }

  function signingInfo(_instanceId, api) {
    // no memo, we want to do this fresh on each run
    return (address, nonce, era) => combineLatest([// retrieve nonce if none was specified
    isUndefined(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType('Index', nonce)), // if no era (create) or era > 0 (mortal), do block retrieval
    isUndefined(era) || isNumber(era) && era > 0 ? signingHeader(api) : of(null)]).pipe(map(([nonce, header]) => {
      var _api$consts$system, _api$consts$system$bl, _api$consts$babe, _api$consts$timestamp;

      return {
        header,
        mortalLength: Math.min(((_api$consts$system = api.consts.system) === null || _api$consts$system === void 0 ? void 0 : (_api$consts$system$bl = _api$consts$system.blockHashCount) === null || _api$consts$system$bl === void 0 ? void 0 : _api$consts$system$bl.toNumber()) || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(((_api$consts$babe = api.consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.expectedBlockTime) || ((_api$consts$timestamp = api.consts.timestamp) === null || _api$consts$timestamp === void 0 ? void 0 : _api$consts$timestamp.minimumPeriod.muln(2)) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
        nonce
      };
    }));
  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  var tx = /*#__PURE__*/Object.freeze({
    __proto__: null,
    events: events,
    signingInfo: signingInfo
  });

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const derive = {
    accounts: accounts$1,
    balances,
    bounties,
    chain,
    contracts,
    council,
    democracy,
    elections,
    imOnline,
    parachains,
    session,
    society,
    staking,
    technicalCommittee,
    treasury,
    tx
  };
  // Enable derive only if some of these modules are available
  const deriveAvail = {
    contracts: ['contracts'],
    council: ['council'],
    democracy: ['democracy'],
    elections: ['electionsPhragmen', 'elections'],
    imOnline: ['imOnline'],
    parachains: ['parachains', 'registrar'],
    session: ['session'],
    society: ['society'],
    staking: ['staking'],
    technicalCommittee: ['technicalCommittee'],
    treasury: ['treasury']
  };
  /**
   * Returns an object that will inject `api` into all the functions inside
   * `allSections`, and keep the object architecture of `allSections`.
   */

  /** @internal */

  function injectFunctions(instanceId, api, allSections) {
    const queryKeys = Object.keys(api.query);
    return Object.keys(allSections).filter(sectionName => !deriveAvail[sectionName] || deriveAvail[sectionName].some(query => queryKeys.includes(query))).reduce((deriveAcc, sectionName) => {
      const section = allSections[sectionName];
      deriveAcc[sectionName] = Object.keys(section).reduce((sectionAcc, _methodName) => {
        const methodName = _methodName; // Not sure what to do here, casting as any. Though the final types are good
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call

        const method = section[methodName](instanceId, api); // idem
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access

        sectionAcc[methodName] = method;
        return sectionAcc;
      }, {});
      return deriveAcc;
    }, {});
  } // FIXME The return type of this function should be {...ExactDerive, ...DeriveCustom}
  // For now we just drop the custom derive typings

  /** @internal */


  function decorateDerive(instanceId, api, custom = {}) {
    return _objectSpread$7(_objectSpread$7({}, injectFunctions(instanceId, api, derive)), injectFunctions(instanceId, api, custom));
  }

  // Copyright 2017-2021 @polkadot/rpc-core authors & contributors
  detectPackage(packageInfo$5, typeof __dirname !== 'undefined' && __dirname, [packageInfo$6, packageInfo$4, packageInfo$3]);

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const jsonrpc = {};
  Object.keys(definitions).filter(key => Object.keys(definitions[key].rpc || {}).length !== 0).forEach(_section => {
    jsonrpc[_section] = {};
    Object.entries(definitions[_section].rpc).forEach(([method, def]) => {
      const isSubscription = !!def.pubsub;
      const section = def.aliasSection || _section; // allow for section overrides

      if (!jsonrpc[section]) {
        jsonrpc[section] = {};
      }

      jsonrpc[section][method] = _objectSpread$6(_objectSpread$6({}, def), {}, {
        isSubscription,
        jsonrpc: `${section}_${method}`,
        method,
        section
      });
    });
  });

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const l$4 = logger('rpc-core');
  const EMPTY_META = {
    fallback: undefined,
    modifier: {
      isOptional: true
    },
    type: {
      asMap: {
        linked: {
          isTrue: false
        }
      },
      isMap: false
    }
  }; // utility method to create a nicely-formatted error

  /** @internal */

  function logErrorMessage(method, {
    params,
    type
  }, error) {
    const inputs = params.map(({
      isOptional,
      name,
      type
    }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');
    l$4.error(`${method}(${inputs}): ${type}:: ${error.message}`);
  }

  function isTreatAsHex(key) {
    // :code is problematic - it does not have the length attached, which is
    // unlike all other storage entries where it is indeed properly encoded
    return ['0x3a636f6465'].includes(key.toHex());
  }
  /**
   * @name Rpc
   * @summary The API may use a HTTP or WebSockets provider.
   * @description It allows for querying a Polkadot Client Node.
   * WebSockets provider is recommended since HTTP provider only supports basic querying.
   *
   * ```mermaid
   * graph LR;
   *   A[Api] --> |WebSockets| B[WsProvider];
   *   B --> |endpoint| C[ws://127.0.0.1:9944]
   * ```
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Rpc from '@polkadot/rpc-core';
   * import { WsProvider } from '@polkadot/rpc-provider/ws';
   *
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const rpc = new Rpc(provider);
   * ```
   */


  var _instanceId$1 = _classPrivateFieldKey("instanceId");

  var _registryDefault = _classPrivateFieldKey("registryDefault");

  var _getBlockRegistry = _classPrivateFieldKey("getBlockRegistry");

  var _storageCache = _classPrivateFieldKey("storageCache");

  class RpcCore {
    // Ok, this is quite horrible - we really should not be using the ! here, but we are actually assigning
    // these via the createInterfaces inside the constructor. However... this is not quite visible. The reason
    // why we don't do for individual assignments is to allow user-defined RPCs to also be defined

    /**
     * @constructor
     * Default constructor for the Api Object
     * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket
     */
    constructor(instanceId, registry, provider, userRpc = {}) {
      Object.defineProperty(this, _instanceId$1, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _registryDefault, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _getBlockRegistry, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _storageCache, {
        writable: true,
        value: new Map()
      });
      this.mapping = new Map();
      this.provider = void 0;
      this.sections = [];
      this.author = void 0;
      this.babe = void 0;
      this.chain = void 0;
      this.childstate = void 0;
      this.contracts = void 0;
      this.engine = void 0;
      this.eth = void 0;
      this.grandpa = void 0;
      this.net = void 0;
      this.offchain = void 0;
      this.payment = void 0;
      this.rpc = void 0;
      this.state = void 0;
      this.syncstate = void 0;
      this.system = void 0;
      this.web3 = void 0;
      // eslint-disable-next-line @typescript-eslint/unbound-method
      assert$a(provider && isFunction$1(provider.send), 'Expected Provider to API create');
      _classPrivateFieldBase(this, _instanceId$1)[_instanceId$1] = instanceId;
      _classPrivateFieldBase(this, _registryDefault)[_registryDefault] = registry;
      this.provider = provider;
      const sectionNames = Object.keys(jsonrpc); // these are the base keys (i.e. part of jsonrpc)

      this.sections.push(...sectionNames);
      this.addUserInterfaces(userRpc);
    }
    /**
     * @description Returns the connected status of a provider
     */


    get isConnected() {
      return this.provider.isConnected;
    }
    /**
     * @description Manually connect from the attached provider
     */


    connect() {
      return this.provider.connect();
    }
    /**
     * @description Manually disconnect from the attached provider
     */


    disconnect() {
      return this.provider.disconnect();
    }
    /**
     * @description Sets a registry swap (typically from Api)
     */


    setRegistrySwap(registrySwap) {
      _classPrivateFieldBase(this, _getBlockRegistry)[_getBlockRegistry] = registrySwap;
    }

    addUserInterfaces(userRpc) {
      // add any extra user-defined sections
      this.sections.push(...Object.keys(userRpc).filter(key => !this.sections.includes(key))); // decorate the sections with base and user methods

      this.sections.forEach(sectionName => {
        var _ref, _ref2;

        (_ref = this)[_ref2 = sectionName] || (_ref[_ref2] = {});
        const section = this[sectionName];
        Object.entries(_objectSpread$5(_objectSpread$5({}, this._createInterface(sectionName, jsonrpc[sectionName] || {})), this._createInterface(sectionName, userRpc[sectionName] || {}))).forEach(([key, value]) => {
          section[key] || (section[key] = value);
        });
      });
    }

    _createInterface(section, methods) {
      return Object.entries(methods).filter(([method, {
        endpoint
      }]) => !this.mapping.has(endpoint || `${section}_${method}`)).reduce((exposed, [method, {
        endpoint
      }]) => {
        const def = methods[method];
        const isSubscription = !!def.pubsub;
        const jsonrpc = endpoint || `${section}_${method}`;
        this.mapping.set(jsonrpc, _objectSpread$5(_objectSpread$5({}, def), {}, {
          isSubscription,
          jsonrpc,
          method,
          section
        })); // FIXME Remove any here
        // To do so, remove `RpcInterfaceMethod` from './types.ts', and refactor
        // every method inside this class to take:
        // `<S extends keyof RpcInterface, M extends keyof RpcInterface[S]>`
        // Not doing so, because it makes this class a little bit less readable,
        // and leaving it as-is doesn't harm much

        exposed[method] = isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def);
        return exposed;
      }, {});
    }

    _memomize(creator) {
      const memoized = memoize(creator('scale'), {
        getInstanceId: () => _classPrivateFieldBase(this, _instanceId$1)[_instanceId$1]
      });
      memoized.json = creator('json');
      memoized.raw = creator('raw');
      return memoized;
    }

    _createMethodSend(section, method, def) {
      const rpcName = def.endpoint || `${section}_${method}`;
      const hashIndex = def.params.findIndex(({
        isHistoric
      }) => isHistoric);
      const cacheIndex = def.params.findIndex(({
        isCached
      }) => isCached);
      let memoized = null; // execute the RPC call, doing a registry swap for historic as applicable

      const callWithRegistry = async (outputAs, values) => {
        const hash = hashIndex === -1 ? undefined : values[hashIndex];
        const {
          registry
        } = hash && _classPrivateFieldBase(this, _getBlockRegistry)[_getBlockRegistry] ? await _classPrivateFieldBase(this, _getBlockRegistry)[_getBlockRegistry](hash) : {
          registry: _classPrivateFieldBase(this, _registryDefault)[_registryDefault]
        };

        const params = this._formatInputs(registry, def, values);

        const data = await this.provider.send(rpcName, params.map(param => param.toJSON()));
        return outputAs === 'scale' ? this._formatOutput(registry, method, def, params, data) : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', data);
      };

      const creator = outputAs => (...values) => {
        const isDelayed = hashIndex !== -1 && !!values[hashIndex] || cacheIndex !== -1 && !!values[cacheIndex];
        return new Observable(observer => {
          callWithRegistry(outputAs, values).then(value => {
            observer.next(value);
            observer.complete();
          }).catch(error => {
            logErrorMessage(method, def, error);
            observer.error(error);
            observer.complete();
          });
          return () => {
            var _memoized;

            // delete old results from cache
            (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.unmemoize(...values);
          };
        }).pipe(publishReplay(1), // create a Replay(1)
        isDelayed ? refCountDelay() // Unsubscribe after delay
        : refCount());
      };

      memoized = this._memomize(creator);
      return memoized;
    } // create a subscriptor, it subscribes once and resolves with the id as subscribe


    _createSubscriber({
      paramsJson,
      subName,
      subType,
      update
    }, errorHandler) {
      return new Promise((resolve, reject) => {
        this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {
          errorHandler(error);
          reject(error);
        });
      });
    }

    _createMethodSubscribe(section, method, def) {
      const [updateType, subMethod, unsubMethod] = def.pubsub;
      const subName = `${section}_${subMethod}`;
      const unsubName = `${section}_${unsubMethod}`;
      const subType = `${section}_${updateType}`;
      let memoized = null;

      const creator = outputAs => (...values) => {
        return new Observable(observer => {
          // Have at least an empty promise, as used in the unsubscribe
          let subscriptionPromise = Promise.resolve(null);

          const registry = _classPrivateFieldBase(this, _registryDefault)[_registryDefault];

          const errorHandler = error => {
            logErrorMessage(method, def, error);
            observer.error(error);
          };

          try {
            const params = this._formatInputs(registry, def, values);

            const paramsJson = params.map(param => param.toJSON());

            const update = (error, result) => {
              if (error) {
                logErrorMessage(method, def, error);
                return;
              }

              try {
                observer.next(outputAs === 'scale' ? this._formatOutput(registry, method, def, params, result) : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', result));
              } catch (error) {
                observer.error(error);
              }
            };

            subscriptionPromise = this._createSubscriber({
              paramsJson,
              subName,
              subType,
              update
            }, errorHandler);
          } catch (error) {
            errorHandler(error);
          } // Teardown logic


          return () => {
            var _memoized2;

            // Delete from cache, so old results don't hang around
            (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.unmemoize(...values); // Unsubscribe from provider

            subscriptionPromise.then(subscriptionId => isNull(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));
          };
        }).pipe(drr());
      };

      memoized = this._memomize(creator);
      return memoized;
    }

    _formatInputs(registry, def, inputs) {
      const reqArgCount = def.params.filter(({
        isOptional
      }) => !isOptional).length;
      const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;
      assert$a(inputs.length >= reqArgCount && inputs.length <= def.params.length, `Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);
      return inputs.map((input, index) => createTypeUnsafe(registry, def.params[index].type, [input]));
    }

    _formatOutput(registry, method, rpc, params, result) {
      if (rpc.type === 'StorageData') {
        const key = params[0];
        return this._formatStorageData(registry, key, result);
      } else if (rpc.type === 'StorageChangeSet') {
        const keys = params[0];
        return keys ? this._formatStorageSet(registry, keys, result.changes) : registry.createType('StorageChangeSet', result);
      } else if (rpc.type === 'Vec<StorageChangeSet>') {
        const mapped = result.map(({
          block,
          changes
        }) => [registry.createType('Hash', block), this._formatStorageSet(registry, params[0], changes)]); // we only query at a specific block, not a range - flatten

        return method === 'queryStorageAt' ? mapped[0][1] : mapped;
      }

      return createTypeUnsafe(registry, rpc.type, [result]);
    }

    _formatStorageData(registry, key, value) {
      const isEmpty = isNull(value); // we convert to Uint8Array since it maps to the raw encoding, all
      // data will be correctly encoded (incl. numbers, excl. :code)

      const input = isEmpty ? null : isTreatAsHex(key) ? value : u8aToU8a(value);
      return this._newType(registry, key, input, isEmpty);
    }

    _formatStorageSet(registry, keys, changes) {
      // For StorageChangeSet, the changes has the [key, value] mappings
      const withCache = keys.length !== 1; // multiple return values (via state.storage subscription), decode the values
      // one at a time, all based on the query types. Three values can be returned -
      //   - Codec - There is a valid value, non-empty
      //   - null - The storage key is empty

      return keys.reduce((results, key, index) => {
        results.push(this._formatStorageSetEntry(registry, key, changes, withCache, index));
        return results;
      }, []);
    }

    _formatStorageSetEntry(registry, key, changes, witCache, entryIndex) {
      const hexKey = key.toHex();
      const found = changes.find(([key]) => key === hexKey); // if we don't find the value, this is our fallback
      //   - in the case of an array of values, fill the hole from the cache
      //   - if a single result value, don't fill - it is not an update hole
      //   - fallback to an empty option in all cases

      const value = isUndefined(found) ? witCache && _classPrivateFieldBase(this, _storageCache)[_storageCache].get(hexKey) || null : found[1];
      const isEmpty = isNull(value);
      const input = isEmpty || isTreatAsHex(key) ? value : u8aToU8a(value); // store the retrieved result - the only issue with this cache is that there is no
      // clearing of it, so very long running processes (not just a couple of hours, longer)
      // will increase memory beyond what is allowed.

      _classPrivateFieldBase(this, _storageCache)[_storageCache].set(hexKey, value);

      return this._newType(registry, key, input, isEmpty, entryIndex);
    }

    _newType(registry, key, input, isEmpty, entryIndex = -1) {
      // single return value (via state.getStorage), decode the value based on the
      // outputType that we have specified. Fallback to Raw on nothing
      const type = key.outputType || 'Raw';
      const meta = key.meta || EMPTY_META;
      const entryNum = entryIndex === -1 ? '' : ` entry ${entryIndex}:`;

      if (meta.modifier.isOptional) {
        let inner = null;

        if (!isEmpty) {
          try {
            inner = createTypeUnsafe(registry, type, [input], {
              isPedantic: true
            });
          } catch (error) {
            l$4.error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}`, error.message);
          }
        }

        return new Option(registry, createClass$1(registry, type), inner);
      }

      try {
        return createTypeUnsafe(registry, type, [isEmpty ? meta.fallback ? hexToU8a(meta.fallback.toHex()) : undefined : input], {
          isPedantic: true
        });
      } catch (error) {
        l$4.error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}`, error.message);
        return registry.createType('Raw', input);
      }
    }

  }

  // Copyright 2017-2021 @polkadot/api authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Most generic typings for `api.derive.*.*`
  // Exact typings for a particular section `api.derive.section.*`
  // Exact typings for all sections `api.derive.*.*`
  // A technically unsafe version of Object.keys(obj) that assumes that
  // obj only has known properties of T
  function keys(obj) {
    return Object.keys(obj);
  }
  /**
   * This is a methods decorator which keeps all type information.
   */


  function decorateMethods(section, decorateMethod) {
    return keys(section).reduce((acc, methodName) => {
      const method = section[methodName]; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment

      acc[methodName] = decorateMethod(method);
      return acc;
    }, {});
  }
  /**
   * This is a section decorator which keeps all type information.
   */


  function decorateSections(allSections, decorateMethod) {
    return keys(allSections).reduce((acc, sectionName) => {
      acc[sectionName] = decorateMethods(allSections[sectionName], decorateMethod);
      return acc;
    }, {});
  }

  // Copyright 2017-2021 @polkadot/api authors & contributors
  const l$3 = logger('api/util');

  // Copyright 2017-2021 @polkadot/api authors & contributors
  function filterEvents(extHash, {
    block: {
      extrinsics,
      header
    }
  }, allEvents, status) {
    // extrinsics to hashes
    const myHash = extHash.toHex();
    const allHashes = extrinsics.map(ext => ext.hash.toHex()); // find the index of our extrinsic in the block

    const index = allHashes.indexOf(myHash); // if we do get the block after finalized, it _should_ be there

    if (index === -1) {
      // only warn on filtering with isInBlock (finalization finalizes after)
      if (status.isInBlock) {
        l$3.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${myHash} inside ${allHashes.join(', ')}`);
      }

      return;
    }

    return allEvents.filter(({
      phase
    }) => // only ApplyExtrinsic has the extrinsic index
    phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));
  }

  // Copyright 2017-2021 @polkadot/api authors & contributors
  function isKeyringPair(account) {
    return isFunction$1(account.sign);
  }

  // Copyright 2017-2021 @polkadot/api authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const recordIdentity = record => record;

  function filterAndApply(events, section, methods, onFound) {
    return events.filter(({
      event
    }) => section === event.section && methods.includes(event.method)).map(record => onFound(record));
  }

  function extractError(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed'], ({
      event: {
        data
      }
    }) => data[0])[0];
  }

  function extractInfo(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], ({
      event: {
        data,
        method
      }
    }) => method === 'ExtrinsicSuccess' ? data[0] : data[1])[0];
  }

  class SubmittableResult {
    constructor({
      dispatchError,
      dispatchInfo,
      events,
      status
    }) {
      this.dispatchError = void 0;
      this.dispatchInfo = void 0;
      this.events = void 0;
      this.status = void 0;
      this.dispatchError = dispatchError || extractError(events);
      this.dispatchInfo = dispatchInfo || extractInfo(events);
      this.events = events || [];
      this.status = status;
    }

    get isCompleted() {
      return this.isError || this.status.isInBlock || this.status.isFinalized;
    }

    get isError() {
      return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
    }

    get isFinalized() {
      return this.status.isFinalized;
    }

    get isInBlock() {
      return this.status.isInBlock;
    }

    get isWarning() {
      return this.status.isRetracted;
    }
    /**
     * @description Filters EventRecords for the specified method & section (there could be multiple)
     */


    filterRecords(section, method) {
      return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);
    }
    /**
     * @description Finds an EventRecord for the specified method & section
     */


    findRecord(section, method) {
      return this.filterRecords(section, method)[0];
    }
    /**
     * @description Creates a human representation of the output
     */


    toHuman(isExtended) {
      var _this$dispatchError, _this$dispatchInfo;

      return {
        dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),
        dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),
        events: this.events.map(event => event.toHuman(isExtended)),
        status: this.status.toHuman(isExtended)
      };
    }

  }

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  const identity = input => input;

  function createClass({
    api,
    apiType,
    decorateMethod
  }) {
    // an instance of the base extrinsic for us to extend
    const ExtrinsicBase = api.registry.createClass('Extrinsic');

    var _ignoreStatusCb = _classPrivateFieldKey("ignoreStatusCb");

    var _transformResult = _classPrivateFieldKey("transformResult");

    var _makeEraOptions = _classPrivateFieldKey("makeEraOptions");

    var _makeSignOptions = _classPrivateFieldKey("makeSignOptions");

    var _makeSignAndSendOptions = _classPrivateFieldKey("makeSignAndSendOptions");

    var _observeSign = _classPrivateFieldKey("observeSign");

    var _observeStatus = _classPrivateFieldKey("observeStatus");

    var _observeSend = _classPrivateFieldKey("observeSend");

    var _observeSubscribe = _classPrivateFieldKey("observeSubscribe");

    var _optionsOrNonce = _classPrivateFieldKey("optionsOrNonce");

    var _signViaSigner = _classPrivateFieldKey("signViaSigner");

    var _updateSigner = _classPrivateFieldKey("updateSigner");

    class Submittable extends ExtrinsicBase {
      constructor(registry, extrinsic) {
        super(registry, extrinsic, {
          version: api.extrinsicType
        });
        Object.defineProperty(this, _ignoreStatusCb, {
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, _transformResult, {
          writable: true,
          value: identity
        });
        Object.defineProperty(this, _makeEraOptions, {
          writable: true,
          value: (options, {
            header,
            mortalLength,
            nonce
          }) => {
            if (!header) {
              if (isNumber(options.era)) {
                // since we have no header, it is immortal, remove any option overrides
                // so we only supply the genesisHash and no era to the construction
                delete options.era;
                delete options.blockHash;
              }

              return _classPrivateFieldBase(this, _makeSignOptions)[_makeSignOptions](options, {
                nonce
              });
            }

            return _classPrivateFieldBase(this, _makeSignOptions)[_makeSignOptions](options, {
              blockHash: header.hash,
              era: this.registry.createType('ExtrinsicEra', {
                current: header.number,
                period: options.era || mortalLength
              }),
              nonce
            });
          }
        });
        Object.defineProperty(this, _makeSignOptions, {
          writable: true,
          value: (options, extras) => {
            return _objectSpread$4(_objectSpread$4(_objectSpread$4({
              blockHash: api.genesisHash,
              genesisHash: api.genesisHash
            }, options), extras), {}, {
              runtimeVersion: api.runtimeVersion,
              signedExtensions: api.registry.signedExtensions,
              version: api.extrinsicType
            });
          }
        });
        Object.defineProperty(this, _makeSignAndSendOptions, {
          writable: true,
          value: (optionsOrStatus, statusCb) => {
            let options = {};

            if (isFunction$1(optionsOrStatus)) {
              statusCb = optionsOrStatus;
            } else {
              options = _objectSpread$4({}, optionsOrStatus);
            }

            return [options, statusCb];
          }
        });
        Object.defineProperty(this, _observeSign, {
          writable: true,
          value: (account, optionsOrNonce) => {
            const address = isKeyringPair(account) ? account.address : account.toString();

            const options = _classPrivateFieldBase(this, _optionsOrNonce)[_optionsOrNonce](optionsOrNonce);

            let updateId;
            return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async signingInfo => {
              const eraOptions = _classPrivateFieldBase(this, _makeEraOptions)[_makeEraOptions](options, signingInfo);

              if (isKeyringPair(account)) {
                this.sign(account, eraOptions);
              } else {
                updateId = await _classPrivateFieldBase(this, _signViaSigner)[_signViaSigner](address, eraOptions, signingInfo.header);
              }
            }), mapTo(updateId));
          }
        });
        Object.defineProperty(this, _observeStatus, {
          writable: true,
          value: (hash, status) => {
            if (!status.isFinalized && !status.isInBlock) {
              return of(_classPrivateFieldBase(this, _transformResult)[_transformResult](new SubmittableResult({
                status
              })));
            }

            const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;
            return api.derive.tx.events(blockHash).pipe(map(({
              block,
              events
            }) => _classPrivateFieldBase(this, _transformResult)[_transformResult](new SubmittableResult({
              events: filterEvents(hash, block, events, status),
              status
            }))));
          }
        });
        Object.defineProperty(this, _observeSend, {
          writable: true,
          value: (updateId = -1) => {
            return api.rpc.author.submitExtrinsic(this).pipe(tap(hash => {
              _classPrivateFieldBase(this, _updateSigner)[_updateSigner](updateId, hash);
            }));
          }
        });
        Object.defineProperty(this, _observeSubscribe, {
          writable: true,
          value: (updateId = -1) => {
            const hash = this.hash;
            return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap(status => _classPrivateFieldBase(this, _observeStatus)[_observeStatus](hash, status)), tap(status => {
              _classPrivateFieldBase(this, _updateSigner)[_updateSigner](updateId, status);
            }));
          }
        });
        Object.defineProperty(this, _optionsOrNonce, {
          writable: true,
          value: (optionsOrNonce = {}) => {
            return isBn(optionsOrNonce) || isNumber(optionsOrNonce) ? {
              nonce: optionsOrNonce
            } : optionsOrNonce;
          }
        });
        Object.defineProperty(this, _signViaSigner, {
          writable: true,
          value: async (address, options, header) => {
            const signer = options.signer || api.signer;
            assert$a(signer, 'No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
            const payload = this.registry.createType('SignerPayload', _objectSpread$4(_objectSpread$4({}, options), {}, {
              address,
              blockNumber: header ? header.number : 0,
              method: this.method
            }));
            let result;

            if (signer.signPayload) {
              result = await signer.signPayload(payload.toPayload());
            } else if (signer.signRaw) {
              result = await signer.signRaw(payload.toRaw());
            } else {
              throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
            } // Here we explicitly call `toPayload()` again instead of working with an object
            // (reference) as passed to the signer. This means that we are sure that the
            // payload data is not modified from our inputs, but the signer


            super.addSignature(address, result.signature, payload.toPayload());
            return result.id;
          }
        });
        Object.defineProperty(this, _updateSigner, {
          writable: true,
          value: (updateId, status) => {
            if (updateId !== -1 && api.signer && api.signer.update) {
              api.signer.update(updateId, status);
            }
          }
        });
        _classPrivateFieldBase(this, _ignoreStatusCb)[_ignoreStatusCb] = apiType === 'rxjs';
      } // dry run an extrinsic


      dryRun(account, optionsOrHash) {
        if (isString(optionsOrHash) || isU8a(optionsOrHash)) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-return
          return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), optionsOrHash));
        } // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call


        return decorateMethod(() => _classPrivateFieldBase(this, _observeSign)[_observeSign](account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
      } // calculate the payment info for this transaction (if signed and submitted)


      paymentInfo(account, optionsOrHash) {
        if (isString(optionsOrHash) || isU8a(optionsOrHash)) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-return
          return decorateMethod(() => api.rpc.payment.queryInfo(this.toHex(), optionsOrHash));
        }

        const [allOptions] = _classPrivateFieldBase(this, _makeSignAndSendOptions)[_makeSignAndSendOptions](optionsOrHash);

        const address = isKeyringPair(account) ? account.address : account.toString(); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

        return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap(signingInfo => {
          // setup our options (same way as in signAndSend)
          const eraOptions = _classPrivateFieldBase(this, _makeEraOptions)[_makeEraOptions](allOptions, signingInfo);

          const signOptions = _classPrivateFieldBase(this, _makeSignOptions)[_makeSignOptions](eraOptions, {});

          this.signFake(address, signOptions);
          return api.rpc.payment.queryInfo(this.toHex());
        })))();
      } // send with an immediate Hash result


      // send implementation for both immediate Hash and statusCb variants
      send(statusCb) {
        const isSubscription = api.hasSubscriptions && (_classPrivateFieldBase(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

        return decorateMethod(isSubscription ? _classPrivateFieldBase(this, _observeSubscribe)[_observeSubscribe] : _classPrivateFieldBase(this, _observeSend)[_observeSend])(statusCb);
      }
      /**
       * @description Sign a transaction, returning the this to allow chaining, i.e. .sign(...).send(). When options, e.g. nonce/blockHash are not specified, it will be inferred. To retrieve eg. nonce use `signAsync` (the preferred interface, this is provided for backwards compatibility)
       * @deprecated
       */


      sign(account, optionsOrNonce) {
        super.sign(account, _classPrivateFieldBase(this, _makeSignOptions)[_makeSignOptions](_classPrivateFieldBase(this, _optionsOrNonce)[_optionsOrNonce](optionsOrNonce), {}));
        return this;
      }
      /**
       * @description Signs a transaction, returning `this` to allow chaining. E.g.: `sign(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
       */


      signAsync(account, optionsOrNonce) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
        return decorateMethod(() => _classPrivateFieldBase(this, _observeSign)[_observeSign](account, optionsOrNonce).pipe(mapTo(this)))();
      } // signAndSend with an immediate Hash result


      // signAndSend implementation for all 3 cases above
      signAndSend(account, optionsOrStatus, optionalStatusCb) {
        const [options, statusCb] = _classPrivateFieldBase(this, _makeSignAndSendOptions)[_makeSignAndSendOptions](optionsOrStatus, optionalStatusCb);

        const isSubscription = api.hasSubscriptions && (_classPrivateFieldBase(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

        return decorateMethod(() => _classPrivateFieldBase(this, _observeSign)[_observeSign](account, options).pipe(switchMap(updateId => isSubscription ? _classPrivateFieldBase(this, _observeSubscribe)[_observeSubscribe](updateId) : _classPrivateFieldBase(this, _observeSend)[_observeSend](updateId))) // FIXME This is wrong, SubmittableResult is _not_ a codec
        )(statusCb);
      } // adds a transform to the result, applied before result is returned


      withResultTransform(transform) {
        _classPrivateFieldBase(this, _transformResult)[_transformResult] = transform;
        return this;
      }

    }

    return Submittable;
  }

  // Copyright 2017-2021 @polkadot/api authors & contributors
  function createSubmittable(apiType, api, decorateMethod) {
    const Submittable = createClass({
      api,
      apiType,
      decorateMethod
    });
    return extrinsic => new Submittable(api.registry, extrinsic);
  }

  // Copyright 2017-2021 @polkadot/api authors & contributors
  const l$2 = logger('api/augment');

  function logLength(type, values, and = []) {
    return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';
  }

  function logValues(type, values) {
    return values.length ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';
  } // log details to console


  function warn(prefix, type, [added, removed]) {
    if (added.length || removed.length) {
      l$2.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
    }
  }

  function extractKeys(src, dst) {
    return [Object.keys(src), Object.keys(dst)];
  }

  function findSectionExcludes(a, b) {
    return a.filter(section => !b.includes(section));
  }

  function extractSections(src, dst) {
    const [srcSections, dstSections] = extractKeys(src, dst);
    return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];
  }

  function findMethodExcludes(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = Object.keys(dst);
    return dstSections.filter(section => srcSections.includes(section)).reduce((rmMethods, section) => {
      const srcMethods = Object.keys(src[section]);
      return rmMethods.concat(...Object.keys(dst[section]).filter(method => !srcMethods.includes(method)).map(method => `${section}.${method}`));
    }, []);
  }

  function extractMethods(src, dst) {
    return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];
  }
  /**
   * Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
   * already available, but rather just adds new missing ites into the result object.
   * @internal
   */


  function augmentObject(prefix, src, dst, fromEmpty = false) {
    if (fromEmpty) {
      Object.keys(dst).forEach(key => {
        delete dst[key];
      });
    }

    if (prefix && Object.keys(dst).length) {
      warn(prefix, 'modules', extractSections(src, dst));
      warn(prefix, 'calls', extractMethods(src, dst));
    }

    return Object.keys(src).reduce((newSection, sectionName) => {
      const section = src[sectionName];
      newSection[sectionName] = Object.keys(section).reduce((result, methodName) => {
        // TODO When it does match, check the actual details and warn when there are differences
        if (!result[methodName]) {
          result[methodName] = section[methodName];
        }

        return result;
      }, dst[sectionName] || {});
      return newSection;
    }, dst);
  }

  // Copyright 2017-2019 @polkadot/api authors & contributors

  function sig({
    method,
    section
  }, ...args) {
    return `${section}.${method}(${args.join(', ')})`;
  }

  function doDoubleMap(creator, args) {
    const {
      key1,
      key2
    } = creator.meta.type.asDoubleMap;
    assert$a(args.length === 2, `${sig(creator, key1, key2)} is a doublemap, requiring 2 arguments, ${args.length} found`); // pass as tuple

    return [creator, args];
  }

  function doMap(creator, args) {
    const {
      key
    } = creator.meta.type.asMap;
    assert$a(args.length === 1, `${sig(creator, key)} is a map, requiring 1 argument, ${args.length} found`); // expand

    return args.length ? [creator, args[0]] : [creator];
  } // sets up the arguments in the form of [creator, args] ready to be used in a storage
  // call. Additionally, it verifies that the correct number of arguments have been passed


  function extractStorageArgs(creator, _args) {
    const args = _args.filter(arg => !isUndefined(arg));

    if (creator.meta.type.isDoubleMap) {
      return doDoubleMap(creator, args);
    } else if (creator.meta.type.isMap) {
      return doMap(creator, args);
    }

    assert$a(args.length === 0, `${sig(creator)} does not take any arguments, ${args.length} found`); // no args

    return [creator];
  }

  var _eventemitter = _classPrivateFieldKey("eventemitter");

  class Events {
    constructor() {
      Object.defineProperty(this, _eventemitter, {
        writable: true,
        value: new eventemitter3()
      });
    }

    emit(type, ...args) {
      return _classPrivateFieldBase(this, _eventemitter)[_eventemitter].emit(type, ...args);
    }
    /**
     * @description Attach an eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.on('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.on('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */


    on(type, handler) {
      _classPrivateFieldBase(this, _eventemitter)[_eventemitter].on(type, handler);

      return this;
    }
    /**
     * @description Remove the given eventemitter handler
     *
     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to unregister.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const handler = (): void => {
     *  console.log('Connected !);
     * };
     *
     * // Start listening
     * api.on('connected', handler);
     *
     * // Stop listening
     * api.off('connected', handler);
     * ```
     */


    off(type, handler) {
      _classPrivateFieldBase(this, _eventemitter)[_eventemitter].removeListener(type, handler);

      return this;
    }
    /**
     * @description Attach an one-time eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.once('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.once('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */


    once(type, handler) {
      _classPrivateFieldBase(this, _eventemitter)[_eventemitter].once(type, handler);

      return this;
    }

  }

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  // the max amount of keys/values that we will retrieve at once
  const PAGE_SIZE = 384;
  const l$1 = logger('api/init');
  let instanceCounter = 0;

  var _instanceId = _classPrivateFieldKey("instanceId");

  var _registry = _classPrivateFieldKey("registry");

  class Decorate extends Events {
    // HACK Use BN import so decorateDerive works... yes, wtf.

    /**
     * This is the one and only method concrete children classes need to implement.
     * It's a higher-order function, which takes one argument
     * `method: Method extends (...args: any[]) => Observable<any>`
     * (and one optional `options`), and should return the user facing method.
     * For example:
     * - For ApiRx, `decorateMethod` should just be identity, because the input
     * function is already an Observable
     * - For ApiPromise, `decorateMethod` should return a function that takes all
     * the parameters from `method`, adds an optional `callback` argument, and
     * returns a Promise.
     *
     * We could easily imagine other user-facing interfaces, which are simply
     * implemented by transforming the Observable to Stream/Iterator/Kefir/Bacon
     * via `decorateMethod`.
     */

    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options, type, decorateMethod) {
      var _options$source;

      super();
      Object.defineProperty(this, _instanceId, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _registry, {
        writable: true,
        value: void 0
      });
      this.__phantom = new bn(0);
      this._consts = {};
      this._derive = void 0;
      this._errors = {};
      this._events = {};
      this._extrinsics = void 0;
      this._extrinsicType = DEFAULT_VERSION;
      this._genesisHash = void 0;
      this._isConnected = void 0;
      this._isReady = false;
      this._options = void 0;
      this._query = {};
      this._queryMulti = void 0;
      this._rpc = void 0;
      this._rpcCore = void 0;
      this._runtimeChain = void 0;
      this._runtimeMetadata = void 0;
      this._runtimeVersion = void 0;
      this._rx = {
        consts: {},
        query: {},
        tx: {}
      };
      this._type = void 0;
      this._decorateMethod = void 0;

      this._rxDecorateMethod = method => {
        return method;
      };

      _classPrivateFieldBase(this, _instanceId)[_instanceId] = `${++instanceCounter}`;
      _classPrivateFieldBase(this, _registry)[_registry] = ((_options$source = options.source) === null || _options$source === void 0 ? void 0 : _options$source.registry) || options.registry || new TypeRegistry();
      const thisProvider = options.source ? options.source._rpcCore.provider.clone() : options.provider || new WsProvider();
      this._decorateMethod = decorateMethod;
      this._options = options;
      this._type = type;
      this._rpcCore = new RpcCore(_classPrivateFieldBase(this, _instanceId)[_instanceId], _classPrivateFieldBase(this, _registry)[_registry], thisProvider, this._options.rpc);
      this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
      this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
      this._rx.registry = _classPrivateFieldBase(this, _registry)[_registry];
    }
    /**
     * @description Return the current used registry
     */


    get registry() {
      return _classPrivateFieldBase(this, _registry)[_registry];
    }
    /**
     * @description Creates an instance of a type as registered
     */


    createType(type, ...params) {
      return _classPrivateFieldBase(this, _registry)[_registry].createType(type, ...params);
    }
    /**
     * @description Register additional user-defined of chain-specific types in the type registry
     */


    registerTypes(types) {
      types && _classPrivateFieldBase(this, _registry)[_registry].register(types);
    }
    /**
     * @returns `true` if the API operates with subscriptions
     */


    get hasSubscriptions() {
      return this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @returns `true` if the API decorate multi-key queries
     */


    get supportMulti() {
      return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
    }

    injectMetadata(metadata, fromEmpty, registry) {
      const decoratedMeta = expandMetadata(registry || _classPrivateFieldBase(this, _registry)[_registry], metadata);

      if (fromEmpty || !this._extrinsics) {
        this._extrinsics = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
        this._rx.tx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
      } else {
        augmentObject('tx', this._decorateExtrinsics(decoratedMeta, this._decorateMethod), this._extrinsics, false);
        augmentObject(null, this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod), this._rx.tx, false);
      } // this API


      augmentObject('query', this._decorateStorage(decoratedMeta, this._decorateMethod), this._query, fromEmpty);
      augmentObject('consts', decoratedMeta.consts, this._consts, fromEmpty);
      augmentObject('errors', decoratedMeta.errors, this._errors, fromEmpty);
      augmentObject('events', decoratedMeta.events, this._events, fromEmpty); // rx

      augmentObject(null, this._decorateStorage(decoratedMeta, this._rxDecorateMethod), this._rx.query, fromEmpty);
      augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
    }

    _decorateFunctionMeta(input, output) {
      output.meta = input.meta;
      output.method = input.method;
      output.section = input.section;
      output.toJSON = input.toJSON;

      if (input.callIndex) {
        output.callIndex = input.callIndex;
      }

      return output;
    } // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
    // manner to cater for both old and new:
    //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
    //   - when non-zero, remove anything that is not in the array (we don't do this)


    _filterRpc(rpcMethods, additional) {
      const methods = rpcMethods.methods.map(t => t.toString()); // add any specific user-base RPCs

      if (Object.keys(additional).length !== 0) {
        this._rpcCore.addUserInterfaces(additional); // re-decorate, only adding any new additional interfaces


        this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);

        this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
      }

      this._filterRpcMethods(methods);
    }

    _filterRpcMethods(exposed) {
      const hasResults = exposed.length !== 0;
      const allKnown = [...this._rpcCore.mapping.entries()];
      const allKeys = allKnown.reduce((allKeys, [, {
        alias,
        endpoint,
        method,
        pubsub,
        section
      }]) => {
        allKeys.push(`${section}_${method}`);

        if (pubsub) {
          allKeys.push(`${section}_${pubsub[1]}`);
          allKeys.push(`${section}_${pubsub[2]}`);
        }

        if (alias) {
          allKeys.push(...alias);
        }

        if (endpoint) {
          allKeys.push(endpoint);
        }

        return allKeys;
      }, []);
      const unknown = exposed.filter(key => !allKeys.includes(key));

      if (unknown.length) {
        l$1.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
      } // loop through all entries we have (populated in decorate) and filter as required
      // only remove when we have results and method missing, or with no results if optional


      allKnown.filter(([key]) => hasResults ? !exposed.includes(key) && key !== 'rpc_methods' // rpc_methods doesn't appear, v1
      : key === 'rpc_methods' // we didn't find this one, remove
      ) // eslint-disable-next-line @typescript-eslint/no-unused-vars
      .forEach(([_, {
        method,
        section
      }]) => {
        delete this._rpc[section][method];
        delete this._rpcCore[section][method];
        delete this._rx.rpc[section][method];
      });
    }

    _decorateRpc(rpc, decorateMethod, input = {}) {
      return rpc.sections.reduce((out, _sectionName) => {
        const sectionName = _sectionName;

        if (!out[sectionName]) {
          // out and section here are horrors to get right from a typing perspective :(
          out[sectionName] = Object.entries(rpc[sectionName]).reduce((section, [methodName, method]) => {
            //  skip subscriptions where we have a non-subscribe interface
            if (this.hasSubscriptions || !(methodName.startsWith('subscribe') || methodName.startsWith('unsubscribe'))) {
              section[methodName] = decorateMethod(method, {
                methodName
              }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

              section[methodName].json = decorateMethod(method.json, {
                methodName
              }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

              section[methodName].raw = decorateMethod(method.raw, {
                methodName
              });
            }

            return section;
          }, {});
        }

        return out;
      }, input);
    } // only be called if supportMulti is true


    _decorateMulti(decorateMethod) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return decorateMethod(calls => (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(calls.map(arg => Array.isArray(arg) ? [arg[0].creator, ...arg.slice(1)] : [arg.creator])));
    }

    _decorateExtrinsics({
      tx
    }, decorateMethod) {
      const creator = createSubmittable(this._type, this._rx, decorateMethod);
      return Object.entries(tx).reduce((out, [name, section]) => {
        out[name] = Object.entries(section).reduce((out, [name, method]) => {
          out[name] = this._decorateExtrinsicEntry(method, creator);
          return out;
        }, {});
        return out;
      }, creator);
    }

    _decorateExtrinsicEntry(method, creator) {
      const decorated = (...params) => creator(method(...params)); // pass through the `.is`


      decorated.is = other => method.is(other); // eslint-disable-next-line @typescript-eslint/no-unsafe-return


      return this._decorateFunctionMeta(method, decorated);
    }

    _decorateStorage({
      query
    }, decorateMethod) {
      return Object.entries(query).reduce((out, [name, section]) => {
        out[name] = Object.entries(section).reduce((out, [name, method]) => {
          out[name] = this._decorateStorageEntry(method, decorateMethod);
          return out;
        }, {});
        return out;
      }, {});
    }

    _decorateStorageEntry(creator, decorateMethod) {
      // get the storage arguments, with DoubleMap as an array entry, otherwise spread
      const getArgs = (...args) => extractStorageArgs(creator, args); // Disable this where it occurs for each field we are decorating

      /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


      const decorated = this._decorateStorageCall(creator, decorateMethod);

      decorated.creator = creator;
      decorated.at = decorateMethod((hash, arg1, arg2) => this._rpcCore.state.getStorage(getArgs(arg1, arg2), hash));
      decorated.hash = decorateMethod((arg1, arg2) => this._rpcCore.state.getStorageHash(getArgs(arg1, arg2)));

      decorated.is = key => key.section === creator.section && key.method === creator.method;

      decorated.key = (arg1, arg2) => u8aToHex(compactStripLength(creator(creator.meta.type.isDoubleMap ? [arg1, arg2] : arg1))[1]);

      decorated.keyPrefix = key1 => u8aToHex(creator.keyPrefix(key1));

      decorated.range = decorateMethod((range, arg1, arg2) => this._decorateStorageRange(decorated, [arg1, arg2], range));
      decorated.size = decorateMethod((arg1, arg2) => this._rpcCore.state.getStorageSize(getArgs(arg1, arg2)));
      decorated.sizeAt = decorateMethod((hash, arg1, arg2) => this._rpcCore.state.getStorageSize(getArgs(arg1, arg2), hash)); // .keys() & .entries() only available on map types

      if (creator.iterKey && (creator.meta.type.isMap || creator.meta.type.isDoubleMap)) {
        decorated.entries = decorateMethod(memo(_classPrivateFieldBase(this, _instanceId)[_instanceId], doubleMapArg => this._retrieveMapEntries(creator, null, doubleMapArg)));
        decorated.entriesAt = decorateMethod(memo(_classPrivateFieldBase(this, _instanceId)[_instanceId], (hash, doubleMapArg) => this._retrieveMapEntries(creator, hash, doubleMapArg)));
        decorated.entriesPaged = decorateMethod(memo(_classPrivateFieldBase(this, _instanceId)[_instanceId], opts => this._retrieveMapEntriesPaged(creator, opts)));
        decorated.keys = decorateMethod(memo(_classPrivateFieldBase(this, _instanceId)[_instanceId], doubleMapArg => this._retrieveMapKeys(creator, null, doubleMapArg)));
        decorated.keysAt = decorateMethod(memo(_classPrivateFieldBase(this, _instanceId)[_instanceId], (hash, doubleMapArg) => this._retrieveMapKeys(creator, hash, doubleMapArg)));
        decorated.keysPaged = decorateMethod(memo(_classPrivateFieldBase(this, _instanceId)[_instanceId], opts => this._retrieveMapKeysPaged(creator, opts)));
      }

      if (this.supportMulti) {
        // When using double map storage function, user need to pass double map key as an array
        decorated.multi = decorateMethod(args => this._retrieveMulti(args.map(arg => [creator, arg])));
      }
      /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


      return this._decorateFunctionMeta(creator, decorated);
    } // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
    // we make a subscription, alternatively we push this through a single-shot query


    _decorateStorageCall(creator, decorateMethod) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return decorateMethod((...args) => {
        return this.hasSubscriptions ? this._rpcCore.state.subscribeStorage([extractStorageArgs(creator, args)]).pipe(map(([data]) => data) // extract first/only result from list
        ) : this._rpcCore.state.getStorage(extractStorageArgs(creator, args));
      }, {
        methodName: creator.method,
        overrideNoSub: (...args) => this._rpcCore.state.getStorage(extractStorageArgs(creator, args))
      });
    }

    _decorateStorageRange(decorated, args, range) {
      const outputType = unwrapStorageType(decorated.creator.meta.type, decorated.creator.meta.modifier.isOptional);
      return this._rpcCore.state.queryStorage([decorated.key(...args)], ...range).pipe(map(result => result.map(([blockHash, [value]]) => [blockHash, this.createType(outputType, value.isSome ? value.unwrap().toHex() : undefined)])));
    } // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes


    _retrieveMulti(keys) {
      if (!keys.length) {
        return of([]);
      }

      return combineLatest(arrayChunk(keys, PAGE_SIZE).map(keys => (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys))).pipe(map(valsArr => arrayFlatten(valsArr)));
    }

    _retrieveMapKeys({
      iterKey,
      meta,
      method,
      section
    }, at, arg) {
      assert$a(iterKey && (meta.type.isMap || meta.type.isDoubleMap), 'keys can only be retrieved on maps, linked maps and double maps');
      const headKey = iterKey(arg).toHex();
      const startSubject = new BehaviorSubject(headKey);
      const query = at ? startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE, startKey, at) : startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE, startKey);
      return startSubject.pipe(switchMap(startKey => query(startKey).pipe(map(keys => keys.map(key => key.setMeta(meta, section, method))))), tap(keys => {
        keys.length === PAGE_SIZE ? startSubject.next(keys[PAGE_SIZE - 1].toHex()) : startSubject.complete();
      }), toArray(), // toArray since we want to startSubject to be completed
      map(keysArr => arrayFlatten(keysArr)));
    }

    _retrieveMapKeysPaged({
      iterKey,
      meta,
      method,
      section
    }, opts) {
      assert$a(iterKey && (meta.type.isMap || meta.type.isDoubleMap), 'keys can only be retrieved on maps, linked maps and double maps');
      const headKey = iterKey(opts.arg).toHex();
      return this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey).pipe(map(keys => keys.map(key => key.setMeta(meta, section, method))));
    }

    _retrieveMapEntries(entry, at, arg) {
      const query = at ? keyset => this._rpcCore.state.queryStorageAt(keyset, at) : keyset => this._rpcCore.state.queryStorageAt(keyset);
      return this._retrieveMapKeys(entry, at, arg).pipe(switchMap(keys => keys.length ? combineLatest(arrayChunk(keys, PAGE_SIZE).map(query)).pipe(map(valsArr => arrayFlatten(valsArr).map((value, index) => [keys[index], value]))) : of([])));
    }

    _retrieveMapEntriesPaged(entry, opts) {
      return this._retrieveMapKeysPaged(entry, opts).pipe(switchMap(keys => keys.length ? this._rpcCore.state.queryStorageAt(keys).pipe(map(valsArr => valsArr.map((value, index) => [keys[index], value]))) : of([])));
    }

    _decorateDeriveRx(decorateMethod) {
      var _this$_runtimeVersion, _this$_options$typesB, _this$_options$typesB2, _this$_options$typesB3;

      const specName = (_this$_runtimeVersion = this._runtimeVersion) === null || _this$_runtimeVersion === void 0 ? void 0 : _this$_runtimeVersion.specName.toString();

      const derives = _objectSpread$3(_objectSpread$3({}, this._options.derives), ((_this$_options$typesB = this._options.typesBundle) === null || _this$_options$typesB === void 0 ? void 0 : (_this$_options$typesB2 = _this$_options$typesB.spec) === null || _this$_options$typesB2 === void 0 ? void 0 : (_this$_options$typesB3 = _this$_options$typesB2[specName !== null && specName !== void 0 ? specName : '']) === null || _this$_options$typesB3 === void 0 ? void 0 : _this$_options$typesB3.derives) || {}); // Pull in derive from api-derive


      const derive = decorateDerive(_classPrivateFieldBase(this, _instanceId)[_instanceId], this._rx, derives);
      return decorateSections(derive, decorateMethod);
    }

    _decorateDerive(decorateMethod) {
      return decorateSections(this._rx.derive, decorateMethod);
    }
    /**
     * Put the `this.onCall` function of ApiRx here, because it is needed by
     * `api._rx`.
     */


  }

  // Copyright 2017-2021 @polkadot/api-derive authors & contributors

  function mapCapabilities([systemRefcount32, systemRefcountDual, stakingVersion]) {
    const types = {}; // AccountInfo

    if (systemRefcountDual && systemRefcountDual.isTrue) {
      types.AccountInfo = 'AccountInfoWithProviders';
    } else if (systemRefcount32 && systemRefcount32.isTrue) {
      types.AccountInfo = 'AccountInfoWithRefCount';
    } // ValidatorPrefs


    if (stakingVersion) {
      if (stakingVersion.index >= 4) {
        // v1 = index 0, V5 = index 4
        types.ValidatorPrefs = 'ValidatorPrefsWithBlocked';
      } else {
        types.ValidatorPrefs = 'ValidatorPrefsWithCommission';
      }
    }

    return types;
  }
  /**
   * @description Query the chain for the specific capabilities
   */


  function detectedCapabilities(api, blockHash) {
    var _api$query$system, _api$query$system2, _api$query$staking;

    const all = [(_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.upgradedToU32RefCount, (_api$query$system2 = api.query.system) === null || _api$query$system2 === void 0 ? void 0 : _api$query$system2.upgradedToDualRefCount, (_api$query$staking = api.query.staking) === null || _api$query$staking === void 0 ? void 0 : _api$query$staking.storageVersion];
    const included = all.map(c => !!c);
    const filtered = all.filter((_, index) => included[index]);
    return (filtered.length ? blockHash ? combineLatest(filtered.map(c => c.at(blockHash))) : api.queryMulti(filtered) : of([])).pipe(map(results => {
      let offset = -1;
      return mapCapabilities(included.map(isIncluded => isIncluded ? results[++offset] : null));
    }), take(1));
  }

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  const KEEPALIVE_INTERVAL = 15000;
  const DEFAULT_BLOCKNUMBER = {
    unwrap: () => BN_ZERO
  };
  const l = logger('api/init');

  var _healthTimer = _classPrivateFieldKey("healthTimer");

  var _registries = _classPrivateFieldKey("registries");

  var _updateSub = _classPrivateFieldKey("updateSub");

  var _onProviderConnect = _classPrivateFieldKey("onProviderConnect");

  var _onProviderDisconnect = _classPrivateFieldKey("onProviderDisconnect");

  var _onProviderError = _classPrivateFieldKey("onProviderError");

  class Init extends Decorate {
    constructor(options, type, decorateMethod) {
      super(options, type, decorateMethod); // all injected types added to the registry for overrides

      Object.defineProperty(this, _healthTimer, {
        writable: true,
        value: null
      });
      Object.defineProperty(this, _registries, {
        writable: true,
        value: []
      });
      Object.defineProperty(this, _updateSub, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _onProviderConnect, {
        writable: true,
        value: async () => {
          this.emit('connected');

          this._isConnected.next(true);

          try {
            const [hasMeta, cryptoReady] = await Promise.all([this._loadMeta(), this._options.initWasm === false ? Promise.resolve(true) : cryptoWaitReady()]);

            if (hasMeta && !this._isReady && cryptoReady) {
              this._isReady = true;
              this.emit('ready', this);
            }

            _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = setInterval(() => {
              this._rpcCore.system.health().toPromise().catch(() => null);
            }, KEEPALIVE_INTERVAL);
          } catch (_error) {
            const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
            l.error(error);
            l.error(_error);
            this.emit('error', error);
          }
        }
      });
      Object.defineProperty(this, _onProviderDisconnect, {
        writable: true,
        value: () => {
          this.emit('disconnected');

          this._isConnected.next(false);

          if (_classPrivateFieldBase(this, _healthTimer)[_healthTimer]) {
            clearInterval(_classPrivateFieldBase(this, _healthTimer)[_healthTimer]);
            _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = null;
          }
        }
      });
      Object.defineProperty(this, _onProviderError, {
        writable: true,
        value: error => {
          this.emit('error', error);
        }
      });
      this.registry.setKnownTypes(options); // We only register the types (global) if this is not a cloned instance.
      // Do right up-front, so we get in the user types before we are actually
      // doing anything on-chain, this ensures we have the overrides in-place

      if (!options.source) {
        this.registerTypes(options.types);
      } else {
        _classPrivateFieldBase(this, _registries)[_registries] = _classPrivateFieldBase(options.source, _registries)[_registries];
      }

      this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
      this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);

      if (this.supportMulti) {
        this._queryMulti = this._decorateMulti(this._decorateMethod);
        this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
      }

      this._rx.signer = options.signer;

      this._rpcCore.setRegistrySwap(hash => this.getBlockRegistry(hash));

      if (this.hasSubscriptions) {
        this._rpcCore.provider.on('disconnected', _classPrivateFieldBase(this, _onProviderDisconnect)[_onProviderDisconnect]);

        this._rpcCore.provider.on('error', _classPrivateFieldBase(this, _onProviderError)[_onProviderError]);

        this._rpcCore.provider.on('connected', _classPrivateFieldBase(this, _onProviderConnect)[_onProviderConnect]);
      } else {
        l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
      } // If the provider was instantiated earlier, and has already emitted a
      // 'connected' event, then the `on('connected')` won't fire anymore. To
      // cater for this case, we call manually `this._onProviderConnect`.


      if (this._rpcCore.provider.isConnected) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        _classPrivateFieldBase(this, _onProviderConnect)[_onProviderConnect]();
      }
    }
    /**
     * @description Decorates a registry based on the runtime version
     */


    _initRegistry(registry, chain, version, metadata, chainProps) {
      registry.setChainProperties(chainProps || this.registry.getChainProperties());
      registry.setKnownTypes(this._options);
      registry.register(getSpecTypes(registry, chain, version.specName, version.specVersion));
      registry.setHasher(getSpecHasher(registry, chain, version.specName)); // for bundled types, pull through the aliases defined

      if (registry.knownTypes.typesBundle) {
        registry.knownTypes.typesAlias = getSpecAlias(registry, chain, version.specName);
      }

      registry.setMetadata(metadata, undefined, _objectSpread$2(_objectSpread$2({}, getSpecExtensions(registry, chain, version.specName)), this._options.signedExtensions || {}));
      return registry;
    }
    /**
     * @description Sets up a registry based on the block hash defined
     */


    async getBlockRegistry(blockHash) {
      // shortcut in the case where we have an immediate-same request
      const lastBlockHash = u8aToU8a(blockHash);

      const existingViaHash = _classPrivateFieldBase(this, _registries)[_registries].find(r => r.lastBlockHash && u8aEq(lastBlockHash, r.lastBlockHash));

      if (existingViaHash) {
        return existingViaHash;
      } // ensure we have everything required


      assert$a(this._genesisHash && this._runtimeVersion, 'Cannot retrieve data on an uninitialized chain'); // We have to assume that on the RPC layer the calls used here does not call back into
      // the registry swap, so getHeader & getRuntimeVersion should not be historic

      const header = this._genesisHash.eq(blockHash) ? {
        number: DEFAULT_BLOCKNUMBER,
        parentHash: this._genesisHash
      } : await this._rpcCore.chain.getHeader(blockHash).toPromise();
      assert$a((header === null || header === void 0 ? void 0 : header.parentHash) && !header.parentHash.isEmpty, 'Unable to retrieve header and parent from supplied hash'); // get the runtime version, either on-chain or via an known upgrade history

      const [firstVersion, lastVersion] = getUpgradeVersion(this._genesisHash, header.number.unwrap());
      const version = firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion)) ? {
        specName: this._runtimeVersion.specName,
        specVersion: firstVersion.specVersion
      } : await this._rpcCore.state.getRuntimeVersion(header.parentHash).toPromise(); // check for pre-existing registries

      const existingViaVersion = _classPrivateFieldBase(this, _registries)[_registries].find(r => r.specVersion.eq(version.specVersion));

      if (existingViaVersion) {
        existingViaVersion.lastBlockHash = lastBlockHash;
        return existingViaVersion;
      } // nothing has been found, construct new


      const metadata = await this._rpcCore.state.getMetadata(header.parentHash).toPromise();

      const registry = this._initRegistry(new TypeRegistry(), this._runtimeChain, version, metadata); // For now, since this is new we ignore the capability lookups (this could be useful once proven)
      // this._detectCapabilities(registry, blockHash);
      // add our new registry


      const result = {
        isDefault: false,
        lastBlockHash,
        metadata,
        metadataConsts: null,
        registry,
        specVersion: version.specVersion
      };

      _classPrivateFieldBase(this, _registries)[_registries].push(result);

      return result;
    }

    async _loadMeta() {
      var _this$_options$source;

      // on re-connection to the same chain, we don't want to re-do everything from chain again
      if (this._isReady) {
        return true;
      } else if (_classPrivateFieldBase(this, _updateSub)[_updateSub]) {
        _classPrivateFieldBase(this, _updateSub)[_updateSub].unsubscribe();
      } // only load from on-chain if we are not a clone (default path), alternatively
      // just use the values from the source instance provided


      [this._genesisHash, this._runtimeMetadata] = (_this$_options$source = this._options.source) !== null && _this$_options$source !== void 0 && _this$_options$source._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
      return this._initFromMeta(this._runtimeMetadata);
    } // eslint-disable-next-line @typescript-eslint/require-await


    async _metaFromSource(source) {
      this._extrinsicType = source.extrinsicVersion;
      this._runtimeChain = source.runtimeChain;
      this._runtimeVersion = source.runtimeVersion;
      const methods = []; // manually build a list of all available methods in this RPC, we are
      // going to filter on it to align the cloned RPC without making a call

      Object.keys(source.rpc).forEach(section => {
        Object.keys(source.rpc[section]).forEach(method => {
          methods.push(`${section}_${method}`);
        });
      });

      this._filterRpcMethods(methods);

      return [source.genesisHash, source.runtimeMetadata];
    }

    _detectCapabilities(registry, blockHash) {
      detectedCapabilities(this._rx, blockHash).toPromise().then(types => {
        if (Object.keys(types).length) {
          (registry || this.registry).register(types);
          l.debug(`Capabilities detected${blockHash ? ` (${u8aToHex(u8aToU8a(blockHash))})` : ''}: ${JSON.stringify(types)}`);
        }
      }).catch(l.error);
    } // subscribe to metadata updates, inject the types on changes


    _subscribeUpdates() {
      if (_classPrivateFieldBase(this, _updateSub)[_updateSub] || !this.hasSubscriptions) {
        return;
      }

      _classPrivateFieldBase(this, _updateSub)[_updateSub] = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap(version => {
        var _this$_runtimeVersion;

        return (// only retrieve the metadata when the on-chain version has been changed
          (_this$_runtimeVersion = this._runtimeVersion) !== null && _this$_runtimeVersion !== void 0 && _this$_runtimeVersion.specVersion.eq(version.specVersion) ? of(false) : this._rpcCore.state.getMetadata().pipe(map(metadata => {
            l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
            this._runtimeMetadata = metadata;
            this._runtimeVersion = version;
            this._rx.runtimeVersion = version; // update the default registry version

            const thisRegistry = _classPrivateFieldBase(this, _registries)[_registries].find(({
              isDefault
            }) => isDefault);

            assert$a(thisRegistry, 'Initialization error, cannot find the default registry'); // setup the data as per the current versions

            thisRegistry.metadata = metadata;
            thisRegistry.metadataConsts = null;
            thisRegistry.specVersion = version.specVersion; // clear the registry types to ensure that we override correctly

            this._initRegistry(thisRegistry.registry.init(), this._runtimeChain, version, metadata);

            this.injectMetadata(metadata, false, thisRegistry.registry);

            this._detectCapabilities(thisRegistry.registry);

            return true;
          }))
        );
      })).subscribe();
    }

    async _metaFromChain(optMetadata) {
      const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([this._rpcCore.chain.getBlockHash(0).toPromise(), this._rpcCore.state.getRuntimeVersion().toPromise(), this._rpcCore.system.chain().toPromise(), this._rpcCore.system.properties().toPromise(), this._rpcCore.rpc.methods().toPromise(), optMetadata ? Promise.resolve(null) : this._rpcCore.state.getMetadata().toPromise()]); // set our chain version & genesisHash as returned

      this._runtimeChain = chain;
      this._runtimeVersion = runtimeVersion;
      this._rx.runtimeVersion = runtimeVersion; // retrieve metadata, either from chain  or as pass-in via options

      const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
      const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey] ? new Metadata(this.registry, optMetadata[metadataKey]) : await this._rpcCore.state.getMetadata().toPromise()); // initializes the registry & RPC

      this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);

      this._filterRpc(rpcMethods, getSpecRpc(this.registry, chain, runtimeVersion.specName));

      this._subscribeUpdates(); // setup the initial registry, when we have none


      if (!_classPrivateFieldBase(this, _registries)[_registries].length) {
        _classPrivateFieldBase(this, _registries)[_registries].push({
          isDefault: true,
          lastBlockHash: null,
          metadata,
          metadataConsts: null,
          registry: this.registry,
          specVersion: runtimeVersion.specVersion
        });
      } // get unique types & validate


      metadata.getUniqTypes(false);
      return [genesisHash, metadata];
    }

    _initFromMeta(metadata) {
      this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
      this._rx.extrinsicType = this._extrinsicType;
      this._rx.genesisHash = this._genesisHash;
      this._rx.runtimeVersion = this._runtimeVersion; // must be set here
      // inject metadata and adjust the types as detected

      this.injectMetadata(metadata, true);

      this._detectCapabilities(); // derive is last, since it uses the decorated rx


      this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
      this._derive = this._decorateDerive(this._decorateMethod);
      return true;
    }

  }

  // Copyright 2017-2021 @polkadot/api authors & contributors

  function assertResult(value) {
    return assertReturn(value, 'Api needs to be initialized before using, listen on \'ready\'');
  }

  class Getters extends Init {
    /**
     * @description Contains the parameter types (constants) of all modules.
     *
     * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
     *
     * @example
     * <BR>
     *
     * ```javascript
     * console.log(api.consts.democracy.enactmentPeriod.toString())
     * ```
     */
    get consts() {
      return assertResult(this._consts);
    }
    /**
     * @description Derived results that are injected into the API, allowing for combinations of various query results.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumber((number) => {
     *   console.log('best number', number);
     * });
     * ```
     */


    get derive() {
      return assertResult(this._derive);
    }
    /**
     * @description Errors from metadata
     */


    get errors() {
      return assertResult(this._errors);
    }
    /**
     * @description Events from metadata
     */


    get events() {
      return assertResult(this._events);
    }
    /**
     * @description  Returns the version of extrinsics in-use on this chain
     */


    get extrinsicVersion() {
      return this._extrinsicType;
    }
    /**
     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
     */


    get genesisHash() {
      return assertResult(this._genesisHash);
    }
    /**
     * @description `true` when subscriptions are supported
     */


    get hasSubscriptions() {
      return this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @description true is the underlying provider is connected
     */


    get isConnected() {
      return this._isConnected.getValue();
    }
    /**
     * @description The library information name & version (from package.json)
     */


    get libraryInfo() {
      return `${packageInfo$1.name} v${packageInfo$1.version}`;
    }
    /**
     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
     *
     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.query.system.account(<accountId>, ([nonce, balance]) => {
     *   console.log('new free balance', balance.free, 'new nonce', nonce);
     * });
     * ```
     */


    get query() {
      return assertResult(this._query);
    }
    /**
     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const unsub = await api.queryMulti(
     *   [
     *     // you can include the storage without any parameters
     *     api.query.balances.totalIssuance,
     *     // or you can pass parameters to the storage query
     *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
     *   ],
     *   ([existential, [, { free }]]) => {
     *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
     *
     *     unsub();
     *   }
     * );
     * ```
     */


    get queryMulti() {
      return assertResult(this._queryMulti);
    }
    /**
     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
     *
     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.rpc.chain.subscribeNewHeads((header) => {
     *   console.log('new header', header);
     * });
     * ```
     */


    get rpc() {
      return assertResult(this._rpc);
    }
    /**
     * @description Contains the chain information for the current node.
     */


    get runtimeChain() {
      return assertResult(this._runtimeChain);
    }
    /**
     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
     */


    get runtimeMetadata() {
      return assertResult(this._runtimeMetadata);
    }
    /**
     * @description Contains the version information for the current runtime.
     */


    get runtimeVersion() {
      return assertResult(this._runtimeVersion);
    }
    /**
     * @description The underlying Rx API interface
     */


    get rx() {
      return assertResult(this._rx);
    }
    /**
     * @description The type of this API instance, either 'rxjs' or 'promise'
     */


    get type() {
      return this._type;
    }
    /**
     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.tx.balances
     *   .transfer(<recipientId>, <balance>)
     *   .signAndSend(<keyPair>, ({status}) => {
     *     console.log('tx status', status.asFinalized.toHex());
     *   });
     * ```
     */


    get tx() {
      return assertResult(this._extrinsics);
    }

  }

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  class ApiBase extends Getters {
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options = {}, type, decorateMethod) {
      super(options, type, decorateMethod);
    }
    /**
     * @description Connect from the underlying provider, halting all network traffic
     */


    connect() {
      return this._rpcCore.connect();
    }
    /**
     * @description Disconnect from the underlying provider, halting all network traffic
     */


    disconnect() {
      return this._rpcCore.disconnect();
    }
    /**
     * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
     */


    findCall(callIndex) {
      return this.registry.findMetaCall(u8aToU8a(callIndex));
    }
    /**
     * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
     */


    findError(errorIndex) {
      return this.registry.findMetaError(u8aToU8a(errorIndex));
    }
    /**
     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
     */


    setSigner(signer) {
      this._rx.signer = signer;
    }
    /**
     * @description Signs a raw signer payload, string or Uint8Array
     */


    async sign(address, data, {
      signer
    } = {}) {
      if (isString(address)) {
        const _signer = signer || this._rx.signer;

        assert$a(_signer === null || _signer === void 0 ? void 0 : _signer.signRaw, 'No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
        return (await _signer.signRaw(_objectSpread$1(_objectSpread$1({
          type: 'bytes'
        }, data), {}, {
          address
        }))).signature;
      }

      return u8aToHex(address.sign(u8aToU8a(data.data)));
    }

  }

  var _allHasFired = _classPrivateFieldKey("allHasFired");

  var _callback = _classPrivateFieldKey("callback");

  var _fired = _classPrivateFieldKey("fired");

  var _fns = _classPrivateFieldKey("fns");

  var _isActive = _classPrivateFieldKey("isActive");

  var _results = _classPrivateFieldKey("results");

  var _subscriptions = _classPrivateFieldKey("subscriptions");

  class Combinator {
    constructor(fns, callback) {
      Object.defineProperty(this, _allHasFired, {
        writable: true,
        value: false
      });
      Object.defineProperty(this, _callback, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _fired, {
        writable: true,
        value: []
      });
      Object.defineProperty(this, _fns, {
        writable: true,
        value: []
      });
      Object.defineProperty(this, _isActive, {
        writable: true,
        value: true
      });
      Object.defineProperty(this, _results, {
        writable: true,
        value: []
      });
      Object.defineProperty(this, _subscriptions, {
        writable: true,
        value: []
      });
      _classPrivateFieldBase(this, _callback)[_callback] = callback; // eslint-disable-next-line @typescript-eslint/require-await

      _classPrivateFieldBase(this, _subscriptions)[_subscriptions] = fns.map(async (input, index) => {
        const [fn, ...args] = Array.isArray(input) ? input : [input];

        _classPrivateFieldBase(this, _fired)[_fired].push(false);

        _classPrivateFieldBase(this, _fns)[_fns].push(fn); // Not quite 100% how to have a variable number at the front here
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types


        return fn(...args, this._createCallback(index));
      });
    }

    _allHasFired() {
      var _classPrivateFieldLoo;

      (_classPrivateFieldLoo = _classPrivateFieldBase(this, _allHasFired))[_allHasFired] || (_classPrivateFieldLoo[_allHasFired] = _classPrivateFieldBase(this, _fired)[_fired].filter(hasFired => !hasFired).length === 0);
      return _classPrivateFieldBase(this, _allHasFired)[_allHasFired];
    }

    _createCallback(index) {
      return value => {
        _classPrivateFieldBase(this, _fired)[_fired][index] = true;
        _classPrivateFieldBase(this, _results)[_results][index] = value;

        this._triggerUpdate();
      };
    }

    _triggerUpdate() {
      if (!_classPrivateFieldBase(this, _isActive)[_isActive] || !isFunction$1(_classPrivateFieldBase(this, _callback)[_callback]) || !this._allHasFired()) {
        return;
      }

      try {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        _classPrivateFieldBase(this, _callback)[_callback](_classPrivateFieldBase(this, _results)[_results]);
      } catch (error) {// swallow, we don't want the handler to trip us up
      }
    }

    unsubscribe() {
      if (!_classPrivateFieldBase(this, _isActive)[_isActive]) {
        return;
      }

      _classPrivateFieldBase(this, _isActive)[_isActive] = false; // eslint-disable-next-line @typescript-eslint/no-misused-promises

      _classPrivateFieldBase(this, _subscriptions)[_subscriptions].forEach(async subscription => {
        try {
          const unsubscribe = await subscription;

          if (isFunction$1(unsubscribe)) {
            unsubscribe();
          }
        } catch (error) {// ignore
        }
      });
    }

  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  // extract the arguments and callback params from a value array possibly containing a callback
  function extractArgs(args, needsCallback) {
    let callback;
    const actualArgs = args.slice(); // If the last arg is a function, we pop it, put it into callback.
    // actualArgs will then hold the actual arguments to be passed to `method`

    if (args.length && isFunction$1(args[args.length - 1])) {
      callback = actualArgs.pop();
    } // When we need a subscription, ensure that a valid callback is actually passed


    assert$a(!needsCallback || isFunction$1(callback), 'Expected a callback to be passed with subscriptions');
    return [actualArgs, callback];
  } // a Promise completion tracker, wrapping an isComplete variable that ensures the promise only resolves once


  function promiseTracker(resolve, reject) {
    let isCompleted = false;
    return {
      reject: error => {
        if (!isCompleted) {
          isCompleted = true;
          reject(error);
        }

        return EMPTY;
      },
      resolve: value => {
        if (!isCompleted) {
          isCompleted = true;
          resolve(value);
        }
      }
    };
  } // Decorate a call for a single-shot result - retrieve and then immediate unsubscribe


  function decorateCall(method, actualArgs) {
    return new Promise((resolve, reject) => {
      // single result tracker - either reject with Error or resolve with Codec result
      const tracker = promiseTracker(resolve, reject); // encoding errors reject immediately, any result unsubscribes and resolves

      const subscription = method(...actualArgs).pipe(catchError(error => tracker.reject(error))).subscribe(result => {
        tracker.resolve(result);
        setTimeout(() => subscription.unsubscribe(), 0);
      });
    });
  } // Decorate a subscription where we have a result callback specified


  function decorateSubscribe(method, actualArgs, resultCb) {
    return new Promise((resolve, reject) => {
      // either reject with error or resolve with unsubscribe callback
      const tracker = promiseTracker(resolve, reject); // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback

      const subscription = method(...actualArgs).pipe(catchError(error => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe(result => {
        // queue result (back of queue to clear current)
        setTimeout(() => resultCb(result), 0);
      });
    });
  }
  /**
   * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
   */


  function decorateMethod(method, options) {
    const needsCallback = options && options.methodName && options.methodName.includes('subscribe');
    return function (...args) {
      const [actualArgs, resultCb] = extractArgs(args, !!needsCallback);
      return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options === null || options === void 0 ? void 0 : options.overrideNoSub) || method, actualArgs);
    };
  }
  /**
   * # @polkadot/api/promise
   *
   * ## Overview
   *
   * @name ApiPromise
   * @description
   * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
   *
   * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
   *
   * @see [[ApiRx]]
   *
   * ## Usage
   *
   * Making rpc calls -
   * <BR>
   *
   * ```javascript
   * import ApiPromise from '@polkadot/api/promise';
   *
   * // initialise via static create
   * const api = await ApiPromise.create();
   *
   * // make a subscription to the network head
   * api.rpc.chain.subscribeNewHeads((header) => {
   *   console.log(`Chain is at #${header.number}`);
   * });
   * ```
   * <BR>
   *
   * Subscribing to chain state -
   * <BR>
   *
   * ```javascript
   * import { ApiPromise, WsProvider } from '@polkadot/api';
   *
   * // initialise a provider with a specific endpoint
   * const provider = new WsProvider('wss://example.com:9944')
   *
   * // initialise via isReady & new with specific provider
   * const api = await new ApiPromise({ provider }).isReady;
   *
   * // retrieve the block target time
   * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
   * let last = 0;
   *
   * // subscribe to the current block timestamp, updates automatically (callback provided)
   * api.query.timestamp.now((timestamp) => {
   *   const elapsed = last
   *     ? `, ${timestamp.toNumber() - last}s since last`
   *     : '';
   *
   *   last = timestamp.toNumber();
   *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
   * });
   * ```
   * <BR>
   *
   * Submitting a transaction -
   * <BR>
   *
   * ```javascript
   * import ApiPromise from '@polkadot/api/promise';
   *
   * ApiPromise.create().then((api) => {
   *   const [nonce] = await api.query.system.account(keyring.alice.address);
   *
   *   api.tx.balances
   *     // create transfer
   *     transfer(keyring.bob.address, 12345)
   *     // sign the transcation
   *     .sign(keyring.alice, { nonce })
   *     // send the transaction (optional status callback)
   *     .send((status) => {
   *       console.log(`current status ${status.type}`);
   *     })
   *     // retrieve the submitted extrinsic hash
   *     .then((hash) => {
   *       console.log(`submitted with hash ${hash}`);
   *     });
   * });
   * ```
   */

  var _isReadyPromise = _classPrivateFieldKey("isReadyPromise");

  var _isReadyOrErrorPromise = _classPrivateFieldKey("isReadyOrErrorPromise");

  class ApiPromise extends ApiBase {
    /**
     * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
     * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
     * provider (see the constructor arguments)
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * Api.create().then(async (api) => {
     *   const timestamp = await api.query.timestamp.now();
     *
     *   console.log(`lastest block timestamp ${timestamp}`);
     * });
     * ```
     */
    static create(options) {
      return new ApiPromise(options).isReady;
    }
    /**
     * @description Creates an instance of the ApiPromise class
     * @param options Options to create an instance. This can be either [[ApiOptions]] or
     * an [[WsProvider]].
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * new Api().isReady.then((api) => {
     *   api.rpc.subscribeNewHeads((header) => {
     *     console.log(`new block #${header.number.toNumber()}`);
     *   });
     * });
     * ```
     */


    constructor(options) {
      super(options, 'promise', decorateMethod);
      Object.defineProperty(this, _isReadyPromise, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isReadyOrErrorPromise, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {
        super.once('ready', () => {
          resolve(this);
        });
      });
      _classPrivateFieldBase(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise] = new Promise((resolve, reject) => {
        super.once('ready', () => {
          resolve(this);
        });
        super.once('error', e => {
          reject(e);
        });
      });
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */


    get isReady() {
      return _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise];
    }
    /**
     * @description Promise that resolves if we can connect, or reject if there is an error
     */


    get isReadyOrError() {
      return _classPrivateFieldBase(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise];
    }
    /**
     * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
     */


    clone() {
      return new ApiPromise(_objectSpread(_objectSpread({}, this._options), {}, {
        source: this
      }));
    }
    /**
     * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
     * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
     * @param callback A callback that will return an Array of all the values this combinator has been applied to
     * @example
     * <BR>
     *
     * ```javascript
     * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
     *
     * // combines values from balance & nonce as it updates
     * api.combineLatest([
     *   api.rpc.chain.subscribeNewHeads,
     *   (cb) => api.query.system.account(address, cb)
     * ], ([head, [balance, nonce]]) => {
     *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
     * });
     * ```
     */
    // eslint-disable-next-line @typescript-eslint/require-await


    async combineLatest(fns, callback) {
      const combinator = new Combinator(fns, callback);
      return () => {
        combinator.unsubscribe();
      };
    }

  }

  var OP_TYPES;

  (function (OP_TYPES) {
    OP_TYPES["BUY"] = "BUY";
    OP_TYPES["LIST"] = "LIST";
    OP_TYPES["MINT"] = "MINT";
    OP_TYPES["MINTNFT"] = "MINTNFT";
    OP_TYPES["SEND"] = "SEND";
    OP_TYPES["EMOTE"] = "EMOTE";
    OP_TYPES["CHANGEISSUER"] = "CHANGEISSUER";
  })(OP_TYPES || (OP_TYPES = {}));

  const getApi = async wsEndpoint => {
    const wsProvider = new WsProvider(wsEndpoint);
    const api = ApiPromise.create({
      provider: wsProvider
    });
    return api;
  };
  const getLatestBlock = async api => {
    const header = await api.rpc.chain.getHeader();
    return header.number.toNumber();
  };
  const getLatestFinalizedBlock = async api => {
    const hash = await api.rpc.chain.getFinalizedHead();
    const header = await api.rpc.chain.getHeader(hash);

    if (header.number.toNumber() === 0) {
      console.error("Unable to retrieve finalized head - returned genesis block");
      process.exit(1);
    }

    return header.number.toNumber();
  };
  const deeplog = function (obj) {
    console.log(JSON.stringify(obj, null, 2));
  };
  const stringIsAValidUrl = s => {
    try {
      new url.URL(s);
      return true;
    } catch (err) {
      return false;
    }
  };
  const prefixToArray = function (prefix) {
    const returnArray = [];
    const exploded = prefix.split(",");

    for (const p of exploded) {
      if (p.indexOf("0x") === 0) {
        returnArray.push(p);
      } else {
        returnArray.push(stringToHex(p));
      }
    }

    return returnArray;
  };

  const getMeta = (call, block) => {
    const str = hexToString(call.value);
    const arr = str.split("::");

    if (arr.length < 3) {
      console.error("Invalid RMRK in block " + block + ": " + str);
      return false;
    }

    return {
      type: arr[1],
      version: parseFloat(arr[2]) ? arr[2] : "0.1"
    };
  };

  const getRemarksFromBlocks = blocks => {
    const remarks = [];

    for (const row of blocks) {
      for (const call of row.calls) {
        if (call.call !== "system.remark") continue;
        const meta = getMeta(call, row.block);
        if (!meta) continue;
        let remark;

        switch (meta.type) {
          case OP_TYPES.MINTNFT:
          case OP_TYPES.MINT:
            remark = decodeURI(hexToString(call.value));
            break;

          default:
            remark = hexToString(call.value);
            break;
        }

        const r = {
          block: row.block,
          caller: call.caller,
          interaction_type: meta.type,
          version: meta.version,
          remark: remark
        };
        remarks.push(r);
      }
    }

    return remarks;
  };

  var utils = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getApi: getApi,
    getLatestBlock: getLatestBlock,
    getLatestFinalizedBlock: getLatestFinalizedBlock,
    deeplog: deeplog,
    stringIsAValidUrl: stringIsAValidUrl,
    prefixToArray: prefixToArray,
    getRemarksFromBlocks: getRemarksFromBlocks
  });

  class Consolidator {
    constructor(initializedAdapter) {
      if (initializedAdapter) {
        this.adapter = initializedAdapter;
      }

      this.invalidCalls = [];
      this.collections = [];
      this.nfts = [];
    }

    findExistingCollection(id) {
      return this.collections.find(el => el.id === id);
    }

    updateInvalidCalls(op_type, remark) {
      const invalidCallBase = {
        op_type,
        block: remark.block,
        caller: remark.caller
      };
      return function update(object_id, message) {
        this.invalidCalls.push(Object.assign(Object.assign({}, invalidCallBase), {
          object_id,
          message
        }));
      };
    }

    mint(remark) {
      // A new collection was created
      console.log("Instantiating collection");
      const invalidate = this.updateInvalidCalls(OP_TYPES.MINT, remark).bind(this);
      const c = Collection.fromRemark(remark.remark, remark.block);

      if (typeof c === "string") {
        // console.log(
        //   "Collection was not instantiated OK from " + remark.remark
        // );
        invalidate(remark.remark, "[" + OP_TYPES.MINT + "] Dead before instantiation: " + c);
        return true;
      } //console.log("Collection instantiated OK from " + remark.remark);


      const pubkey = decodeAddress(remark.caller);
      const id = Collection.generateId(u8aToHex(pubkey), c.symbol);

      if (this.findExistingCollection(c.id)) {
        invalidate(c.id, "[" + OP_TYPES.MINT + "] Attempt to mint already existing collection");
        return true;
      }

      if (id.toLowerCase() !== c.id.toLowerCase()) {
        invalidate(c.id, "Caller's pubkey " + u8aToHex(pubkey) + " (" + id + ") does not match generated ID");
        return true;
      }

      this.collections.push(c);
      return false;
    }

    mintNFT(remark) {
      // A new NFT was minted into a collection
      console.log("Instantiating nft");
      const invalidate = this.updateInvalidCalls(OP_TYPES.MINTNFT, remark).bind(this);
      const n = NFT.fromRemark(remark.remark, remark.block);

      if (typeof n === "string") {
        invalidate(remark.remark, "[" + OP_TYPES.MINTNFT + "] Dead before instantiation: " + n);
        return true;
      }

      const nftParent = this.findExistingCollection(n.collection);

      if (!nftParent) {
        invalidate(n.getId(), "NFT referencing non-existant parent collection " + n.collection);
        return true;
      }

      n.owner = nftParent.issuer;

      if (remark.caller != n.owner) {
        invalidate(n.getId(), "Attempted issue of NFT in non-owned collection. Issuer: " + nftParent.issuer + ", caller: " + remark.caller);
        return true;
      }

      const existsCheck = this.nfts.find(el => {
        const idExpand1 = el.getId().split("-");
        idExpand1.shift();
        const uniquePart1 = idExpand1.join("-");
        const idExpand2 = n.getId().split("-");
        idExpand2.shift();
        const uniquePart2 = idExpand2.join("-");
        return uniquePart1 === uniquePart2;
      });

      if (existsCheck) {
        invalidate(n.getId(), "[" + OP_TYPES.MINTNFT + "] Attempt to mint already existing NFT");
        return true;
      }

      if (n.owner === "") {
        invalidate(n.getId(), "[" + OP_TYPES.MINTNFT + "] Somehow this NFT still doesn't have an owner.");
        return true;
      }

      this.nfts.push(n);
      return false;
    }

    send(remark) {
      // An NFT was sent to a new owner
      console.log("Instantiating send");
      const send = Send.fromRemark(remark.remark);
      const invalidate = this.updateInvalidCalls(OP_TYPES.SEND, remark).bind(this);

      if (typeof send === "string") {
        invalidate(remark.remark, "[" + OP_TYPES.SEND + "] Dead before instantiation: " + send);
        return true;
      }

      const nft = this.nfts.find(el => {
        const idExpand1 = el.getId().split("-");
        idExpand1.shift();
        const uniquePart1 = idExpand1.join("-");
        const idExpand2 = send.id.split("-");
        idExpand2.shift();
        const uniquePart2 = idExpand2.join("-");
        return uniquePart1 === uniquePart2;
      }); // @todo add condition for transferable!

      if (!nft) {
        invalidate(send.id, "[" + OP_TYPES.SEND + "] Attempting to send non-existant NFT " + send.id);
        return true;
      } // Check if allowed to issue send - if owner == caller


      if (nft.owner != remark.caller) {
        invalidate(send.id, "[" + OP_TYPES.SEND + "] Attempting to send non-owned NFT " + send.id + ", real owner: " + nft.owner);
        return true;
      }

      nft.addChange({
        field: "owner",
        old: nft.owner,
        new: send.recipient,
        caller: remark.caller,
        block: remark.block
      });
      nft.owner = send.recipient;
      return false;
    }

    emote(remark) {
      // An EMOTE reaction has been sent
      console.log("Instantiating emote");
      const emote = Emote.fromRemark(remark.remark);
      const invalidate = this.updateInvalidCalls(OP_TYPES.EMOTE, remark).bind(this);

      if (typeof emote === "string") {
        invalidate(remark.remark, "[" + OP_TYPES.EMOTE + "] Dead before instantiation: " + emote);
        return true;
      }

      const target = this.nfts.find(el => el.getId() === emote.id);

      if (!target) {
        invalidate(emote.id, "[" + OP_TYPES.EMOTE + "] Attempting to emote on non-existant NFT " + emote.id);
        return true;
      }

      const index = target.reactions[emote.unicode].indexOf(remark.caller, 0);

      if (index > -1) {
        target.reactions[emote.unicode].splice(index, 1);
      } else {
        target.reactions[emote.unicode].push(remark.caller);
      }

      return false;
    }

    changeIssuer(remark) {
      // The ownership of a collection has changed
      console.log("Instantiating an issuer change");
      const ci = ChangeIssuer.fromRemark(remark.remark);
      const invalidate = this.updateInvalidCalls(OP_TYPES.CHANGEISSUER, remark).bind(this);

      if (typeof ci === "string") {
        // console.log(
        //   "ChangeIssuer was not instantiated OK from " + remark.remark
        // );
        invalidate(remark.remark, "[" + OP_TYPES.CHANGEISSUER + "] Dead before instantiation: " + ci);
        return true;
      }

      const coll = this.collections.find(el => el.id === ci.id);

      if (!coll) {
        invalidate(ci.id, "This " + OP_TYPES.CHANGEISSUER + " remark is invalid - no such collection with ID " + ci.id + " found before block " + remark.block + "!");
        return true;
      }

      if (remark.caller != coll.issuer) {
        invalidate(ci.id, "Attempting to change issuer of collection " + ci.id + " when not issuer!");
        return true;
      }

      coll.addChange({
        field: "issuer",
        old: coll.issuer,
        new: ci.issuer,
        caller: remark.caller,
        block: remark.block
      });
      coll.issuer = ci.issuer;
      return false;
    }

    consolidate(rmrks) {
      var _a;

      const remarks = rmrks || ((_a = this.adapter) === null || _a === void 0 ? void 0 : _a.getRemarks()) || []; //console.log(remarks);

      for (const remark of remarks) {
        console.log("==============================");
        console.log("Remark is: " + remark.remark);

        switch (remark.interaction_type) {
          case OP_TYPES.MINT:
            if (this.mint(remark)) {
              continue;
            }

            break;

          case OP_TYPES.MINTNFT:
            if (this.mintNFT(remark)) {
              continue;
            }

            break;

          case OP_TYPES.SEND:
            if (this.send(remark)) {
              continue;
            }

            break;

          case OP_TYPES.BUY:
            // An NFT was bought after being LISTed
            break;

          case OP_TYPES.LIST:
            // An NFT was listed for sale
            break;

          case OP_TYPES.EMOTE:
            if (this.emote(remark)) {
              continue;
            }

            break;

          case OP_TYPES.CHANGEISSUER:
            if (this.changeIssuer(remark)) {
              continue;
            }

            break;

          default:
            console.error("Unable to process this remark - wrong type: " + remark.interaction_type);
        }
      }

      deeplog(this.nfts);
      deeplog(this.collections);
      console.log(this.invalidCalls);
    }

  }

  var fetchRemarks = (async (api, from, to, prefixes) => {
    const bcs = [];

    for (let i = from; i <= to; i++) {
      if (i % 1000 === 0) {
        const event = new Date();
        console.log("Block " + i + " at time " + event.toTimeString());

        if (i % 5000 === 0) {
          console.log("Currently at " + bcs.length + " remarks.");
        }
      }

      const blockHash = await api.rpc.chain.getBlockHash(i);
      const block = await api.rpc.chain.getBlock(blockHash);
      const bc = [];

      if (block.block === undefined) {
        console.error("block.block is undefined for block " + i);
        deeplog(block);
        continue;
      }

      let exIndex = 0;

      exLoop: for (const ex of block.block.extrinsics) {
        if (ex.isEmpty || !ex.isSigned) {
          exIndex++;
          continue;
        }

        const {
          method: {
            args,
            method,
            section
          }
        } = ex;

        if (section === "system" && method === "remark") {
          const remark = args.toString();

          if (prefixes.some(word => remark.startsWith(word))) {
            //if (remark.indexOf(prefix) === 0) {
            bc.push({
              call: "system.remark",
              value: remark,
              caller: ex.signer.toString()
            });
          }
        } else if (section === "utility" && (method === "batch" || method == "batchAll")) {
          // @ts-ignore
          const batchargs = args[0];
          let remarkExists = false;
          batchargs.forEach(el => {
            if (el.section === "system" && el.method === "remark" && prefixes.some(word => el.args.toString().startsWith(word))) {
              remarkExists = true;
            }
          });

          if (remarkExists) {
            const records = await api.query.system.events.at(blockHash);
            const events = records.filter(({
              phase,
              event
            }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(exIndex) && event.method.toString() === "BatchInterrupted");

            if (events.length) {
              console.log("Skipping batch " + i + "-" + exIndex + " due to BatchInterrupted");
              exIndex++;
              continue exLoop;
            }

            batchargs.forEach(el => {
              bc.push({
                call: el.section + "." + el.method,
                value: el.args.toString(),
                caller: ex.signer.toString()
              });
            });
          }
        }

        exIndex++;
      }

      if (bc.length) {
        bcs.push({
          block: i,
          calls: bc
        });
      }
    }

    return bcs;
  });

  exports.Consolidator = Consolidator;
  exports.c100 = Collection;
  exports.fetchRemarks = fetchRemarks;
  exports.n100 = NFT;
  exports.utils = utils;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
